function AnEventController(e,n,t,o,a){function s(e){return btoa(e)}function r(e){return atob(e)}function l(e){return Date.parse(e)}function d(){f.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function c(e){n.info("adding them to the registered users list "+e),p.child("Users").child(e).child("events").child("pending").child(o.uid).child(o.eventId).set({id:o.eventId,eventTimes:{start:f.event.eventTimes.start,end:f.event.eventTimes.end},name:f.event.name,host:o.uid},function(e){e&&n.info("there was an error"+e)}),p.child("Users").child(e).child("events").child("pending").once("value",function(t){var i=t.val();n.info(t.val()),i.updated?(n.info("deleting updated"),p.child("Users").child(e).child("events").child("pending").child("updated").remove(function(e){e&&n.info("Deleting failed: "+e.code)})):n.info("nothing to do")},function(e){e&&n.info("The read failed: "+e.code)})}function u(e){n.info("adding them to the UNREGISTERED users list "+e),p.child("UnregisteredUsers").child(e).child("pending").child(o.uid).child(o.eventId).set({id:o.eventId,host:o.uid,eventTimes:{start:f.event.eventTimes.start,end:f.event.eventTimes.end},name:f.event.name},function(e){e&&n.info("there was an error"+e)})}function v(){var e=p.getAuth();e.uid==o.hostId?(n.info("is the host"),f.showIfHost=!0):(n.info("not the host"),f.showIfHost=!1)}function m(){f.showIfHost||(n.info("check guest attendance"),w.child("guestList").on("value",function(e){var n=e.val();f.hideIfAttending=!n[o.uid].attending}))}function g(){f.manageSections[1].active=!0,f.manageSections[2].active=!0,f.manageSections[3].active=!0}var f=this,h="https://meetupplanner.firebaseio.com/",p=new Firebase(h),w=p.child("Users").child(o.hostId).child("events").child("hosting").child(o.eventId);f.tempDateTime={start:new Date,end:new Date},f.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},f.showIfHost=!1,f.hideIfAttending=!0,f.event=a(w);var b=a(p.child("Uids"));f.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},f.unixTimeToDateTime=function(e){return new Date(parseInt(e))},f.dateTimeToUnixTime=function(e){return Date.parse(e)},f.submit=function(){n.info("submitting the form now!")},f.backToUserEvents=function(){t.path("/userEvents/"+o.uid+"/"+o.token)},f.eventRedirect=function(e,i){var a=e+"/"+o.uid+"/"+o.token;n.info("redirecting to: "+a),t.path(a)},f.changeSection=function(e){for(i=1;i<=3;i++)i==e?(f.manageSections[i].active=!0,f.manageSections[i].style["background-color"]="yellow",f.manageSections[i].style.color="black"):(f.manageSections[i].active=!1,f.manageSections[i].style["background-color"]="gray",f.manageSections[i].style.color="white")},f.saveEventTime=function(e,n){f.event.eventTimes||(f.event.eventTimes={start:"",end:""},f.event.eventTimes.start=f.dateTimeToUnixTime(f.tempDateTime.start),f.event.eventTimes.end=f.dateTimeToUnixTime(f.tempDateTime.end)),f.tempDateTime.end<f.tempDateTime.start&&"start"==n&&(f.tempDateTime.end=f.tempDateTime.start),"start"==n&&(f.event.eventTimes.start=f.dateTimeToUnixTime(e)),"end"==n&&(f.event.eventTimes.end=f.dateTimeToUnixTime(e))},f.guestsAreInvited=function(){return!!f.event.guestList},f.validateGuestEmail=function(){if(f.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(f.newGuest.email.address)?(f.newGuest.email.valid=!0,f.newGuest.email.style={color:"green"}):(f.newGuest.email.valid=!1,f.newGuest.email.style={color:""})}},f.isSectionComplete=function(){f.manageSections[1].active?f.event.name&&f.event.type&&f.event.eventTimes.start&&f.event.eventTimes.start?(n.info("setting section 1 to green"),f.manageSections[1].complete=!0,f.manageSections[1].style["background-color"]="green"):f.manageSections[1].complete=!1:f.manageSections[2].active?f.event.address.city&&f.event.address.state&&f.event.address.street01&&f.event.address.zip?(n.info("setting section 2 to green"),f.manageSections[2].complete=!0,f.manageSections[2].style["background-color"]="green"):f.manageSections[2].complete=!1:f.manageSections[3].active&&(n.info("setting section 2 to green"),f.manageSections[3].complete=!0,f.manageSections[3].style["background-color"]="green")},f.saveEvent=function(){f.event.$save().then(function(){n.info("event saved")})["catch"](function(e){n.info("error! "+e)})},f.saveAndAdvance=function(){f.event.$save().then(function(){n.info("event saved")})["catch"](function(e){n.info("error! "+e)}),f.isSectionComplete(),1==f.manageSections[1].complete&&1==f.manageSections[2].complete&&1==f.manageSections[3].complete?f.eventRedirect("/userEvents",o.uid):f.manageSections[1].active?f.changeSection(2):f.manageSections[2].active?f.changeSection(3):f.manageSections[3].active&&f.changeSection(1)},f.addGuestToHostsList=function(){var e=s(f.newGuest.email.address);if(f.newGuest.name&&f.newGuest.email.valid){if(f.event.guestList)for(var t=0;f.event.guestList[t];){if(f.event.guestList[t].email==r(e))return n.info("This guest is already on the list"),void d();t++}else f.event.guestList={};if(b[e]){if(b[e]==o.uid)return n.info("tried to register the host"),void d();c(b[e]),f.event.guestList[b[e]]={attending:!1,status:"pending",name:f.newGuest.name,email:f.newGuest.email.address}}else u(e),f.event.guestList[e]={attending:!1,status:"pending",name:f.newGuest.name,email:f.newGuest.email.address};f.saveEvent(),d()}else n.info("you didn't enter a name and or email")},f.guestWillAttend=function(e){var t=p.child("Users").child(o.uid).child("events"),i=0,a=!1;if(f.event.guestList[o.uid].attending=e,f.event.guestList[o.uid].status="attending",t.child("pending").on("value",function(a){var s=a.val();n.info(s),n.info(s[o.hostId]),n.info(s[o.hostId][o.eventId]);var r=s[o.hostId][o.eventId];n.info(r);for(invitation in s)i++;n.info("total attending: "+i),e&&t.child("attending").child(o.hostId).child(o.eventId).set(r,function(e){e&&n.info(e)})}),t.child("attending").on("value",function(e){var t=e.val();n.info("this is the attending list"),n.info(t),t.updated&&(a=!0)},function(e){e&&n.info(e)}),2>i){var s=new Date;t.child("pending").update({updated:l(s)},function(e){e&&n.info(e)})}t.child("pending").child(o.hostId).remove(),a&&n.info("removing the updated placeholder"),f.event.$save()},f.updateUpdatedParam=function(){var e=p.child("Users").child(o.uid).child("events");n.info("updating the param"),e.child("attending").on("value",function(e){n.info(e.val())}),e.child("attending").child("updated").remove()},f.addInvitationToAttending=function(e){var t=p.child("Users").child(o.uid).child("events"),i=0;t.child("pending").on("value",function(a){var s=a.val(),r=s[o.hostId][o.eventId];n.info(s),n.info(s[o.hostId]),n.info(s[o.hostId][o.eventId]);for(invitation in s)i++;n.info("total pending invitations: "+i),n.info(e),e&&t.child("attending").child(o.hostId).child(o.eventId).set(r,function(e){e&&n.info(e)})})},n.info(o.uid),n.info(o.eventId),v(),m(),f.showIfHost||g()}function LandingPageController(e,n,t,o,a){function s(e){return btoa(e)}function r(e){return Date.parse(e)}function l(i,o){var a=i+"/"+u.uid+"/"+u.token;n.info("redirecting to: "+a),t.path(a),e.$apply()}var d=this,c="https://meetupplanner.firebaseio.com/",u={};d.showRequirnments=!1,d.validNewName={valid:!1,style:{color:""}},d.validNewEmail={valid:!1,style:{color:""}},d.securePassword={secure:!1,style:{color:""}},d.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},d.message="testing",d.validUserEmail={valid:!1,style:{color:""}},d.validUserPassword={valid:!1,style:{color:""}},d.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},d.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},d.displayPassReqs=function(){d.newName&&d.newEmail?d.showRequirnments=!0:d.showRequirnments=!1},d.checkNewName=function(){d.newName&&(d.newName.length>0?(d.validNewName.valid=!0,d.validNewName.style={color:"green"}):(d.validNewName.valid=!1,d.validNewName.style={color:"red"})),d.openCreateUserButton()},d.checkNewEmail=function(){if(d.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(d.newEmail)?(d.validNewEmail.valid=!0,d.validNewEmail.style={color:"green"}):(d.validNewEmail.valid=!1,d.validNewEmail.style={color:"red"})}d.openCreateUserButton()},d.checkUserEmail=function(){if(d.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(d.userEmail)?(d.validUserEmail.valid=!0,d.validUserEmail.style={color:"green"}):(d.validUserEmail.valid=!1,d.validUserEmail.style={color:"red"})}d.openUserLoginBtn()},d.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(d.newPassword){for(d.newPassword.length>15?(d.passwordRequirnments[0].style={color:"green"},d.passwordRequirnments[0].met=!0):(d.passwordRequirnments[0].style={color:"red"},d.passwordRequirnments[0].met=!1),d.newPassword.length<=100?(d.passwordRequirnments[1].style={color:"green"},d.passwordRequirnments[1].met=!0):(d.passwordRequirnments[1].style={color:"red"},d.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(d.newPassword)?(d.passwordRequirnments[i].style={color:"green"},d.passwordRequirnments[i].met=!0):(d.passwordRequirnments[i].style={color:"red"},d.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(d.newPassword)?(d.passwordRequirnments[6].style={color:"green"},d.passwordRequirnments[6].met=!0):(d.passwordRequirnments[6].style={color:"red"},d.passwordRequirnments[6].met=!1),d.passwordRequirnments[0].met&&d.passwordRequirnments[1].met&&d.passwordRequirnments[2].met&&d.passwordRequirnments[3].met&&d.passwordRequirnments[4].met&&d.passwordRequirnments[5].met&&d.passwordRequirnments[6].met?d.securePassword.secure=!0:d.securePassword.secure=!1,d.securePassword.secure?d.securePassword.style={color:"green"}:d.securePassword.style={color:"red"}}d.openCreateUserButton()},d.checkUserPasswords=function(){d.userPassword&&(d.userPassword.length>15?(d.validUserPassword.style={color:"green"},d.validUserPassword.valid=!0):(d.validUserPassword.style={color:"red"},d.validUserPassword.valid=!1)),d.openUserLoginBtn()},d.openCreateUserButton=function(){d.validNewName.valid&&d.validNewEmail.valid&&d.securePassword.secure?(d.unlockCreateUserBtn["class"]="btn btn-success",d.unlockCreateUserBtn.usable=!0):(d.unlockCreateUserBtn["class"]="btn btn-warning",d.unlockCreateUserBtn.usable=!1)},d.openUserLoginBtn=function(){d.validUserEmail.valid&&d.validUserPassword.valid?(d.unclockUserLoginBtn["class"]="btn btn-success",d.unclockUserLoginBtn.usable=!0):(d.unclockUserLoginBtn["class"]="btn btn-warning",d.unclockUserLoginBtn.usable=!1)},d.update=function(){d.newName=o.find("#newName")[0].value,d.newEmail=o.find("#newEmail")[0].value,d.userEmail=o.find("#userEmail")[0].value,d.checkNewName(),d.checkNewEmail(),d.checkUserEmail()},d.createNewUser=function(){if(n.info("Creating a new user account now!"),d.unlockCreateUserBtn.usable){var e=new Firebase(c);e.createUser({email:d.newEmail,password:d.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),u=i;var o=e.child("Users/"+i.uid),a=new Date;o.set({bio:{name:d.newName,email:d.newEmail},events:{pending:{updated:r(a)},hosting:{updated:r(a)},attending:{updated:r(a)},completed:{updated:r(a)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(s(d.newEmail)).set(u.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",u)}})}},d.loginRegisteredUser=function(){if(d.unclockUserLoginBtn.usable){var t=new Firebase(c);t.authWithPassword({email:d.userEmail,password:d.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),u=i,l("/userInformation",u),e.$apply())})}},d.alertMe=function(){alert("this is working! an alert!")},d.onResizeFunction=function(){var e=angular.element(".inputText");a.outerWidth>a.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in o&&o.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(o.body)},!1),angular.element(a).bind("resize",function(){d.onResizeFunction()}),angular.element(o).ready(function(){a.outerWidth<600&&d.onResizeFunction()})}function MainController(e,n,t){var i=this,o="https://meetupplanner.firebaseio.com/",a=new Firebase(o);i.logout=function(){alert("logging you out!"),a.unauth(),n.path("/")},"addEventListener"in t&&t.addEventListener("DOMContentLoaded",function(){e.info("adding FastClick"),FastClick.attach(t.body)},!1)}function topMenuController(e,n,t,i,o){function a(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),r.loggedIn=!0):(n.info("User is logged out"),r.loggedIn=!1)}function s(e,i){var o=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+o),t.path(o)}var r=this,l="https://meetupplanner.firebaseio.com/",d=new Firebase(l);r.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(o).bind("resize",function(){r.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){o.outerWidth<600&&(r.onResizeFunction(),e.$apply())}),r.logout=function(){n.info("logging out!"),r.loggedIn=!1,d.unauth(),s("/",{uid:"",token:""})},r.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:r.navbarUserEmail,password:r.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),s("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},r.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",o.outerWidth-26+"px")},d.onAuth(a)}function UserEventsController(e,n,t,i,o){function a(e){return Date.parse(e)}function s(e,n){return 10*e+n}function r(e,o,a){var s=e+"/"+o+"/"+a+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+s),t.path(s)}var l=this,d="https://meetupplanner.firebaseio.com/",c=new Firebase(d),u=c.child("Users").child(i.uid).child("events"),v=c.child("Users").child(i.uid).child("bio");l.events=o(u),l.showDecline=!1,v.child("name").on("value",function(t){l.currentUserName=t.val(),n.info("got the user name"),e.$apply()},function(e){n.info("The read failed: "+e.code)}),l.eventsAreBeingHosted=function(){var e=!1;for(element in l.events.hosting)"updated"!=element&&(e=!0);return e},l.eventInvitationsPending=function(){var e=!1;for(element in l.events.pending)"updated"!=element&&(e=!0);return e},l.attendingEvents=function(e){var n=!1;for(element in l.events.attending)"updated"!=element&&(n=!0);return n},l.percentRSVPed=function(e){return e?l.totalAttending(e)/l.totalInvited(e)*100:0},l.totalAttending=function(e){if(e){var n=0;return angular.forEach(e,function(e,t){1==e.attending&&n++}),n}return 0},l.totalInvited=function(e){if(e){var n=0;return angular.forEach(e,function(e,t){n++}),n}return 0},l.acceptEventInvitation=function(e){},l.redirectToHostedEvent=function(e){n.info("you're accessing event "+e),r("/event",e,i.uid)},l.redirectTo3rdPartyEvent=function(e,t){n.info(e),"pending"==t?(n.info("accessing from a pending invitation"),n.info(e),r("/event",e.id,e.host)):"attending"==t&&(n.info("accessing from an rsvped invitation"),r("/event",e.id,e.host))},l.createNewEvent=function(){n.info("you're creating a new event!");var e=new Date;l.events.hosting?noOfEventsAlready=Object.keys(l.events.hosting).length:noOfEventsAlready=0;var t=s(a(e),noOfEventsAlready);l.events.hosting[t]={id:t,eventTimes:{start:a(e),end:a(e)},host:{id:i.uid,name:l.currentUserName}},(""==l.events.hosting.updated||l.events.hosting.updated)&&(n.info("deleting the updated field"),delete l.events.hosting.updated),l.events.$save().then(function(){n.info("Profile saved!"),n.info(l.events.hosting[t])})["catch"](function(e){n.info("Error!")}),r("/event",t,i.uid)},n.info("into the user Events controller"),n.info(l.events)}function UserInformationController(e,n,t,i){function o(){}function a(e){return new Date(parseInt(e))}function s(e){return Date.parse(e)}function r(i){var o=i+"/"+t.uid+"/"+t.token;e.info("redirecting to: "+o),n.path(o)}var l=this,d="https://meetupplanner.firebaseio.com/",c=new Firebase(d),u=c.child("Users").child(t.uid).child("bio");l.user=i(u),o(),l.proceedBtn="btn btn-primary",l.btnMssg="Move On...",l.dataToSave=!1,l.isData=!1,l.user.$loaded().then(function(){l.user.birthday?l.tempBirthday=a(l.user.birthday):l.tempBirthday=new Date}),l.checkValues=function(){!angular.isUndefined(l.user.employer)&&""!==l.user.employer||!angular.isUndefined(l.user.jobTitle)&&""!==l.user.jobTitle||!angular.isUndefined(l.user.birthday)&&""!==l.user.birthday?(l.dataToSave=!0,l.proceedBtn="btn btn-success",l.btnMssg="Save & Continue"):(l.dataToSave=!1,l.proceedBtn="btn btn-primary",l.btnMssg="Move On...")},l.saveAndMoveOn=function(){l.user.birthday=s(l.tempBirthday),l.user.$save(),r("/userEvents")}}function authService(e,n,t){function i(n){n?e.info("User "+n.uid+" is logged in with "+n.provider):(e.info("User is logged out...dumping them back to landing page"),t.path("/"))}function o(){e.info("logging from the isLoggedIn Method"),s.onAuth(i)}var a="https://meetupplanner.firebaseio.com/",s=new Firebase(a),r={isLoggedIn:o};return r}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/userInformation/:uid?/:token?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?/:token?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:token?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","$q","$location"],angular.module("meetUpEventApp").config(config);
//# sourceMappingURL=data:application/json;base64,
