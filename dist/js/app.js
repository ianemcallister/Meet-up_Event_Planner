function AnEventController(e,n,t,r,o){function a(){p.tempDateTime={start:"",end:""},p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},p.showIfHost=!1,p.hideIfAttending=!0,p.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},m(),g(),p.showIfHost||v()}function s(e){return btoa(e)}function l(e){return atob(e)}function u(e){return Date.parse(e)}function d(){p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function c(e){n.info("adding them to the registered users list "+e),w.child("Users").child(e).child("events").child("pending").child(r.uid).child(r.eventId).set({id:r.eventId,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name,host:r.uid},function(e){e&&n.info("there was an error"+e)}),w.child("Users").child(e).child("events").child("pending").once("value",function(t){var i=t.val();n.info(t.val()),i.updated?(n.info("deleting updated"),w.child("Users").child(e).child("events").child("pending").child("updated").remove(function(e){e&&n.info("Deleting failed: "+e.code)})):n.info("nothing to do")},function(e){e&&n.info("The read failed: "+e.code)})}function f(e){n.info("adding them to the UNREGISTERED users list "+e),w.child("UnregisteredUsers").child(e).child("pending").child(r.uid).child(r.eventId).set({id:r.eventId,host:r.uid,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name},function(e){e&&n.info("there was an error"+e)})}function m(){var e=w.getAuth();e.uid==r.hostId?(n.info("is the host"),p.showIfHost=!0):(n.info("not the host"),p.showIfHost=!1)}function g(){p.showIfHost||(n.info("check guest attendance"),U.child("guestList").on("value",function(e){var n=e.val();p.hideIfAttending=!n[r.uid].attending}))}function v(){p.manageSections[1].active=!0,p.manageSections[2].active=!0,p.manageSections[3].active=!0}var p=this,h="https://meetupplanner.firebaseio.com/",w=new Firebase(h),U=w.child("Users").child(r.hostId).child("events").child("hosting").child(r.eventId);p.event=o(U);var b=o(w.child("Uids"));p.requiredInputs=["","","","","","","","",""],p.setTempTime=function(e){"start"==e&&(p.tempDateTime.start=new Date),"end"==e&&(p.tempDateTime.end=new Date)},p.unixTimeToDateTime=function(e){return new Date(parseInt(e))},p.dateTimeToUnixTime=function(e){return Date.parse(e)},p.submit=function(){n.info("submitting the form now!")},p.backToUserEvents=function(){t.path("/userEvents/"+r.uid+"/"+r.token)},p.eventRedirect=function(e,i){var o=e+"/"+r.uid+"/"+r.token;n.info("redirecting to: "+o),t.path(o)},p.changeSection=function(e){for(n.info("are we here"),i=1;i<=3;i++)i==e?(p.manageSections[i].active=!0,p.manageSections[i].style["background-color"]="yellow",p.manageSections[i].style.color="black"):(p.manageSections[i].active=!1,p.manageSections[i].style["background-color"]="gray",p.manageSections[i].style.color="white")},p.saveEventTime=function(e,n){p.event.eventTimes||(p.event.eventTimes={start:"",end:""},p.event.eventTimes.start=p.dateTimeToUnixTime(p.tempDateTime.start),p.event.eventTimes.end=p.dateTimeToUnixTime(p.tempDateTime.end)),p.tempDateTime.end<p.tempDateTime.start&&"start"==n&&(p.tempDateTime.end=p.tempDateTime.start),"start"==n&&(p.event.eventTimes.start=p.dateTimeToUnixTime(e)),"end"==n&&(p.event.eventTimes.end=p.dateTimeToUnixTime(e))},p.guestsAreInvited=function(){return!!p.event.guestList},p.validateGuestEmail=function(){if(p.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(p.newGuest.email.address)?(p.newGuest.email.valid=!0,p.newGuest.email.style={color:"green"}):(p.newGuest.email.valid=!1,p.newGuest.email.style={color:""})}},p.isSectionComplete=function(){for(i=0;i<8;i++)n.info(p.requiredInputs[i])},p.saveAndAdvance=function(){p.event.$save().then(function(){n.info("event saved")})["catch"](function(e){n.info("error! "+e)}),p.isSectionComplete(),1==p.manageSections[1].complete&&1==p.manageSections[2].complete&&1==p.manageSections[3].complete?p.eventRedirect("/userEvents",r.uid):p.manageSections[1].active?p.changeSection(2):p.manageSections[2].active?p.changeSection(3):p.manageSections[3].active&&p.changeSection(1)},p.addGuestToHostsList=function(){var e=s(p.newGuest.email.address);if(p.newGuest.name&&p.newGuest.email.valid){if(p.event.guestList)for(var t=0;p.event.guestList[t];){if(p.event.guestList[t].email==l(e))return n.info("This guest is already on the list"),void d();t++}else p.event.guestList={};if(b[e]){if(b[e]==r.uid)return n.info("tried to register the host"),void d();c(b[e]),p.event.guestList[b[e]]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address}}else f(e),p.event.guestList[e]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address};p.saveEvent(),d()}else n.info("you didn't enter a name and or email")},p.guestWillAttend=function(e){var t=w.child("Users").child(r.uid).child("events"),i=0,o=!1;if(p.event.guestList[r.uid].attending=e,p.event.guestList[r.uid].status="attending",t.child("pending").on("value",function(o){var a=o.val();n.info(a),n.info(a[r.hostId]),n.info(a[r.hostId][r.eventId]);var s=a[r.hostId][r.eventId];n.info(s);for(invitation in a)i++;n.info("total attending: "+i),e&&t.child("attending").child(r.hostId).child(r.eventId).set(s,function(e){e&&n.info(e)})}),t.child("attending").on("value",function(e){var t=e.val();n.info("this is the attending list"),n.info(t),t.updated&&(o=!0)},function(e){e&&n.info(e)}),2>i){var a=new Date;t.child("pending").update({updated:u(a)},function(e){e&&n.info(e)})}t.child("pending").child(r.hostId).remove(),o&&n.info("removing the updated placeholder"),p.event.$save()},p.updateUpdatedParam=function(){var e=w.child("Users").child(r.uid).child("events");n.info("updating the param"),e.child("attending").on("value",function(e){n.info(e.val())}),e.child("attending").child("updated").remove()},p.addInvitationToAttending=function(e){var t=w.child("Users").child(r.uid).child("events"),i=0;t.child("pending").on("value",function(o){var a=o.val(),s=a[r.hostId][r.eventId];n.info(a),n.info(a[r.hostId]),n.info(a[r.hostId][r.eventId]);for(invitation in a)i++;n.info("total pending invitations: "+i),n.info(e),e&&t.child("attending").child(r.hostId).child(r.eventId).set(s,function(e){e&&n.info(e)})})},a()}function LandingPageController(e,n,t,r,o){function a(e){return btoa(e)}function s(e){return Date.parse(e)}function l(i,r){var o=i+"/"+c.uid+"/"+c.token;n.info("redirecting to: "+o),t.path(o),e.$apply()}var u=this,d="https://meetupplanner.firebaseio.com/",c={};u.showRequirnments=!1,u.validNewName={valid:!1,style:{color:""}},u.validNewEmail={valid:!1,style:{color:""}},u.securePassword={secure:!1,style:{color:""}},u.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},u.message="testing",u.validUserEmail={valid:!1,style:{color:""}},u.validUserPassword={valid:!1,style:{color:""}},u.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},u.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},u.displayPassReqs=function(){u.newName&&u.newEmail?u.showRequirnments=!0:u.showRequirnments=!1},u.checkNewName=function(){u.newName&&(u.newName.length>0?(u.validNewName.valid=!0,u.validNewName.style={color:"green"}):(u.validNewName.valid=!1,u.validNewName.style={color:"red"})),u.openCreateUserButton()},u.checkNewEmail=function(){if(u.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.newEmail)?(u.validNewEmail.valid=!0,u.validNewEmail.style={color:"green"}):(u.validNewEmail.valid=!1,u.validNewEmail.style={color:"red"})}u.openCreateUserButton()},u.checkUserEmail=function(){if(u.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.userEmail)?(u.validUserEmail.valid=!0,u.validUserEmail.style={color:"green"}):(u.validUserEmail.valid=!1,u.validUserEmail.style={color:"red"})}u.openUserLoginBtn()},u.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(u.newPassword){for(u.newPassword.length>15?(u.passwordRequirnments[0].style={color:"green"},u.passwordRequirnments[0].met=!0):(u.passwordRequirnments[0].style={color:"red"},u.passwordRequirnments[0].met=!1),u.newPassword.length<=100?(u.passwordRequirnments[1].style={color:"green"},u.passwordRequirnments[1].met=!0):(u.passwordRequirnments[1].style={color:"red"},u.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(u.newPassword)?(u.passwordRequirnments[i].style={color:"green"},u.passwordRequirnments[i].met=!0):(u.passwordRequirnments[i].style={color:"red"},u.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(u.newPassword)?(u.passwordRequirnments[6].style={color:"green"},u.passwordRequirnments[6].met=!0):(u.passwordRequirnments[6].style={color:"red"},u.passwordRequirnments[6].met=!1),u.passwordRequirnments[0].met&&u.passwordRequirnments[1].met&&u.passwordRequirnments[2].met&&u.passwordRequirnments[3].met&&u.passwordRequirnments[4].met&&u.passwordRequirnments[5].met&&u.passwordRequirnments[6].met?u.securePassword.secure=!0:u.securePassword.secure=!1,u.securePassword.secure?u.securePassword.style={color:"green"}:u.securePassword.style={color:"red"}}u.openCreateUserButton()},u.checkUserPasswords=function(){u.userPassword&&(u.userPassword.length>15?(u.validUserPassword.style={color:"green"},u.validUserPassword.valid=!0):(u.validUserPassword.style={color:"red"},u.validUserPassword.valid=!1)),u.openUserLoginBtn()},u.openCreateUserButton=function(){u.validNewName.valid&&u.validNewEmail.valid&&u.securePassword.secure?(u.unlockCreateUserBtn["class"]="btn btn-success",u.unlockCreateUserBtn.usable=!0):(u.unlockCreateUserBtn["class"]="btn btn-warning",u.unlockCreateUserBtn.usable=!1)},u.openUserLoginBtn=function(){u.validUserEmail.valid&&u.validUserPassword.valid?(u.unclockUserLoginBtn["class"]="btn btn-success",u.unclockUserLoginBtn.usable=!0):(u.unclockUserLoginBtn["class"]="btn btn-warning",u.unclockUserLoginBtn.usable=!1)},u.update=function(){u.newName=r.find("#newName")[0].value,u.newEmail=r.find("#newEmail")[0].value,u.userEmail=r.find("#userEmail")[0].value,u.checkNewName(),u.checkNewEmail(),u.checkUserEmail()},u.createNewUser=function(){if(n.info("Creating a new user account now!"),u.unlockCreateUserBtn.usable){var e=new Firebase(d);e.createUser({email:u.newEmail,password:u.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),c=i;var r=e.child("Users/"+i.uid),o=new Date;r.set({bio:{name:u.newName,email:u.newEmail},events:{pending:{updated:s(o)},hosting:{updated:s(o)},attending:{updated:s(o)},completed:{updated:s(o)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(a(u.newEmail)).set(c.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",c)}})}},u.loginRegisteredUser=function(){if(u.unclockUserLoginBtn.usable){var t=new Firebase(d);t.authWithPassword({email:u.userEmail,password:u.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),c=i,l("/userInformation",c),e.$apply())})}},u.alertMe=function(){alert("this is working! an alert!")},u.onResizeFunction=function(){var e=angular.element(".inputText");o.outerWidth>o.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in r&&r.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(r.body)},!1),angular.element(o).bind("resize",function(){u.onResizeFunction()}),angular.element(r).ready(function(){o.outerWidth<600&&u.onResizeFunction()}),u.master={},u.update=function(e){u.master=angular.copy(e)},u.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),u.user=angular.copy(u.master)},u.reset()}function MainController(e,n,t){var i=this,r="https://meetupplanner.firebaseio.com/",o=new Firebase(r);i.logout=function(){alert("logging you out!"),o.unauth(),n.path("/")},"addEventListener"in t&&t.addEventListener("DOMContentLoaded",function(){e.info("adding FastClick"),FastClick.attach(t.body)},!1)}function NewUserSignUpController(e,n,t,r,o,a){function s(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var u=t;l.checkNewName=function(){var e=[],n=u.required(l.inputs.newName),t=u.minNameLength(l.inputs.newName);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.name=e.join(", "):l.errors.name="",s()},l.checkNewEmail=function(){var e=[],n=u.required(l.inputs.newEmail),t=u.email(l.inputs.newEmail);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.email=e.join(", "):l.errors.email="",s()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],n=u.required(l.inputs.newPassword),t=[u.minPassLength(l.inputs.newPassword),u.maxPassLength(l.inputs.newPassword),u.atLeastOneLowercase(l.inputs.newPassword),u.atLeastOneUppercase(l.inputs.newPassword),u.atLeastOneNumber(l.inputs.newPassword),u.atLeastOneSymbol(l.inputs.newPassword),u.illegalCharacter(l.inputs.newPassword)];angular.isDefined(n)&&e.push(n),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var r=!1;for(i=0;i<7;i++)t[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},r=!0);l.errors.password=r,s()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=o;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var t=r,i=a;i.loadPrimaries(l.inputs.newEmail,l.inputs.newName),t.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(e){t.addNewUserToDatabase(e.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){n.info(i),t.addNewUserToRegUsersList(e.uid,l.inputs.newEmail).then(function(e){n.info(e)})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)}),e.redirectTo("/userInformation")}}}function RegUserLoginController(e,n,t,i,r){function o(){angular.isDefined(a.inputs.email)&&""!==a.inputs.email&&angular.isDefined(a.inputs.password)&&""!==a.inputs.password?(a.inputs.requiredFieldsDefined=!0,a.unclockUserLoginBtn["class"]="btn btn-success",a.unclockUserLoginBtn.message="Login",a.unclockUserLoginBtn.usable=!0):(a.inputs.requiredFieldsDefined=!1,a.unclockUserLoginBtn["class"]="btn btn-warning",a.unclockUserLoginBtn.message="Need Email & Pass",a.unclockUserLoginBtn.usable=!1)}var a=this;a.inputs={email:"",password:"",requiredFieldsDefined:!1},a.errors={message:"",passesAllTests:!0},a.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning",message:"Need Email & Pass"},a.update=function(){a.inputs.email=n.find("#userEmail")[0].value,a.inputs.password=n.find("#userPassword")[0].value,o()},a.loginRegisteredUser=function(){var n=i,o=t,s=r;s.loadPrimaries(a.inputs.email),o.LoginRegisteredUser(a.inputs.email,a.inputs.password).then(function(n){a.errors.passesAllTests=!0,o.getUserBio(n.uid).then(function(t){s.updateBio(t),o.getUserEvents(n.uid).then(function(e){s.updateAllUserEvents(e)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)})})["catch"](function(e){a.errors.message=e,a.errors.passesAllTests=!1}),n.redirectTo("/userInformation","2389473")}}function topMenuController(e,n,t,i,r){function o(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),s.loggedIn=!0):(n.info("User is logged out"),s.loggedIn=!1)}function a(e,i){var r=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+r),t.path(r)}var s=this,l="https://meetupplanner.firebaseio.com/",u=new Firebase(l);s.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(r).bind("resize",function(){s.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){r.outerWidth<600&&(s.onResizeFunction(),e.$apply())}),s.logout=function(){n.info("logging out!"),s.loggedIn=!1,u.unauth(),a("/",{uid:"",token:""})},s.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:s.navbarUserEmail,password:s.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),a("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},s.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",r.outerWidth-26+"px")},u.onAuth(o)}function UserEventsController(e,n,t,i,r){function o(e){return Date.parse(e)}function a(e,n){return 10*e+n}function s(e,r,o){var a=e+"/"+r+"/"+o+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+a),t.path(a)}var l=this,u="https://meetupplanner.firebaseio.com/",d=new Firebase(u),c=d.child("Users").child(i.uid).child("events"),f=d.child("Users").child(i.uid).child("bio");l.events=r(c),l.showDecline=!1,f.child("name").on("value",function(t){l.currentUserName=t.val(),n.info("got the user name"),e.$apply()},function(e){n.info("The read failed: "+e.code)}),l.eventsAreBeingHosted=function(){var e=!1;for(element in l.events.hosting)"updated"!=element&&(e=!0);return e},l.eventInvitationsPending=function(){var e=!1;for(element in l.events.pending)"updated"!=element&&(e=!0);return e},l.attendingEvents=function(e){var n=!1;for(element in l.events.attending)"updated"!=element&&(n=!0);return n},l.percentRSVPed=function(e){return e?l.totalAttending(e)/l.totalInvited(e)*100:0},l.totalAttending=function(e){if(e){var n=0;return angular.forEach(e,function(e,t){1==e.attending&&n++}),n}return 0},l.totalInvited=function(e){if(e){var n=0;return angular.forEach(e,function(e,t){n++}),n}return 0},l.acceptEventInvitation=function(e){},l.redirectToHostedEvent=function(e){n.info("you're accessing event "+e),s("/event",e,i.uid)},l.redirectTo3rdPartyEvent=function(e,t){n.info(e),"pending"==t?(n.info("accessing from a pending invitation"),n.info(e),s("/event",e.id,e.host)):"attending"==t&&(n.info("accessing from an rsvped invitation"),s("/event",e.id,e.host))},l.createNewEvent=function(){n.info("you're creating a new event!");var e=new Date;l.events.hosting?noOfEventsAlready=Object.keys(l.events.hosting).length:noOfEventsAlready=0;var t=a(o(e),noOfEventsAlready);l.events.hosting[t]={id:t,eventTimes:{start:o(e),end:o(e)},host:{id:i.uid,name:l.currentUserName}},(""==l.events.hosting.updated||l.events.hosting.updated)&&(n.info("deleting the updated field"),delete l.events.hosting.updated),s("/event",t,i.uid)},n.info("into the user Events controller"),n.info(l.events)}function UserInformationController(e,n,t,i){function r(e){return new Date(parseInt(e))}function o(e){return Date.parse(e)}function a(){e.info("initializing the user information page"),l.loadBio().then(function(e){s.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(s.tempBirthday=r(e.dob))})}var s=this,l=t;s.user={},s.tempBirthday,s.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},s.checkValues=function(){!angular.isUndefined(s.user.company)&&""!==s.user.company||!angular.isUndefined(s.user.title)&&""!==s.user.title||!angular.isUndefined(s.user.dob)&&""!==s.user.dob?(s.view.dataToSave=!0,s.view.proceedBtn="btn btn-success",s.view.btnMssg="Save & Continue"):(s.view.dataToSave=!1,s.view.proceedBtn="btn btn-primary",s.view.btnMssg="Move On...")},s.updateDOB=function(){s.user.dob=o(s.tempBirthday)},s.saveAndMoveOn=function(){var e=i;s.updateDOB(),s.view.isData&&l.updateBio(s.user),e.redirectTo("/userEvents",s.user.uid)},a()}function authService(e,n,t){function i(){return e.info("logging from the isLoggedIn Method"),!0}var r="https://meetupplanner.firebaseio.com/",o=(new Firebase(r),{isLoggedIn:i});return o}function backendServices(e,n,t){function i(e){return btoa(e)}function r(e){return atob(e)}function o(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function s(e,i){new Firebase(v);return n(function(e,n){t.setTimeout(function(){e({uid:1234567})},2e3)})}function l(e,i,r){var o=new Firebase(v);o.child("Users/"+e),new Date;return n(function(e,n){t.setTimeout(function(){e("Data saved successfully.")},2e3)})}function u(e,r){var o=new Firebase(v);o.child("Uids").child(i(r));return n(function(e,n){t.setTimeout(function(){e("uid created sucessfully.")},2e3)})}function d(e,i){new Firebase(v);return n(function(e,n){t.setTimeout(function(){e({uid:"2098sj-djiso92-sjir"})},2e3)})}function c(e){var i=new Firebase(v);i.child("Users/"+e.uid);return n(function(e,n){t.setTimeout(function(){e("all user data uploaded successfully")},2e3)})}function f(){}function m(e){var i=new Firebase(v);i.child("Users").child(e).child("bio");return n(function(e,n){t.setTimeout(function(){e({uid:"soaiu0-9283m-msoSA-2m3-srew",name:"Ian McAllister",email:"iemcallister@gmail.com",company:"",title:""})},2e3)})}function g(e){var i=new Firebase(v);i.child("Users").child(e).child("bio");return n(function(e,n){t.setTimeout(function(){e({hosting:{id:"9837423"},pending:{id:"3209742"},attending:{id:"40982"},completed:{id:"32957"}})},2e3)})}var v="https://meetupplanner.firebaseio.com/",p={utf8_to_b64:i,b64_to_utf8:r,unixTimeToDateTime:o,dateTimeToUnixTime:a,createNewUser:s,LoginRegisteredUser:d,addNewUserToDatabase:l,addNewUserToRegUsersList:u,uploadUserData:c,downloadUserData:f,getUserBio:m,getUserEvents:g};return p}function trafficValet(e,n){function t(t,i,r){angular.isDefined(i)?(t=t+"/"+i,angular.isDefined(r)&&(t=t+"/"+r,e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)):(e.info("redirecting now to "+t),n.path(t))}var i={redirectTo:t};return i}function userData(e,n,t){function i(){return $.uid}function r(){return $.name}function o(){return $.email}function a(){return $.company}function s(){return $.title}function l(){return $.dob}function u(e){return $[e]}function d(e){$.uid=uid}function c(e){$.name=e}function f(e){$.email=e}function m(e){$.company=e}function g(e){$.title=e}function v(e){$.dob=e}function p(e,n){$[e][n.id]=n}function h(e){$.hosting=e.hosting,$.pending=e.pending,$.attending=e.attending,$.completed=e.completed}function w(e){c(e.name),f(e.email),m(e.company),g(e.title),v(e.dob),E()}function U(e,n){$[e][n.id].remove()}function b(e,n){angular.isDefined(e)&&f(e),angular.isDefined(n)&&f(n)}function E(){var e=t;e.uploadUserData($)}function y(){var e=t;e.downloadUserData().then(function(e){$=e})}function D(){return""!==$.uid&&""!==$.name&&""!==$.email}function T(){var e=t;return n(function(n,t){D()?n({name:$.name,email:$.email,company:$.company,title:$.title,dob:$.dob}):e.getUserBio().then(function(e){n(e)})})}var $={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},hosting:{},pending:{},attending:{},completed:{}},L={getUID:i,getName:r,getEmail:o,getCompany:a,getTitle:s,getDOB:l,getUserEvents:u,setUID:d,setName:c,setEmail:f,setCompany:m,setTitle:g,setDOB:v,updateUserEvents:p,updateAllUserEvents:h,updateBio:w,removeUserEvents:U,loadPrimaries:b,writeAllToDatabase:E,readAllFromDatabase:y,isABio:D,loadBio:T};return L}function validation(e){function n(e){return angular.isUndefined(e)?"This is a required field":void 0}function t(e){return angular.isDefined(e)&&e.length<f?"Name should be at least "+f+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<m)}function r(e){return angular.isDefined(e)&&!(e.length>g)}function o(e){if(angular.isDefined(e)){var n=new RegExp("[!@#$%^&*]");return!!n.test(e)}return!1}function a(e){if(angular.isDefined(e)){var n=new RegExp("[0-9]","");return!!n.test(e)}return!1}function s(e){if(angular.isDefined(e)){var n=new RegExp("[a-z]","");return!!n.test(e)}return!1}function l(e){if(angular.isDefined(e)){var n=new RegExp("[A-Z]","");return!!n.test(e)}return!1}function u(e){if(angular.isDefined(e)){var n=new RegExp("[^A-z0-9!@#$%^&*]","");return!n.test(e)}return!1}function d(e){var n=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return n.test(e)?void 0:"Not a valid e-mail address"}function c(e){}var f=3,m=16,g=100,v={required:n,minNameLength:t,minPassLength:i,maxPassLength:r,atLeastOneSymbol:o,atLeastOneNumber:a,atLeastOneLowercase:s,atLeastOneUppercase:l,illegalCharacter:u,email:d,dateOfBirth:c};return v}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?/:token?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?/:token?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:token?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function toolBar(){function e(e,n,t,i){}function n(e){e.info("directive loading")}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log"],t}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","$q","$location"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuRXZlbnQuY29udHJvbGxlci5qcyIsIkxhbmRpbmdQYWdlLmNvbnRyb2xsZXIuanMiLCJNYWluLmNvbnRyb2xsZXIuanMiLCJOZXdVc2VyU2lnblVwLmNvbnRyb2xsZXIuanMiLCJSZWdVc2VyTG9naW4uY29udHJvbGxlci5qcyIsIlRvcE1lbnUuY29udHJvbGxlci5qcyIsIlVzZXJFdmVudHMuY29udHJvbGxlci5qcyIsIlVzZXJJbmZvcm1hdGlvbi5jb250cm9sbGVyLmpzIiwiQXV0aFNlcnZpY2UuZmFjdG9yeS5qcyIsIkJhY2tlbmRTZXJ2aWNlcy5mYWN0b3J5LmpzIiwiVHJhZmZpY1ZhbGV0LmZhY3RvcnkuanMiLCJVc2VyRGF0YS5mYWN0b3J5LmpzIiwiVmFsaWRhdGlvbi5mYWN0b3J5LmpzIiwicm91dGUtY29uZmlnLmpzIiwiYXBwLmpzIiwiVG9vbEJhci5kaXJlY3RpdmUuanMiLCJhcHAubW9kdWxlLmpzIl0sIm5hbWVzIjpbIkFuRXZlbnRDb250cm9sbGVyIiwiJHNjb3BlIiwiJGxvZyIsIiRsb2NhdGlvbiIsIiRyb3V0ZVBhcmFtcyIsIiRmaXJlYmFzZU9iamVjdCIsImluaXQiLCJ2bSIsInRlbXBEYXRlVGltZSIsInN0YXJ0IiwiZW5kIiwibmV3R3Vlc3QiLCJuYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwidmFsaWQiLCJzdHlsZSIsImNvbG9yIiwic2hvd0lmSG9zdCIsImhpZGVJZkF0dGVuZGluZyIsIm1hbmFnZVNlY3Rpb25zIiwxLCJhY3RpdmUiLCJjb21wbGV0ZSIsImJhY2tncm91bmQtY29sb3IiLDIsMywiY2hlY2tGb3JIb3N0IiwiY2hlY2tJZkd1ZXN0SXNBdHRlbmRpbmciLCJvcGVuQWxsU2VjdGlvbnMiLCJ1dGY4X3RvX2I2NCIsInN0ciIsImJ0b2EiLCJiNjRfdG9fdXRmOCIsImF0b2IiLCJkYXRlVGltZVRvVW5peFRpbWUiLCJkYXRlVGltZSIsIkRhdGUiLCJwYXJzZSIsImNsZWFuTmV3R3Vlc3RWYXJpYWJsZSIsImludml0ZUFSZWdpc3RlcmVkVXNlciIsInVpZCIsImluZm8iLCJyZWYiLCJjaGlsZCIsImV2ZW50SWQiLCJzZXQiLCJpZCIsImV2ZW50VGltZXMiLCJldmVudCIsImhvc3QiLCJlcnJvciIsIm9uY2UiLCJzbmFwc2hvdCIsImNoZWNrRm9yUGxhY2Vob2xkZXIiLCJ2YWwiLCJ1cGRhdGVkIiwicmVtb3ZlIiwiZXJyb3JPYmplY3QiLCJjb2RlIiwiaW52aXRlQW5VbnJlZ2lzdGVyZWRVc2VyIiwidXNlcktleSIsImF1dGhEYXRhIiwiZ2V0QXV0aCIsImhvc3RJZCIsInVzZXJFdmVudHMiLCJvbiIsImFsbEd1ZXN0cyIsImF0dGVuZGluZyIsInRoaXMiLCJmYlVSTCIsIkZpcmViYXNlIiwicmVnaXN0ZXJlZFVzZXJzIiwicmVxdWlyZWRJbnB1dHMiLCJzZXRUZW1wVGltZSIsImVuZHBvaW50IiwidW5peFRpbWVUb0RhdGVUaW1lIiwidW5peFRpbWUiLCJwYXJzZUludCIsInN1Ym1pdCIsImJhY2tUb1VzZXJFdmVudHMiLCJwYXRoIiwidG9rZW4iLCJldmVudFJlZGlyZWN0IiwiZXZlbnRJRCIsImZ1bGxQYXRoIiwiY2hhbmdlU2VjdGlvbiIsInRhcmdldFNlY3Rpb24iLCJpIiwic2F2ZUV2ZW50VGltZSIsInRhcmdldCIsImd1ZXN0c0FyZUludml0ZWQiLCJndWVzdExpc3QiLCJ2YWxpZGF0ZUd1ZXN0RW1haWwiLCJjb25zdHJhaW50IiwiUmVnRXhwIiwidGVzdCIsImlzU2VjdGlvbkNvbXBsZXRlIiwic2F2ZUFuZEFkdmFuY2UiLCIkc2F2ZSIsInRoZW4iLCJhZGRHdWVzdFRvSG9zdHNMaXN0Iiwic3RhdHVzIiwic2F2ZUV2ZW50IiwiZ3Vlc3RXaWxsQXR0ZW5kIiwicmVzcG9uc2UiLCJjdXJyZW50VXNlciIsInRvdGFsUGVuZGluZ0ludml0YXRpb25zIiwicmVtb3ZlQXR0ZW5kaW5nVXBkYXRlZCIsImludml0YXRpb25zIiwidGhpc0ludml0YXRpb24iLCJpbnZpdGF0aW9uIiwiYXR0ZW5kaW5nTGlzdCIsImN1cnJlbnREYXRlIiwidXBkYXRlIiwidXBkYXRlVXBkYXRlZFBhcmFtIiwiYWRkSW52aXRhdGlvblRvQXR0ZW5kaW5nIiwiTGFuZGluZ1BhZ2VDb250cm9sbGVyIiwiJGRvY3VtZW50IiwiJHdpbmRvdyIsInJlZGlyZWN0IiwidXNlckRhdGEiLCJjdXJyZW50VXNlckRhdGEiLCIkYXBwbHkiLCJzaG93UmVxdWlybm1lbnRzIiwidmFsaWROZXdOYW1lIiwidmFsaWROZXdFbWFpbCIsInNlY3VyZVBhc3N3b3JkIiwic2VjdXJlIiwidW5sb2NrQ3JlYXRlVXNlckJ0biIsInVzYWJsZSIsImNsYXNzIiwibWVzc2FnZSIsInZhbGlkVXNlckVtYWlsIiwidmFsaWRVc2VyUGFzc3dvcmQiLCJ1bmNsb2NrVXNlckxvZ2luQnRuIiwicGFzc3dvcmRSZXF1aXJubWVudHMiLDAsIm1ldCIsNCw1LDYsImRpc3BsYXlQYXNzUmVxcyIsIm5ld05hbWUiLCJuZXdFbWFpbCIsImNoZWNrTmV3TmFtZSIsImxlbmd0aCIsIm9wZW5DcmVhdGVVc2VyQnV0dG9uIiwiY2hlY2tOZXdFbWFpbCIsImNoZWNrVXNlckVtYWlsIiwidXNlckVtYWlsIiwib3BlblVzZXJMb2dpbkJ0biIsImNoZWNrTmV3UGFzc3dvcmRzIiwiY29uc3RyYWludHMiLCJuZXdQYXNzd29yZCIsImNoZWNrVXNlclBhc3N3b3JkcyIsInVzZXJQYXNzd29yZCIsImZpbmQiLCJ2YWx1ZSIsImNyZWF0ZU5ld1VzZXIiLCJjcmVhdGVVc2VyIiwicGFzc3dvcmQiLCJ1c2Vyc1JlZiIsImJpbyIsImV2ZW50cyIsInBlbmRpbmciLCJob3N0aW5nIiwiY29tcGxldGVkIiwibG9naW5SZWdpc3RlcmVkVXNlciIsImF1dGhXaXRoUGFzc3dvcmQiLCJhbGVydE1lIiwiYWxlcnQiLCJvblJlc2l6ZUZ1bmN0aW9uIiwiaW5wdXRUZXh0IiwiYW5ndWxhciIsImVsZW1lbnQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJjc3MiLCJhZGRFdmVudExpc3RlbmVyIiwiRmFzdENsaWNrIiwiYXR0YWNoIiwiYm9keSIsImJpbmQiLCJyZWFkeSIsIm1hc3RlciIsInVzZXIiLCJjb3B5IiwicmVzZXQiLCJmb3JtIiwiJHNldFByaXN0aW5lIiwiJHNldFVudG91Y2hlZCIsIk1haW5Db250cm9sbGVyIiwibG9nb3V0IiwidW5hdXRoIiwiTmV3VXNlclNpZ25VcENvbnRyb2xsZXIiLCJ2YWxpZGF0aW9uIiwiYmFja2VuZFNlcnZpY2VzIiwidHJhZmZpY1ZhbGV0IiwidmVyaWZ5UmVxdWlybm1lbnRzIiwiZXJyb3JzIiwicGFzc2VzQWxsVGVzdHMiLCJpc0RlZmluZWQiLCJpbnB1dHMiLCJyZXF1aXJlZEZpZWxkc0RlZmluZWQiLCJwYXNzUmVxcyIsInJlcSIsImZ1bGZpbGxlZCIsInNob3dSZXFzQm94Iiwic2lnbnVwVmFsaWRhdGlvbiIsImhhc05hbWUiLCJyZXF1aXJlZCIsImxvbmdFbm91Z2giLCJtaW5OYW1lTGVuZ3RoIiwicHVzaCIsImpvaW4iLCJoYXNFbWFpbCIsImlzQW5FbWFpbCIsImNoZWNrTmV3UGFzc3dvcmQiLCJoYXNQYXNzd29yZCIsInNwZWNpZmljUmVxcyIsIm1pblBhc3NMZW5ndGgiLCJtYXhQYXNzTGVuZ3RoIiwiYXRMZWFzdE9uZUxvd2VyY2FzZSIsImF0TGVhc3RPbmVVcHBlcmNhc2UiLCJhdExlYXN0T25lTnVtYmVyIiwiYXRMZWFzdE9uZVN5bWJvbCIsImlsbGVnYWxDaGFyYWN0ZXIiLCJhbnlFcnJvcnMiLCJleGl0UGFzc3dvcmQiLCJuZXdVc2VyU2hlcnBhIiwibmV3VXNlckRhdGEiLCJsb2FkUHJpbWFyaWVzIiwiYWRkTmV3VXNlclRvRGF0YWJhc2UiLCJhZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3QiLCJyZWRpcmVjdFRvIiwiUmVnVXNlckxvZ2luQ29udHJvbGxlciIsInJlZ2lzdGVyZWRVc2VyU2hlcnBhIiwiZGF0YWJhc2UiLCJyZWdpc3RlcmVkVXNlckRhdGEiLCJMb2dpblJlZ2lzdGVyZWRVc2VyIiwidXNlckNyZWRlbnRpYWxzIiwiZ2V0VXNlckJpbyIsInVzZXJCaW8iLCJ1cGRhdGVCaW8iLCJnZXRVc2VyRXZlbnRzIiwiYWxsRXZlbnRzRm9yVGhpc1VzZXIiLCJ1cGRhdGVBbGxVc2VyRXZlbnRzIiwidG9wTWVudUNvbnRyb2xsZXIiLCJhdXRoRGF0YUNhbGxiYWNrIiwicHJvdmlkZXIiLCJsb2dnZWRJbiIsIm5hdkJhckxvZ2luUmVnaXN0ZXJlZFVzZXIiLCJuYXZiYXJVc2VyRW1haWwiLCJuYXZiYXJVc2VyUGFzcyIsImNsaWNrIiwibmF2YmFySW5wdXRzIiwib25BdXRoIiwiVXNlckV2ZW50c0NvbnRyb2xsZXIiLCJnZW5lcmF0ZUV2ZW50SUQiLCJkYXRlIiwibm9PZkV2ZW50c0FscmVhZHkiLCJjdXJyZW50VXNlckJpbyIsInNob3dEZWNsaW5lIiwiY3VycmVudFVzZXJOYW1lIiwiZXZlbnRzQXJlQmVpbmdIb3N0ZWQiLCJldmVudEZvdW5kIiwiZXZlbnRJbnZpdGF0aW9uc1BlbmRpbmciLCJhdHRlbmRpbmdFdmVudHMiLCJwZXJjZW50UlNWUGVkIiwidG90YWxBdHRlbmRpbmciLCJ0b3RhbEludml0ZWQiLCJmb3JFYWNoIiwiZ3Vlc3QiLCJpbnZpdGVkIiwiYWNjZXB0RXZlbnRJbnZpdGF0aW9uIiwicmVkaXJlY3RUb0hvc3RlZEV2ZW50IiwicmVkaXJlY3RUbzNyZFBhcnR5RXZlbnQiLCJpbnZpdGVTdGF0dXMiLCJjcmVhdGVOZXdFdmVudCIsIk9iamVjdCIsImtleXMiLCJVc2VySW5mb3JtYXRpb25Db250cm9sbGVyIiwiaW5pdGlhbGl6ZSIsImxvYWRCaW8iLCJkb2IiLCJ0ZW1wQmlydGhkYXkiLCJ2aWV3IiwiZGF0YVRvU2F2ZSIsImlzRGF0YSIsImJ0bk1zc2ciLCJwcm9jZWVkQnRuIiwiY2hlY2tWYWx1ZXMiLCJpc1VuZGVmaW5lZCIsImNvbXBhbnkiLCJ0aXRsZSIsInVwZGF0ZURPQiIsInNhdmVBbmRNb3ZlT24iLCJ1c2VySW5mb1NoZXJwYSIsImF1dGhTZXJ2aWNlIiwiJHEiLCJpc0xvZ2dlZEluIiwiYWxsQXV0aFNlcnZpY2VzIiwicmVzb2x2ZSIsInJlamVjdCIsInNldFRpbWVvdXQiLCJhcHAiLCJ1cGxvYWRVc2VyRGF0YSIsImFsbFVzZXJEYXRhIiwiZG93bmxvYWRVc2VyRGF0YSIsImFsbEJhY2tlbmRTZXJ2aWNlcyIsInBhcmFtMSIsInBhcmFtMiIsImFsbFRyYWZmaWNDb250cm9scyIsImdldFVJRCIsImdldE5hbWUiLCJnZXRFbWFpbCIsImdldENvbXBhbnkiLCJnZXRUaXRsZSIsImdldERPQiIsInR5cGUiLCJzZXRVSUQiLCJzZXROYW1lIiwic2V0RW1haWwiLCJzZXRDb21wYW55Iiwic2V0VGl0bGUiLCJzZXRET0IiLCJ1cGRhdGVVc2VyRXZlbnRzIiwiYWxsVXNlckV2ZW50cyIsIndyaXRlQWxsVG9EYXRhYmFzZSIsInJlbW92ZVVzZXJFdmVudHMiLCJkYiIsInJlYWRBbGxGcm9tRGF0YWJhc2UiLCJpc0FCaW8iLCJtaW5pbXVtTmFtZUxlbmd0aCIsIm1pbmltdW1QYXNzTGVuZ3RoIiwibWF4aW11bVBhc3NMZW5ndGgiLCJkYXRlT2ZCaXJ0aCIsImFsbFZhbGlkYXRpb25zIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwidXNlckF1dGhlbnRpY2F0aW9uU2VydmljZSIsIm90aGVyd2lzZSIsInRvb2xCYXIiLCJsaW5rRnVuYyIsInNjb3BlIiwiZWwiLCJhdHRyIiwiY3RybCIsIlRvb2xCYXJDb250cm9sbGVyIiwiJGluamVjdCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwicmVwbGFjZSIsImxpbmsiLCJiaW5kVG9Db250cm9sbGVyIiwibW9kdWxlIiwiZmFjdG9yeSJdLCJtYXBwaW5ncyI6IkFBT0EsUUFBQUEsbUJBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBY0EsUUFBQUMsS0FFQUMsRUFBQUMsY0FBQUMsTUFBQSxHQUFBQyxJQUFBLElBQ0FILEVBQUFJLFVBQUFDLEtBQUEsR0FBQUMsT0FBQUMsUUFBQSxHQUFB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QkFDQUMsUUFBQSxXQUFBaFAsVUFFQUEsU0FBQXlPLFNBQUEsT0FBQSxLQUFBLG1CQ0pBcEwsUUFDQTBMLE9BQUEsa0JBQ0FDLFFBQUEsYUFBQXJLLFlBRUFBLFdBQUE4SixTQUFBLFFDSkFwTCxRQUNBMEwsT0FBQSxrQkFDQXJCLE9BQUFBLFFFS0FySyxRQUNBMEwsT0FBQSxrQkFDQUwsVUFBQSxVQUFBUiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdBbkV2ZW50Q29udHJvbGxlcicsIEFuRXZlbnRDb250cm9sbGVyKTtcblxuQW5FdmVudENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICckZmlyZWJhc2VPYmplY3QnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBBbkV2ZW50Q29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCAkZmlyZWJhc2VPYmplY3QpIHtcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0dmFyIHVzZXJFdmVudHMgPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLmhvc3RJZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdob3N0aW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLmV2ZW50SWQpXG5cblx0Ly9iaW5kaW5nIHRvIHRoZSBldmVudFxuXHR2bS5ldmVudCA9ICRmaXJlYmFzZU9iamVjdCh1c2VyRXZlbnRzKVxuXHR2YXIgcmVnaXN0ZXJlZFVzZXJzID0gJGZpcmViYXNlT2JqZWN0KHJlZi5jaGlsZCgnVWlkcycpKTtcblxuXHQvL3JlcXVpcmVkIGZpZWxkc1xuXHR2bS5yZXF1aXJlZElucHV0cyA9IFsnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnXTtcblxuXHQvL0xvY2FsIE1ldGhvZHNcblx0ZnVuY3Rpb24gaW5pdCgpIHtcblx0XHQvL2RlY2xhcmUgYW5kIGluaXRpYWxpemUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dm0udGVtcERhdGVUaW1lID0ge3N0YXJ0OiAnJywgZW5kOiAnJ307XG5cdFx0dm0ubmV3R3Vlc3QgPSB7bmFtZTogJycsIGVtYWlsOnthZGRyZXNzOicnLCB2YWxpZDpmYWxzZSwgc3R5bGU6e2NvbG9yOicnfX19O1xuXHRcdHZtLnNob3dJZkhvc3QgPSBmYWxzZTtcblx0XHR2bS5oaWRlSWZBdHRlbmRpbmcgPSB0cnVlO1xuXHRcdC8vc2VjdGlvbnNcblx0XHR2bS5tYW5hZ2VTZWN0aW9ucyA9IHtcblx0XHRcdDE6IHthY3RpdmU6IHRydWUsIGNvbXBsZXRlOiBmYWxzZSwgc3R5bGU6e2NvbG9yOidibGFjaycsICdiYWNrZ3JvdW5kLWNvbG9yJzoneWVsbG93J319LFxuXHRcdFx0Mjoge2FjdGl2ZTogZmFsc2UsIGNvbXBsZXRlOiBmYWxzZSwgc3R5bGU6e2NvbG9yOid3aGl0ZScsICdiYWNrZ3JvdW5kLWNvbG9yJzonZ3JheSd9fSxcblx0XHRcdDM6IHthY3RpdmU6IGZhbHNlLCBjb21wbGV0ZTogZmFsc2UsIHN0eWxlOntjb2xvcjond2hpdGUnLCAnYmFja2dyb3VuZC1jb2xvcic6J2dyYXknfX1cblx0XHR9O1xuXG5cdFx0Ly9jaGVjayB1c2VyIHRvIGRldGVybWluZSBzdGF0ZVxuXHRcdGNoZWNrRm9ySG9zdCgpO1xuXHRcdGNoZWNrSWZHdWVzdElzQXR0ZW5kaW5nKCk7XG5cblx0XHQvL29wZW4gdXAgc2VjdGlvbnNcblx0XHRpZighdm0uc2hvd0lmSG9zdCkgb3BlbkFsbFNlY3Rpb25zKCk7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4X3RvX2I2NChzdHIpIHtcblx0XHRyZXR1cm4gYnRvYShzdHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYjY0X3RvX3V0Zjgoc3RyKSB7XG4gICAgXHRyZXR1cm4gYXRvYihzdHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2xlYW5OZXdHdWVzdFZhcmlhYmxlKCkge1xuXHRcdHZtLm5ld0d1ZXN0ID0ge25hbWU6ICcnLCBlbWFpbDp7YWRkcmVzczonJywgdmFsaWQ6ZmFsc2UsIHN0eWxlOntjb2xvcjonJ319fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGludml0ZUFSZWdpc3RlcmVkVXNlcih1aWQpIHtcblx0XHQkbG9nLmluZm8oJ2FkZGluZyB0aGVtIHRvIHRoZSByZWdpc3RlcmVkIHVzZXJzIGxpc3QgJyArIHVpZCk7XG5cdFx0Ly9zZXQgdGhlIG5ldyBldmVudFxuXHRcdHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgncGVuZGluZycpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLmNoaWxkKCRyb3V0ZVBhcmFtcy5ldmVudElkKS5zZXQoe1xuXHRcdFx0aWQ6ICRyb3V0ZVBhcmFtcy5ldmVudElkLFxuXHRcdFx0ZXZlbnRUaW1lczoge1xuXHRcdFx0XHRzdGFydDogdm0uZXZlbnQuZXZlbnRUaW1lcy5zdGFydCxcblx0XHRcdFx0ZW5kOiB2bS5ldmVudC5ldmVudFRpbWVzLmVuZFxuXHRcdFx0fSxcblx0XHRcdG5hbWU6IHZtLmV2ZW50Lm5hbWUsXG5cdFx0XHRob3N0OiAkcm91dGVQYXJhbXMudWlkXG5cdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdGlmKGVycm9yKSAkbG9nLmluZm8oJ3RoZXJlIHdhcyBhbiBlcnJvcicgKyBlcnJvcik7XG5cdFx0fSk7XG5cdFx0Ly9pZiB0aGVyZSB3YXMgYW4gdXBkYXRlZCBwbGFjZSBob2xkZXIsIHJlbW92ZSBpdFxuXHRcdHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgncGVuZGluZycpLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdHZhciBjaGVja0ZvclBsYWNlaG9sZGVyID0gc25hcHNob3QudmFsKClcblx0XHRcdCRsb2cuaW5mbyhzbmFwc2hvdC52YWwoKSk7XG5cblx0XHRcdGlmKGNoZWNrRm9yUGxhY2Vob2xkZXIudXBkYXRlZCkge1xuXHRcdFx0XHQkbG9nLmluZm8oJ2RlbGV0aW5nIHVwZGF0ZWQnKTtcblx0XHRcdFx0cmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdwZW5kaW5nJykuY2hpbGQoJ3VwZGF0ZWQnKS5yZW1vdmUoZnVuY3Rpb24oZXJyb3JPYmplY3QpIHtcblx0XHRcdFx0XHRpZihlcnJvck9iamVjdCkgJGxvZy5pbmZvKFwiRGVsZXRpbmcgZmFpbGVkOiBcIiArIGVycm9yT2JqZWN0LmNvZGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSAkbG9nLmluZm8oJ25vdGhpbmcgdG8gZG8nKTtcblxuXHRcdH0sIGZ1bmN0aW9uKGVycm9yT2JqZWN0KSB7XG5cdFx0XHRpZihlcnJvck9iamVjdCkgJGxvZy5pbmZvKFwiVGhlIHJlYWQgZmFpbGVkOiBcIiArIGVycm9yT2JqZWN0LmNvZGUpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW52aXRlQW5VbnJlZ2lzdGVyZWRVc2VyKHVzZXJLZXkpIHtcblx0XHQkbG9nLmluZm8oJ2FkZGluZyB0aGVtIHRvIHRoZSBVTlJFR0lTVEVSRUQgdXNlcnMgbGlzdCAnICsgdXNlcktleSk7XG5cdFx0cmVmLmNoaWxkKCdVbnJlZ2lzdGVyZWRVc2VycycpLmNoaWxkKHVzZXJLZXkpLmNoaWxkKCdwZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJHJvdXRlUGFyYW1zLmV2ZW50SWQpLnNldCh7XG5cdFx0XHRpZDogJHJvdXRlUGFyYW1zLmV2ZW50SWQsXG5cdFx0XHRob3N0OiAkcm91dGVQYXJhbXMudWlkLFxuXHRcdFx0ZXZlbnRUaW1lczoge1xuXHRcdFx0XHRzdGFydDogdm0uZXZlbnQuZXZlbnRUaW1lcy5zdGFydCxcblx0XHRcdFx0ZW5kOiB2bS5ldmVudC5ldmVudFRpbWVzLmVuZFxuXHRcdFx0fSxcblx0XHRcdG5hbWU6IHZtLmV2ZW50Lm5hbWVcblx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbygndGhlcmUgd2FzIGFuIGVycm9yJyArIGVycm9yKTtcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrRm9ySG9zdCgpIHtcblx0XHQvL2NoZWNrIGV2ZW50IGhvc3Rcblx0XHR2YXIgYXV0aERhdGEgPSByZWYuZ2V0QXV0aCgpO1xuXG5cdFx0aWYoYXV0aERhdGEudWlkID09ICRyb3V0ZVBhcmFtcy5ob3N0SWQpIHtcblx0XHRcdCRsb2cuaW5mbygnaXMgdGhlIGhvc3QnKTtcblx0XHRcdHZtLnNob3dJZkhvc3QgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkbG9nLmluZm8oJ25vdCB0aGUgaG9zdCcpO1xuXHRcdFx0dm0uc2hvd0lmSG9zdCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrSWZHdWVzdElzQXR0ZW5kaW5nKCkge1xuXHRcdGlmKCF2bS5zaG93SWZIb3N0KSB7XG5cdFx0XHQkbG9nLmluZm8oJ2NoZWNrIGd1ZXN0IGF0dGVuZGFuY2UnKTtcblx0XHRcdHVzZXJFdmVudHMuY2hpbGQoJ2d1ZXN0TGlzdCcpLm9uKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdHZhciBhbGxHdWVzdHMgPSBzbmFwc2hvdC52YWwoKTtcblx0XHRcdFx0dm0uaGlkZUlmQXR0ZW5kaW5nID0gIWFsbEd1ZXN0c1skcm91dGVQYXJhbXMudWlkXS5hdHRlbmRpbmc7XG5cdFx0XHRcdFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gb3BlbkFsbFNlY3Rpb25zKCkge1xuXHRcdHZtLm1hbmFnZVNlY3Rpb25zWzFdLmFjdGl2ZSA9IHRydWU7XG5cdFx0dm0ubWFuYWdlU2VjdGlvbnNbMl0uYWN0aXZlID0gdHJ1ZTtcblx0XHR2bS5tYW5hZ2VTZWN0aW9uc1szXS5hY3RpdmUgPSB0cnVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2F2ZUV2ZW50KCkge1xuXHRcdHZtLmV2ZW50LiRzYXZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdCRsb2cuaW5mbygnZXZlbnQgc2F2ZWQnKTtcblx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0JGxvZy5pbmZvKCdlcnJvciEgJyArIGVycm9yKTtcblx0XHR9KTtcblx0fVxuXG5cdC8vdmlldyBNZXRob2Rcblx0dm0uc2V0VGVtcFRpbWUgPSBmdW5jdGlvbihlbmRwb2ludCkge1xuXHRcdGlmKGVuZHBvaW50ID09ICdzdGFydCcpIHZtLnRlbXBEYXRlVGltZS5zdGFydCA9IG5ldyBEYXRlKCk7XG5cdFx0aWYoZW5kcG9pbnQgPT0gJ2VuZCcpIHZtLnRlbXBEYXRlVGltZS5lbmQgPSBuZXcgRGF0ZSgpO1xuXHR9XG5cblx0dm0udW5peFRpbWVUb0RhdGVUaW1lID0gZnVuY3Rpb24gKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH07XG5cblx0dm0uZGF0ZVRpbWVUb1VuaXhUaW1lID0gZnVuY3Rpb24gKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9O1xuXG5cdHZtLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2cuaW5mbygnc3VibWl0dGluZyB0aGUgZm9ybSBub3chJyk7XG5cdH1cblxuXHR2bS5iYWNrVG9Vc2VyRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvY2F0aW9uLnBhdGgoJy91c2VyRXZlbnRzLycgKyAkcm91dGVQYXJhbXMudWlkICsgJy8nICsgJHJvdXRlUGFyYW1zLnRva2VuKTtcblx0fVxuXG5cdHZtLmV2ZW50UmVkaXJlY3QgPSBmdW5jdGlvbihwYXRoLCBldmVudElEKSB7XG5cdFx0dmFyIGZ1bGxQYXRoID0gcGF0aCArICcvJyArICRyb3V0ZVBhcmFtcy51aWQgKyAnLycgKyAkcm91dGVQYXJhbXMudG9rZW47XG5cdFx0Ly9yZWRpcmVjdFxuXHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86ICcgKyBmdWxsUGF0aCk7XG5cdFx0JGxvY2F0aW9uLnBhdGgoZnVsbFBhdGgpO1xuXHR9XG5cblx0dm0uY2hhbmdlU2VjdGlvbiA9IGZ1bmN0aW9uKHRhcmdldFNlY3Rpb24pIHtcblx0XHQkbG9nLmluZm8oJ2FyZSB3ZSBoZXJlJyk7XG5cdFx0Zm9yKGkgPSAxOyBpIDw9MzsgaSsrKSB7XG5cdFx0XHRpZihpPT10YXJnZXRTZWN0aW9uKSB7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLnN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSd5ZWxsb3cnO1xuXHRcdFx0XHR2bS5tYW5hZ2VTZWN0aW9uc1tpXS5zdHlsZVsnY29sb3InXSA9J2JsYWNrJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR2bS5tYW5hZ2VTZWN0aW9uc1tpXS5zdHlsZVsnYmFja2dyb3VuZC1jb2xvciddID0nZ3JheSc7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLnN0eWxlWydjb2xvciddID0nd2hpdGUnO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZtLnNhdmVFdmVudFRpbWUgPSBmdW5jdGlvbihkYXRlVGltZSwgdGFyZ2V0KSB7XG5cdFx0Ly9pZiB0aGlzIGV2ZW50IGRpZG4ndCBoYXZlIGEgc3RhcnQgdGltZSwgY3JlYXRlIGl0XG5cdFx0aWYoIXZtLmV2ZW50LmV2ZW50VGltZXMpIHsgXG5cdFx0XHR2bS5ldmVudC5ldmVudFRpbWVzID0ge3N0YXJ0OiAnJywgZW5kOiAnJ307XG5cdFx0XHR2bS5ldmVudC5ldmVudFRpbWVzLnN0YXJ0ID0gdm0uZGF0ZVRpbWVUb1VuaXhUaW1lKHZtLnRlbXBEYXRlVGltZS5zdGFydCk7IFxuXHRcdFx0dm0uZXZlbnQuZXZlbnRUaW1lcy5lbmQgPSB2bS5kYXRlVGltZVRvVW5peFRpbWUodm0udGVtcERhdGVUaW1lLmVuZCk7XG5cdFx0fVxuXG5cdFx0aWYoKHZtLnRlbXBEYXRlVGltZS5lbmQgPCB2bS50ZW1wRGF0ZVRpbWUuc3RhcnQpICYmIHRhcmdldCA9PSAnc3RhcnQnKSB2bS50ZW1wRGF0ZVRpbWUuZW5kID0gdm0udGVtcERhdGVUaW1lLnN0YXJ0O1xuXHRcdGlmKHRhcmdldCA9PSAnc3RhcnQnKSB2bS5ldmVudC5ldmVudFRpbWVzLnN0YXJ0ID0gdm0uZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKTtcblx0XHRpZih0YXJnZXQgPT0gJ2VuZCcpIHZtLmV2ZW50LmV2ZW50VGltZXMuZW5kID0gdm0uZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKTtcblx0fVxuXG5cdHZtLmd1ZXN0c0FyZUludml0ZWQgPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS5ldmVudC5ndWVzdExpc3QpIHJldHVybiB0cnVlO1xuXHRcdGVsc2UgcmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dm0udmFsaWRhdGVHdWVzdEVtYWlsID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9pZiB0aGVyZSBpcyBhbiBlbWFpbCBhZGRyZXNzXG5cdFx0aWYodm0ubmV3R3Vlc3QuZW1haWwuYWRkcmVzcykge1xuXHRcdFx0Ly9jaGVjayB2YWxpZGl0eVxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XCIsIFwiXCIpO1xuXG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3Qodm0ubmV3R3Vlc3QuZW1haWwuYWRkcmVzcykpIHtcblx0XHRcdFx0dm0ubmV3R3Vlc3QuZW1haWwudmFsaWQgPSB0cnVlO1xuXHRcdFx0XHR2bS5uZXdHdWVzdC5lbWFpbC5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLm5ld0d1ZXN0LmVtYWlsLnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdHZtLm5ld0d1ZXN0LmVtYWlsLnN0eWxlID0ge2NvbG9yOicnfTtcblx0XHRcdH1cdFx0XHRcblx0XHR9XG5cdH1cblxuXHR2bS5pc1NlY3Rpb25Db21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGZvcihpPTA7aTw4O2krKykge1xuXHRcdFx0JGxvZy5pbmZvKHZtLnJlcXVpcmVkSW5wdXRzW2ldKTtcblx0XHR9XG5cdH1cblxuXHR2bS5zYXZlQW5kQWR2YW5jZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZtLmV2ZW50LiRzYXZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdCRsb2cuaW5mbygnZXZlbnQgc2F2ZWQnKTtcblx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0JGxvZy5pbmZvKCdlcnJvciEgJyArIGVycm9yKTtcblx0XHR9KTtcblxuXHRcdC8vY2hlY2sgZm9yIGNvbXBsZXRlbmVzXG5cdFx0dm0uaXNTZWN0aW9uQ29tcGxldGUoKTtcblxuXHRcdGlmKHZtLm1hbmFnZVNlY3Rpb25zWzFdLmNvbXBsZXRlID09IHRydWUgJiYgdm0ubWFuYWdlU2VjdGlvbnNbMl0uY29tcGxldGUgPT0gdHJ1ZSAmJiB2bS5tYW5hZ2VTZWN0aW9uc1szXS5jb21wbGV0ZSA9PSB0cnVlKSB7XG5cdFx0XHR2bS5ldmVudFJlZGlyZWN0KCcvdXNlckV2ZW50cycsICRyb3V0ZVBhcmFtcy51aWQpO1xuXHRcdH0gZWxzZSBpZiAodm0ubWFuYWdlU2VjdGlvbnNbMV0uYWN0aXZlKSB2bS5jaGFuZ2VTZWN0aW9uKDIpO1xuXHRcdGVsc2UgaWYgKHZtLm1hbmFnZVNlY3Rpb25zWzJdLmFjdGl2ZSkgdm0uY2hhbmdlU2VjdGlvbigzKTtcblx0XHRlbHNlIGlmICh2bS5tYW5hZ2VTZWN0aW9uc1szXS5hY3RpdmUpIHZtLmNoYW5nZVNlY3Rpb24oMSk7XG5cdH1cblxuXHR2bS5hZGRHdWVzdFRvSG9zdHNMaXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9kZWNsYXJlIGFuZCBpbml0aWFsaXplIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciB1c2VyS2V5ID0gdXRmOF90b19iNjQodm0ubmV3R3Vlc3QuZW1haWwuYWRkcmVzcyk7XG5cblx0XHQvL2lmIGVtYWlsIGlzIHZhbGlkIGFuZCBuYW1lIGV4aXN0c1xuXHRcdGlmICh2bS5uZXdHdWVzdC5uYW1lICYmIHZtLm5ld0d1ZXN0LmVtYWlsLnZhbGlkKSB7XG5cdFx0XHQvL2lzIHRoZXJlIGEgZ3Vlc3QgbGlzdCBhbHJlYWR5PyBJZiBub3QgY3JlYXRlIG9uZVxuXHRcdFx0aWYoIXZtLmV2ZW50Lmd1ZXN0TGlzdCkge1xuXHRcdFx0XHR2bS5ldmVudC5ndWVzdExpc3QgPSB7fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vaWYgc28gaXMgdGhpcyBwZXJzb24gYWxyZWFkeSBvbiB0aGUgbGlzdD9cblx0XHRcdFx0dmFyIGkgPTA7XG5cdFx0XHRcdHdoaWxlKHZtLmV2ZW50Lmd1ZXN0TGlzdFtpXSkge1xuXHRcdFx0XHRcdGlmKHZtLmV2ZW50Lmd1ZXN0TGlzdFtpXS5lbWFpbCA9PSBiNjRfdG9fdXRmOCh1c2VyS2V5KSkge1xuXHRcdFx0XHRcdFx0JGxvZy5pbmZvKCdUaGlzIGd1ZXN0IGlzIGFscmVhZHkgb24gdGhlIGxpc3QnKTtcblx0XHRcdFx0XHRcdGNsZWFuTmV3R3Vlc3RWYXJpYWJsZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9pcyB0aGlzIGd1ZXN0IGEgcmVnaXN0ZXJlZCB1c2VyP1xuXHRcdFx0aWYocmVnaXN0ZXJlZFVzZXJzW3VzZXJLZXldKSB7XG5cdFx0XHRcdC8vaXMgdGhlIHJlZ2lzdGVyZWQgdXNlciB0aGUgaG9zdD9cblx0XHRcdFx0aWYocmVnaXN0ZXJlZFVzZXJzW3VzZXJLZXldID09ICRyb3V0ZVBhcmFtcy51aWQpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ3RyaWVkIHRvIHJlZ2lzdGVyIHRoZSBob3N0Jyk7XG5cdFx0XHRcdFx0Y2xlYW5OZXdHdWVzdFZhcmlhYmxlKCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdC8vYWRkIHRoZW0gdG8gdGhlIGFwcHJvcHJpYXRlIHJlZ2lzdGVyZWQgdXNlcnMnIGxpc3Qgb2YgZXZlbnQgaW52aXRlc1xuXHRcdFx0XHRcdGludml0ZUFSZWdpc3RlcmVkVXNlcihyZWdpc3RlcmVkVXNlcnNbdXNlcktleV0pO1xuXG5cdFx0XHRcdFx0Ly9hZGQgdGhlIGd1ZXN0IHRvIHRoZSBsaXN0XG5cdFx0XHRcdFx0dm0uZXZlbnQuZ3Vlc3RMaXN0W3JlZ2lzdGVyZWRVc2Vyc1t1c2VyS2V5XV0gPSB7XG5cdFx0XHRcdFx0XHRhdHRlbmRpbmc6IGZhbHNlLCBcblx0XHRcdFx0XHRcdHN0YXR1czoncGVuZGluZycsIFxuXHRcdFx0XHRcdFx0bmFtZTogdm0ubmV3R3Vlc3QubmFtZSwgXG5cdFx0XHRcdFx0XHRlbWFpbDp2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzLFxuXHRcdFx0XHRcdH07XHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvL2FkZCB0aGUgaW52aXRlIHRvIHRoZSBub24tcmVnaXN0ZXJlZCB1c2VycyBsaXN0IG9mIGV2ZW50IGludml0ZXNcblx0XHRcdFx0aW52aXRlQW5VbnJlZ2lzdGVyZWRVc2VyKHVzZXJLZXkpO1xuXG5cdFx0XHRcdC8vYWRkIHRoZSBndWVzdCB0byB0aGUgbGlzdFxuXHRcdFx0XHR2bS5ldmVudC5ndWVzdExpc3RbdXNlcktleV0gPSB7XG5cdFx0XHRcdFx0XHRhdHRlbmRpbmc6IGZhbHNlLCBcblx0XHRcdFx0XHRcdHN0YXR1czoncGVuZGluZycsIFxuXHRcdFx0XHRcdFx0bmFtZTogdm0ubmV3R3Vlc3QubmFtZSwgXG5cdFx0XHRcdFx0XHRlbWFpbDp2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cblx0XHRcdC8vc2F2ZSB0aGUgZXZlbnRcblx0XHRcdHZtLnNhdmVFdmVudCgpO1xuXHRcdFx0Ly9jbGVhciB0aGUgdGVtcCB2YWx1ZXNcblx0XHRcdGNsZWFuTmV3R3Vlc3RWYXJpYWJsZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkbG9nLmluZm8oJ3lvdSBkaWRuXFwndCBlbnRlciBhIG5hbWUgYW5kIG9yIGVtYWlsJyk7XG5cdFx0fVxuXHR9XG5cblx0dm0uZ3Vlc3RXaWxsQXR0ZW5kID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHR2YXIgY3VycmVudFVzZXIgPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJ2V2ZW50cycpO1xuXHRcdHZhciB0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyA9IDA7XG5cdFx0dmFyIHJlbW92ZUF0dGVuZGluZ1VwZGF0ZWQgPSBmYWxzZTtcblx0XHRcblx0XHQvL2NoYW5nZSBhdHRlbmRpbmcgdG8gdHJ1ZSBpbiBob3N0J3MgZ3Vlc3RMaXN0XG5cdFx0dm0uZXZlbnQuZ3Vlc3RMaXN0WyRyb3V0ZVBhcmFtcy51aWRdLmF0dGVuZGluZyA9IHJlc3BvbnNlO1xuXHRcdC8vY2hhbmdlIHN0YXR1cyB0byAnYXR0ZW5kaW5nJyBpbiBob3N0J3MgZ3Vlc3RMaXN0XG5cdFx0dm0uZXZlbnQuZ3Vlc3RMaXN0WyRyb3V0ZVBhcmFtcy51aWRdLnN0YXR1cyA9ICdhdHRlbmRpbmcnO1xuXHRcdFxuXHRcdC8vZ2V0IHRoZSBpbnZpdGF0aW9uIGRldGFpbHNcblx0XHRjdXJyZW50VXNlci5jaGlsZCgncGVuZGluZycpLm9uKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWxiZVxuXHRcdFx0dmFyIGludml0YXRpb25zID0gc25hcHNob3QudmFsKCk7XG5cdFx0XHQvL2xvZyBzdGFydGluZyB2YWx1ZXNcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9ucyk7XG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF0pO1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zWyRyb3V0ZVBhcmFtcy5ob3N0SWRdWyRyb3V0ZVBhcmFtcy5ldmVudElkXSk7XG5cblx0XHRcdHZhciB0aGlzSW52aXRhdGlvbiA9IGludml0YXRpb25zWyRyb3V0ZVBhcmFtcy5ob3N0SWRdWyRyb3V0ZVBhcmFtcy5ldmVudElkXTtcblx0XHRcdFxuXHRcdFx0JGxvZy5pbmZvKHRoaXNJbnZpdGF0aW9uKTtcblx0XHRcdFxuXHRcdFx0Ly9jaGVjayAjIG9mIGluaXZpYXRpb25zXG5cdFx0XHRmb3IoaW52aXRhdGlvbiBpbiBpbnZpdGF0aW9ucykge1xuXHRcdFx0XHR0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucysrO1xuXHRcdFx0fVxuXG5cdFx0XHQvL3JlcG9ydCAjIG9mIGludml0YXRpb25zXG5cdFx0XHQkbG9nLmluZm8oXCJ0b3RhbCBhdHRlbmRpbmc6IFwiICsgdG90YWxQZW5kaW5nSW52aXRhdGlvbnMpO1xuXHRcdFx0XG5cdFx0XHQvL2FkZCB0aGUgZXZlbnQgdG8gdGhlIGd1ZXN0J3MgYXR0ZW5kaW5nIGxpc3Rcblx0XHRcdGlmKHJlc3BvbnNlKSBjdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLmhvc3RJZCkuY2hpbGQoJHJvdXRlUGFyYW1zLmV2ZW50SWQpLnNldCh0aGlzSW52aXRhdGlvbiwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbyhlcnJvcik7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdFx0Ly9pZiB0aGUgdXBkYXRlZCBwbGFjZWhvbGRlciB3YXMgb24gdGhlIGF0dGVuZGluZyBsaXN0IHJlbW92ZSBpdFxuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBhdHRlbmRpbmdMaXN0ID0gc25hcHNob3QudmFsKCk7XG5cdFx0XHRcblx0XHRcdC8vcmVwb3J0IGFjdGlvbnNcblx0XHRcdCRsb2cuaW5mbygndGhpcyBpcyB0aGUgYXR0ZW5kaW5nIGxpc3QnKTtcblx0XHRcdCRsb2cuaW5mbyhhdHRlbmRpbmdMaXN0KTtcblx0XHRcdFxuXHRcdFx0Ly90aHJvdyBmbGFnIGZvciBsYXRlclxuXHRcdFx0aWYoYXR0ZW5kaW5nTGlzdC51cGRhdGVkKSByZW1vdmVBdHRlbmRpbmdVcGRhdGVkID0gdHJ1ZTtcblxuXHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQvL2lmIHRoZXIgd2FzIGFuIGVycm9yIHJlcG9ydCBpdFxuXHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbyhlcnJvcik7XG5cdFx0fSk7XG5cblx0XHQvL2lmIHRoaXMgaXMgdGhlIGxhc3QgcGVuZGluZyBldmVudCBvbiB0aGUgZ3Vlc3QncyBwZW5kaW5nIGxpc3QsIGFkZCB0aGUgdXBkYXRlZCBwbGFjZWhvbGRlclxuXHRcdGlmKHRvdGFsUGVuZGluZ0ludml0YXRpb25zIDwgMikge1xuXHRcdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XG5cblx0XHRcdC8vcmVwbGFjZSB3aXRoIHVwZGF0ZWQgZmllbGRcblx0XHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdwZW5kaW5nJykudXBkYXRlKHtcblx0XHRcdFx0dXBkYXRlZDogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbyhlcnJvcik7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvL3JlbW92ZSB0aGUgZXZlbnQgZnJvbSB0aGUgZ3Vlc3QncyBwZW5kaW5nIGxpc3Rcblx0XHRjdXJyZW50VXNlci5jaGlsZCgncGVuZGluZycpLmNoaWxkKCRyb3V0ZVBhcmFtcy5ob3N0SWQpLnJlbW92ZSgpO1xuXG5cdFx0Ly9pZiB0aGVyZSB3YXMgYW4gdXBkYXRlZCBmaWVsZCBpbiBhdHRlbmRpbmcsIHJlbW92ZSBpdFxuXHRcdGlmKHJlbW92ZUF0dGVuZGluZ1VwZGF0ZWQpIHtcblx0XHRcdCRsb2cuaW5mbygncmVtb3ZpbmcgdGhlIHVwZGF0ZWQgcGxhY2Vob2xkZXInKTtcblx0XHRcdC8vY3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLmNoaWxkKCd1cGRhdGVkJykucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0Ly9zYXZlIGNoYW5nZXNcblx0XHR2bS5ldmVudC4kc2F2ZSgpO1xuXHR9XG5cblx0dm0udXBkYXRlVXBkYXRlZFBhcmFtID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1cnJlbnRVc2VyID0gcmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLmNoaWxkKCdldmVudHMnKTtcblx0XHRcblx0XHQkbG9nLmluZm8oJ3VwZGF0aW5nIHRoZSBwYXJhbScpO1xuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0JGxvZy5pbmZvKHNuYXBzaG90LnZhbCgpKTtcblx0XHR9KTtcblx0XHRjdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykuY2hpbGQoJ3VwZGF0ZWQnKS5yZW1vdmUoKTtcblx0fVxuXG5cdHZtLmFkZEludml0YXRpb25Ub0F0dGVuZGluZyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cdFx0dmFyIGN1cnJlbnRVc2VyID0gcmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLmNoaWxkKCdldmVudHMnKTtcblx0XHR2YXIgdG90YWxQZW5kaW5nSW52aXRhdGlvbnMgPSAwO1xuXG5cdFx0Ly9nZXQgdGhlIGludml0YXRpb24gZGV0YWlsc1xuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdwZW5kaW5nJykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhbGJlXG5cdFx0XHR2YXIgaW52aXRhdGlvbnMgPSBzbmFwc2hvdC52YWwoKTtcblx0XHRcdHZhciB0aGlzSW52aXRhdGlvbiA9IGludml0YXRpb25zWyRyb3V0ZVBhcmFtcy5ob3N0SWRdWyRyb3V0ZVBhcmFtcy5ldmVudElkXTtcblx0XHRcdFxuXHRcdFx0Ly9sb2cgc3RhcnRpbmcgdmFsdWVzXG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnMpO1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zWyRyb3V0ZVBhcmFtcy5ob3N0SWRdKTtcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9uc1skcm91dGVQYXJhbXMuaG9zdElkXVskcm91dGVQYXJhbXMuZXZlbnRJZF0pO1xuXHRcdFx0XG5cdFx0XHQvL2NoZWNrICMgb2YgaW5pdmlhdGlvbnNcblx0XHRcdGZvcihpbnZpdGF0aW9uIGluIGludml0YXRpb25zKSB7XG5cdFx0XHRcdHRvdGFsUGVuZGluZ0ludml0YXRpb25zKys7XG5cdFx0XHR9XG5cblx0XHRcdC8vcmVwb3J0ICMgb2YgaW52aXRhdGlvbnNcblx0XHRcdCRsb2cuaW5mbyhcInRvdGFsIHBlbmRpbmcgaW52aXRhdGlvbnM6IFwiICsgdG90YWxQZW5kaW5nSW52aXRhdGlvbnMpO1xuXHRcdFx0XG5cdFx0XHQkbG9nLmluZm8ocmVzcG9uc2UpO1xuXHRcdFx0Ly9hZGQgdGhlIGV2ZW50IHRvIHRoZSBndWVzdCdzIGF0dGVuZGluZyBsaXN0XG5cdFx0XHRpZihyZXNwb25zZSkgY3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLmNoaWxkKCRyb3V0ZVBhcmFtcy5ob3N0SWQpLmNoaWxkKCRyb3V0ZVBhcmFtcy5ldmVudElkKS5zZXQodGhpc0ludml0YXRpb24sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSAkbG9nLmluZm8oZXJyb3IpO1xuXHRcdFx0fSk7XG5cblxuXG5cdFx0fSk7XG5cdH1cblxuXHQvL3N0YXJ0IHJ1blxuXHRpbml0KCk7XG59XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdMYW5kaW5nUGFnZUNvbnRyb2xsZXInLCBMYW5kaW5nUGFnZUNvbnRyb2xsZXIpO1xuXG5MYW5kaW5nUGFnZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRkb2N1bWVudCcsICckd2luZG93J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gTGFuZGluZ1BhZ2VDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uLCAkZG9jdW1lbnQsICR3aW5kb3cpIHtcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgYXV0aERhdGEgPSB7fTtcblx0dmFyIGN1cnJlbnRVc2VyRGF0YSA9IHt9O1xuXG5cdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHR2bS5zaG93UmVxdWlybm1lbnRzID0gZmFsc2U7XG5cdHZtLnZhbGlkTmV3TmFtZSA9IHsndmFsaWQnOmZhbHNlLCAnc3R5bGUnOntjb2xvcjonJ319O1xuXHR2bS52YWxpZE5ld0VtYWlsID0geyd2YWxpZCc6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOicnfX07XG5cdHZtLnNlY3VyZVBhc3N3b3JkID0geydzZWN1cmUnOmZhbHNlLCAnc3R5bGUnOntjb2xvcjonJ319O1xuXHR2bS51bmxvY2tDcmVhdGVVc2VyQnRuID0geyd1c2FibGUnOmZhbHNlLCAnY2xhc3MnOididG4gYnRuLXdhcm5pbmcnfTtcblx0dm0ubWVzc2FnZSA9ICd0ZXN0aW5nJztcblxuXHRcblx0dm0udmFsaWRVc2VyRW1haWwgPSB7J3ZhbGlkJzpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6Jyd9fTtcblx0dm0udmFsaWRVc2VyUGFzc3dvcmQgPSB7J3ZhbGlkJzpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6Jyd9fTtcblx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0biA9IHsndXNhYmxlJzpmYWxzZSwgJ2NsYXNzJzonYnRuIGJ0bi13YXJuaW5nJ307XG5cdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzID0ge1xuXHRcdDA6eydjb25zdHJhaW50JzonSXMgYXQgbGVhc3QgMTYgY2hhcmFjdGVycyBsb25nJywgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX0sXG5cdFx0MTp7J2NvbnN0cmFpbnQnOidJcyBubyBsb25nZXIgdGhhbiAxMDAgY2hhcmFjdGVycycsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDI6eydjb25zdHJhaW50JzonQ29udGFpbnMgYXQgbGVhc3Qgb25lIHJlcXVpcmVkIHN5bWJvbCAoXFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqKScsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDM6eydjb25zdHJhaW50JzonQ29udGFpbnMgYXQgbGVhc3Qgb25lIG51bWJlcicsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDQ6eydjb25zdHJhaW50JzonQ29udGFpbnMgYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXInLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQ1OnsnY29uc3RyYWludCc6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyJywgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX0sXG5cdFx0Njp7J2NvbnN0cmFpbnQnOlwiRG9lc24ndCBoYXZlIGFueSBpbGxlZ2FsIGNoYXJhY3RlcnNcIiwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX1cblx0fTtcblxuXHQvL3ZhciB0aGVUZXN0Qm94ID0gYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudCkuZmluZCgnI3Rlc3RCb3gnKTtcblxuXHQvL3RoZVRlc3RCb3guY2hlY2tWYWxpZGl0eSgpO1xuXHQvL3NldEN1c3RvbVZhbGlkaXR5KCd5b3UgbmVlZCBzb21ldGhpbmcgZWxzZScpO1xuXG5cdC8vbG9jYWwgbWV0aG9kc1xuXHRmdW5jdGlvbiB1dGY4X3RvX2I2NChzdHIpIHtcblx0XHRyZXR1cm4gYnRvYShzdHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYjY0X3RvX3V0Zjgoc3RyKSB7XG4gICAgXHRyZXR1cm4gYXRvYihzdHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH1cblxuXHRmdW5jdGlvbiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH1cblxuXHQvL2RlZmluZSBjb250cm9sbGVyIG1ldGhvZHNcblx0dm0uZGlzcGxheVBhc3NSZXFzID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYodm0ubmV3TmFtZSAmJiB2bS5uZXdFbWFpbCkge1xuXHRcdFx0dm0uc2hvd1JlcXVpcm5tZW50cyA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZtLnNob3dSZXF1aXJubWVudHMgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHR2bS5jaGVja05ld05hbWUgPSBmdW5jdGlvbigpIHtcblx0XHRcblx0XHRpZih2bS5uZXdOYW1lKSB7XG5cdFx0XHRpZih2bS5uZXdOYW1lLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dm0udmFsaWROZXdOYW1lLnZhbGlkID0gdHJ1ZTtcblx0XHRcdFx0dm0udmFsaWROZXdOYW1lLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0udmFsaWROZXdOYW1lLnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnZhbGlkTmV3TmFtZS5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dm0ub3BlbkNyZWF0ZVVzZXJCdXR0b24oKTtcblx0fVxuXG5cdHZtLmNoZWNrTmV3RW1haWwgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYodm0ubmV3RW1haWwpIHtcblx0XHRcdC8vY2hlY2sgdmFsaWRpdHlcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1wiLCBcIlwiKTtcblxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZtLm5ld0VtYWlsKSkge1xuXHRcdFx0XHR2bS52YWxpZE5ld0VtYWlsLnZhbGlkID0gdHJ1ZTtcblx0XHRcdFx0dm0udmFsaWROZXdFbWFpbC5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLnZhbGlkTmV3RW1haWwudmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0dm0udmFsaWROZXdFbWFpbC5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdFx0XHR9XHRcdFx0XG5cdFx0fVxuXHRcdFxuXHRcdHZtLm9wZW5DcmVhdGVVc2VyQnV0dG9uKCk7XG5cdH1cblxuXHR2bS5jaGVja1VzZXJFbWFpbCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLnVzZXJFbWFpbCkge1xuXHRcdFx0Ly9jaGVjayB2YWxpZGl0eVxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XCIsIFwiXCIpO1xuXG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3Qodm0udXNlckVtYWlsKSkge1xuXHRcdFx0XHR2bS52YWxpZFVzZXJFbWFpbC52YWxpZCA9IHRydWU7XG5cdFx0XHRcdHZtLnZhbGlkVXNlckVtYWlsLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0udmFsaWRVc2VyRW1haWwudmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0dm0udmFsaWRVc2VyRW1haWwuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZtLm9wZW5Vc2VyTG9naW5CdG4oKTtcblx0fVxuXG5cdHZtLmNoZWNrTmV3UGFzc3dvcmRzID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9mb3IgZWFjaCBwYXNzd29yZCBkZWZpbmUgdGhlIHBhdHRlcm4gdGhhdCB0aGUgcGFzc3dvcmQgbXVzdCBtYXRjaFxuXHRcdHZhciBjb25zdHJhaW50cyA9IHtcblx0IFx0XHQwOiBbJycsICcgeW91ciBwYXNzd29yZCBuZWVkcyB0byBiZSAxNiBjaGFyYWN0ZXJzIG9yIGxvbmdlciddLFxuXHQgXHRcdDE6IFsnJywgJyB5b3VyIHBhc3N3b3JkIG5lZWRzIHRvIGJlIGxlc3MgdGhhbiAxMDAgY2hhcmFjdGVycyddLFxuXHQgXHRcdDI6IFsnW1xcIVxcQFxcI1xcJFxcJVxcXlxcJlxcKl0nLCBcIiBubyByZXF1aXJlZCBzeW1ib2xzIGZvdW5kXCJdLFxuXHQgXHRcdDM6IFsnWzAtOV0nLCBcIiBubyBudW1iZXJzIGZvdW5kXCJdLFxuXHQgXHRcdDQ6IFsnW2Etel0nLCBcIiBubyBsb3dlcmNhc2UgbGV0dGVycyBmb3VuZFwiXSxcblx0IFx0XHQ1OiBbJ1tBLVpdJywgXCIgbm8gdXBwZXJjYXNlIGxldHRlcnMgZm91bmRcIl0sXG5cdCBcdFx0NjogWydbXkEtejAtOVxcIVxcQFxcI1xcJFxcJVxcXlxcJlxcKl0nLCBcIiBpbGxlZ2FsIGNoYXJhY3RlcnMgZm91bmRcIl0sXG4gXHRcdH07XG4gXHRcdFxuIFx0XHQvL2NoZWNrIGZvciBsZW5ndGhcbiBcdFx0aWYodm0ubmV3UGFzc3dvcmQpIHtcbiBcdFx0XHRpZih2bS5uZXdQYXNzd29yZC5sZW5ndGggPiAxNSkgeyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzBdLnN0eWxlID0ge2NvbG9yOidncmVlbid9OyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzBdLm1ldCA9IHRydWU7IFxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1swXS5zdHlsZSA9IHtjb2xvcjoncmVkJ307IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMF0ubWV0ID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKHZtLm5ld1Bhc3N3b3JkLmxlbmd0aCA8PSAxMDApIHsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1sxXS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1sxXS5tZXQgPSB0cnVlO1xuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1sxXS5zdHlsZSA9IHtjb2xvcjoncmVkJ307IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0ubWV0ID0gZmFsc2U7XG4gXHRcdFx0fVxuXG4gXHRcdFx0Ly9jaGVjayBjb25zdHJhaW50cyAyLTVcbiBcdFx0XHRmb3IoaSA9IDI7IGkgPCA2OyBpKyspIHtcblx0IFx0XHRcdC8vY2hlY2sgZm9yIHJlcXVpcmVkIHN5bWJvbHMsIHVwcGVyY2FzZSwgbG9zZXJjYXNlLCBhbmQgY2hhcmFjdGVyc1xuXHQgXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKGNvbnN0cmFpbnRzW2ldWzBdLCBcIlwiKTtcdFxuXG5cdCBcdFx0XHQvL3Rlc3QgZWFjaCBjb25zdHJhdGludFxuXHQgXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZtLm5ld1Bhc3N3b3JkKSkge1xuXHQgXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1tpXS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0IFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbaV0ubWV0ID0gdHJ1ZTtcblx0IFx0XHRcdH0gZWxzZSB7XG5cdCBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzW2ldLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0IFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbaV0ubWV0ID0gZmFsc2U7XG5cdCBcdFx0XHR9XG5cdCBcdFx0fVxuXG5cdCBcdFx0Ly9jaGVjayBpbGxlZ2FsIGNoYXJhY3RlcnNcblx0IFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoY29uc3RyYWludHNbNl1bMF0sIFwiXCIpO1xuXG5cdCBcdFx0Ly9ydW4gdGhlIGNoZWNrXG5cdCBcdFx0aWYoIWNvbnN0cmFpbnQudGVzdCh2bS5uZXdQYXNzd29yZCkpIHtcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzZdLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzZdLm1ldCA9IGZhbHNlO1xuXHQgXHRcdH0gZWxzZSB7XG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzZdLm1ldCA9IHRydWU7XG5cdCBcdFx0fVxuXG5cdCBcdFx0Ly9pZiBhbGwgY29uc3RyYWlucyBtZXQsIHRocm93IHZhbGlkIHBhc3MgZmxhZ1xuXHQgXHRcdGlmKCB2bS5wYXNzd29yZFJlcXVpcm5tZW50c1swXS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzFdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMl0ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1szXS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzRdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNV0ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5tZXQpIHtcblx0IFx0XHRcdHZtLnNlY3VyZVBhc3N3b3JkLnNlY3VyZSA9IHRydWVcblx0IFx0XHR9IGVsc2Uge1xuXHQgXHRcdFx0dm0uc2VjdXJlUGFzc3dvcmQuc2VjdXJlID0gZmFsc2U7XG5cdCBcdFx0fVxuXG5cdCBcdFx0aWYodm0uc2VjdXJlUGFzc3dvcmQuc2VjdXJlKSB7XG5cdCBcdFx0XHR2bS5zZWN1cmVQYXNzd29yZC5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0IFx0XHR9IGVsc2Uge1xuXHQgXHRcdFx0dm0uc2VjdXJlUGFzc3dvcmQuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHQgXHRcdH1cbiBcdFx0fVxuIFx0XHRcbiBcdFx0dm0ub3BlbkNyZWF0ZVVzZXJCdXR0b24oKTtcblx0fVxuXG5cdHZtLmNoZWNrVXNlclBhc3N3b3JkcyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLnVzZXJQYXNzd29yZCkge1xuXHRcdFx0aWYodm0udXNlclBhc3N3b3JkLmxlbmd0aCA+IDE1KSB7XG5cdFx0XHRcdHZtLnZhbGlkVXNlclBhc3N3b3JkLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0XHR2bS52YWxpZFVzZXJQYXNzd29yZC52YWxpZCA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS52YWxpZFVzZXJQYXNzd29yZC5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdFx0XHRcdHZtLnZhbGlkVXNlclBhc3N3b3JkLnZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0XG5cdFx0dm0ub3BlblVzZXJMb2dpbkJ0bigpO1xuXHR9XG5cblx0dm0ub3BlbkNyZWF0ZVVzZXJCdXR0b24gPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS52YWxpZE5ld05hbWUudmFsaWQgJiYgdm0udmFsaWROZXdFbWFpbC52YWxpZCAmJiB2bS5zZWN1cmVQYXNzd29yZC5zZWN1cmUpIHtcblx0XHRcdHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4uY2xhc3MgPSAnYnRuIGJ0bi1zdWNjZXNzJztcblx0XHRcdHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4udXNhYmxlID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dm0udW5sb2NrQ3JlYXRlVXNlckJ0bi5jbGFzcyA9ICdidG4gYnRuLXdhcm5pbmcnO1xuXHRcdFx0dm0udW5sb2NrQ3JlYXRlVXNlckJ0bi51c2FibGUgPSBmYWxzZTtcdFxuXHRcdH1cblxuXHR9XG5cblx0dm0ub3BlblVzZXJMb2dpbkJ0biA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLnZhbGlkVXNlckVtYWlsLnZhbGlkICYmIHZtLnZhbGlkVXNlclBhc3N3b3JkLnZhbGlkKSB7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLmNsYXNzID0gJ2J0biBidG4tc3VjY2Vzcyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4uY2xhc3MgPSAnYnRuIGJ0bi13YXJuaW5nJztcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4udXNhYmxlID0gZmFsc2U7XHRcblx0XHR9XG5cdH1cblxuXHR2bS51cGRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHQvL3NldCB2YWx1ZXNcblx0XHR2bS5uZXdOYW1lID0gJGRvY3VtZW50LmZpbmQoJyNuZXdOYW1lJylbMF0udmFsdWU7XG5cdFx0dm0ubmV3RW1haWwgPSAkZG9jdW1lbnQuZmluZCgnI25ld0VtYWlsJylbMF0udmFsdWU7XG5cdFx0dm0udXNlckVtYWlsID0gJGRvY3VtZW50LmZpbmQoJyN1c2VyRW1haWwnKVswXS52YWx1ZTtcblx0XHRcblx0XHR2bS5jaGVja05ld05hbWUoKTtcblx0XHR2bS5jaGVja05ld0VtYWlsKCk7XG5cdFx0dm0uY2hlY2tVc2VyRW1haWwoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlZGlyZWN0KHBhdGgsIHVzZXJEYXRhKSB7XG5cdFx0dmFyIGZ1bGxQYXRoID0gcGF0aCArICcvJyArIGN1cnJlbnRVc2VyRGF0YS51aWQgKyAnLycgKyBjdXJyZW50VXNlckRhdGEudG9rZW47XG5cdFx0Ly9yZWRpcmVjdFxuXHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86ICcgKyBmdWxsUGF0aCk7XG5cdFx0JGxvY2F0aW9uLnBhdGgoZnVsbFBhdGgpO1xuXHRcdCRzY29wZS4kYXBwbHkoKTtcblx0fVxuXG5cdHZtLmNyZWF0ZU5ld1VzZXIgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9nLmluZm8oJ0NyZWF0aW5nIGEgbmV3IHVzZXIgYWNjb3VudCBub3chJyk7XG5cblx0XHRpZih2bS51bmxvY2tDcmVhdGVVc2VyQnRuLnVzYWJsZSkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVcblx0XHRcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXG5cdFx0XHRyZWYuY3JlYXRlVXNlcih7XG5cdFx0XHRcdGVtYWlsOnZtLm5ld0VtYWlsLFxuXHRcdFx0XHRwYXNzd29yZDp2bS5uZXdQYXNzd29yZFxuXHRcdFx0fSxmdW5jdGlvbihlcnJvciwgdXNlckRhdGEpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0Vycm9yIGNyZWF0aW5nIHVzZXI6ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly9sb2cgcmVzdWx0c1xuXHRcdFx0XHRcdCRsb2cuaW5mbyh1c2VyRGF0YSk7XG5cblx0XHRcdFx0XHQvL3NhdmUgYWxsIHRoZSBkYXRhXG5cdFx0XHRcdFx0Y3VycmVudFVzZXJEYXRhID0gdXNlckRhdGE7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly9nZW5lcmF0ZSB0aGUgdXNlciByZWNvcmRcblx0XHRcdFx0XHR2YXIgdXNlcnNSZWYgPSByZWYuY2hpbGQoJ1VzZXJzLycgKyB1c2VyRGF0YS51aWQpO1xuXHRcdFx0XHRcdHZhciBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XG5cblx0XHRcdFx0XHQvL3dyaXRlIG5ldyB1c2VyIHRvIHRoZSBkYXRhYmFzZSB3aXRoIGJpbyBpbmZvXG5cdFx0XHRcdFx0dXNlcnNSZWYuc2V0KHsgXG5cdFx0XHRcdFx0XHQnYmlvJzoge1xuXHRcdFx0XHRcdFx0XHQnbmFtZSc6IHZtLm5ld05hbWUsXG5cdFx0XHRcdFx0XHRcdCdlbWFpbCc6IHZtLm5ld0VtYWlsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0J2V2ZW50cyc6IHtcblx0XHRcdFx0XHRcdFx0J3BlbmRpbmcnOiB7XG5cdFx0XHRcdFx0XHRcdFx0J3VwZGF0ZWQnOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdCdob3N0aW5nJzoge1xuXHRcdFx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHQnYXR0ZW5kaW5nJzoge1xuXHRcdFx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHQnY29tcGxldGVkJzoge1xuXHRcdFx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0XHRcdGlmKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRcdCRsb2cuaW5mbygnRGF0YSBjb3VsZCBub3QgYmUgc2F2ZWQ6ICcgKyBlcnJvcik7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQkbG9nLmluZm8oJ0RhdGEgc2F2ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdC8vYWRkIHRoaXMgdXNlciB0byB0aGUgbGlzdCBvZiByZWdpc3RlcmVkIHVzZXJzXG5cdFx0XHRcdFx0cmVmLmNoaWxkKCdVaWRzJykuY2hpbGQodXRmOF90b19iNjQodm0ubmV3RW1haWwpKS5zZXQoY3VycmVudFVzZXJEYXRhLnVpZCwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0XHRcdGlmKGVycm9yKSAkbG9nLmluZm8oXCJEYXRhIGNvdWxkIG5vdCBiZSBzYXZlZC4gXCIgKyBlcnJvcik7XG5cdFx0XHRcdFx0XHRlbHNlICRsb2cuaW5mbyhcInVpZCBjcmVhdGVkIHN1Y2Vzc2Z1bGx5LlwiKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdC8vcmVkaXJlY3QgdG8gVXNlckluZm9ybWF0aW9uXG5cdFx0XHRcdFx0cmVkaXJlY3QoJy91c2VySW5mb3JtYXRpb24nLCBjdXJyZW50VXNlckRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdH1cblx0fVxuXG5cdHZtLmxvZ2luUmVnaXN0ZXJlZFVzZXIgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmKHZtLnVuY2xvY2tVc2VyTG9naW5CdG4udXNhYmxlKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZVxuXHRcdFx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0XHRcdC8vYXV0aGVudGljYXRlIHRoZSB1c2VyXG5cdFx0XHRyZWYuYXV0aFdpdGhQYXNzd29yZCh7XG5cdFx0XHRcdGVtYWlsOiB2bS51c2VyRW1haWwsXG5cdFx0XHRcdHBhc3N3b3JkOiB2bS51c2VyUGFzc3dvcmRcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yLCBhdXRoRGF0YSkge1xuXHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnRXJyb3IgTG9nZ2luZyBJbjogJyArIGVycm9yKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0xvZ2dlZCBJbiBzdWNjZXNzZnVsbHk6ICcgKyBhdXRoRGF0YS51aWQpO1xuXHRcdFx0XHRcdCRsb2cuaW5mbyhhdXRoRGF0YSk7XG5cdFx0XHRcdFx0Ly9zYXZlIGFsbCB0aGUgZGF0YVxuXHRcdFx0XHRcdGN1cnJlbnRVc2VyRGF0YSA9IGF1dGhEYXRhO1xuXG5cdFx0XHRcdFx0Ly9sb2FkIHVzZXIgYmlvXG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly9sb2FkIHVzZXIgZXZlbnRzXG5cblx0XHRcdFx0XHQvL3JlZGlyZWN0XG5cdFx0XHRcdFx0cmVkaXJlY3QoJy91c2VySW5mb3JtYXRpb24nLCBjdXJyZW50VXNlckRhdGEpO1xuXHRcdFx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZtLmFsZXJ0TWUgPSBmdW5jdGlvbigpIHtcblx0XHRhbGVydCgndGhpcyBpcyB3b3JraW5nISBhbiBhbGVydCEnKTtcblx0fVxuXG5cdHZtLm9uUmVzaXplRnVuY3Rpb24gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaW5wdXRUZXh0ID0gYW5ndWxhci5lbGVtZW50KCcuaW5wdXRUZXh0Jyk7XG5cdFx0aWYoJHdpbmRvdy5vdXRlcldpZHRoID4gJHdpbmRvdy5vdXRlckhlaWdodCkge1xuXHRcdFx0aW5wdXRUZXh0LmNzcygnZm9udC1zaXplJywgJzJlbScpO1xuXHRcdFx0JGxvZy5pbmZvKCdtYWtpbmcgYmlnZ2VyJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlucHV0VGV4dC5jc3MoJ2ZvbnQtc2l6ZScsICcxLjJlbScpO1xuXHRcdH1cblx0fVxuXG5cdC8vZXZlbnQgbGlzdGVuZXJzXG5cdGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gJGRvY3VtZW50KSB7XG5cdCAgICAkZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9nLmluZm8oJ2FkZGluZyBGYXN0Q2xpY2snKTtcblx0ICAgICAgICBGYXN0Q2xpY2suYXR0YWNoKCRkb2N1bWVudC5ib2R5KTtcblx0ICAgIH0sIGZhbHNlKTtcblx0fVxuXG5cdGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5iaW5kKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcblx0XHR2bS5vblJlc2l6ZUZ1bmN0aW9uKCk7XG5cdFx0Ly8kc2NvcGUuJGFwcGx5KCk7XG5cdH0pO1xuXG5cdGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdGlmKCR3aW5kb3cub3V0ZXJXaWR0aCA8IDYwMCkge1xuXHRcdFx0dm0ub25SZXNpemVGdW5jdGlvbigpO1xuXHRcdFx0Ly8kc2NvcGUuJGFwcGx5KCk7XG5cdFx0fVxuXHR9KVxuXG5cblx0IHZtLm1hc3RlciA9IHt9O1xuXG5cdCAgdm0udXBkYXRlID0gZnVuY3Rpb24odXNlcikge1xuXHQgICAgdm0ubWFzdGVyID0gYW5ndWxhci5jb3B5KHVzZXIpO1xuXHQgIH07XG5cblx0ICB2bS5yZXNldCA9IGZ1bmN0aW9uKGZvcm0pIHtcblx0ICAgIGlmIChmb3JtKSB7XG5cdCAgICAgIGZvcm0uJHNldFByaXN0aW5lKCk7XG5cdCAgICAgIGZvcm0uJHNldFVudG91Y2hlZCgpO1xuXHQgICAgfVxuXHQgICAgdm0udXNlciA9IGFuZ3VsYXIuY29weSh2bS5tYXN0ZXIpO1xuXHQgIH07XG5cblx0ICB2bS5yZXNldCgpO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgTWFpbkNvbnRyb2xsZXIpO1xuXG5NYWluQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRsb2NhdGlvbicsICckZG9jdW1lbnQnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBNYWluQ29udHJvbGxlcigkbG9nLCAkbG9jYXRpb24sICRkb2N1bWVudCkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZmJVUkwgPSAnaHR0cHM6Ly9tZWV0dXBwbGFubmVyLmZpcmViYXNlaW8uY29tLyc7XG5cdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpOyBcblxuXHR2bS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcblx0XHRhbGVydCgnbG9nZ2luZyB5b3Ugb3V0IScpO1xuXHRcdHJlZi51bmF1dGgoKTtcblx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHR9O1xuXG5cdGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gJGRvY3VtZW50KSB7XG5cdCAgICAkZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9nLmluZm8oJ2FkZGluZyBGYXN0Q2xpY2snKTtcblx0ICAgICAgICBGYXN0Q2xpY2suYXR0YWNoKCRkb2N1bWVudC5ib2R5KTtcblx0ICAgIH0sIGZhbHNlKTtcblx0fVxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ05ld1VzZXJTaWduVXBDb250cm9sbGVyJywgTmV3VXNlclNpZ25VcENvbnRyb2xsZXIpO1xuXG5OZXdVc2VyU2lnblVwQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICd2YWxpZGF0aW9uJywgJ2JhY2tlbmRTZXJ2aWNlcycsICd0cmFmZmljVmFsZXQnLCAndXNlckRhdGEnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBOZXdVc2VyU2lnblVwQ29udHJvbGxlcigkc2NvcGUsICRsb2csIHZhbGlkYXRpb24sIGJhY2tlbmRTZXJ2aWNlcywgdHJhZmZpY1ZhbGV0LCB1c2VyRGF0YSkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vZGVmaW5lIHZtIGlucHV0IHZhcmlhYmxlc1xuXHR2bS5pbnB1dHMgPSB7XG5cdFx0bmV3TmFtZTogJycsXG5cdFx0bmV3RW1haWw6ICcnLFxuXHRcdG5ld1Bhc3N3b3JkOiAnJyxcblx0XHRyZXF1aXJlZEZpZWxkc0RlZmluZWQ6IGZhbHNlXG5cdH1cblx0dm0uZXJyb3JzID0ge1xuXHRcdG5hbWU6ICcnLFxuXHRcdGVtYWlsOiAnJyxcblx0XHRwYXNzd29yZDogZmFsc2UsXG5cdFx0cGFzc2VzQWxsVGVzdHM6IGZhbHNlXG5cdH1cblx0dm0ucGFzc1JlcXMgPSB7XG5cdFx0MDogeyBpZDonJywgcmVxOidJcyBhdCBsZWFzdCAxNiBjaGFyYWN0ZXJzIGxvbmcnLCBmdWxmaWxsZWQ6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOidyZWQnfX0sXG5cdFx0MTogeyBpZDonJywgcmVxOidJcyBubyBsb25nZXIgdGhhbiAxMDAgY2hhcmFjdGVycycsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9IH0sXG5cdFx0MjogeyBpZDonJywgcmVxOidDb250YWlucyBhdCBsZWFzdCBvbmUgbG93ZXJjYXNlIGxldHRlcicsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9IH0sXG5cdFx0MzogeyBpZDonJywgcmVxOidDb250YWlucyBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlcicsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9IH0sXG5cdFx0NDogeyBpZDonJywgcmVxOidDb250YWlucyBhdCBsZWFzdCBvbmUgbnVtYmVyJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQ1OiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSByZXF1aXJlZCBzeW1ib2wgKFxcIVxcQFxcI1xcJFxcJVxcXlxcJlxcKiknLCBmdWxmaWxsZWQ6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOidyZWQnfSB9LFxuXHRcdDY6IHsgaWQ6JycsIHJlcTpcIkRvZXNuJ3QgaGF2ZSBhbnkgaWxsZWdhbCBjaGFyYWN0ZXJzXCIsIGZ1bGZpbGxlZDp0cnVlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfVxuXHR9XG5cdHZtLnNob3dSZXFzQm94ID0gZmFsc2U7XG5cblx0Ly9kZWZpbmUgcmVxdWlyZWQgZmllbGQgY29uc3RyYWludHNcblx0dmFyIHNpZ251cFZhbGlkYXRpb24gPSB2YWxpZGF0aW9uO1xuXG5cdC8vZGVmaW5lIGNvbnRyb2xsZXIgbWV0aG9kc1xuXHRmdW5jdGlvbiB2ZXJpZnlSZXF1aXJubWVudHMoKSB7XG5cdFx0aWYodm0uZXJyb3JzLm5hbWUgPT0gJycgJiYgdm0uZXJyb3JzLmVtYWlsID09ICcnICYmICF2bS5lcnJvcnMucGFzc3dvcmQpIHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyA9IHRydWU7XG5cdFx0ZWxzZSB2bS5lcnJvcnMucGFzc2VzQWxsVGVzdHMgPSBmYWxzZTtcblxuXHRcdGlmKCBhbmd1bGFyLmlzRGVmaW5lZCh2bS5pbnB1dHMubmV3TmFtZSkgJiYgdm0uaW5wdXRzLm5ld05hbWUgIT09ICcnICYmXG5cdFx0XHRhbmd1bGFyLmlzRGVmaW5lZCh2bS5pbnB1dHMubmV3RW1haWwpICYmIHZtLmlucHV0cy5uZXdFbWFpbCAhPT0gJycgJiZcblx0XHRcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5uZXdQYXNzd29yZCkgJiYgdm0uaW5wdXRzLm5ld1Bhc3N3b3JkICE9PSAnJykgXG5cdFx0XHRcdHZtLmlucHV0cy5yZXF1aXJlZEZpZWxkc0RlZmluZWQgPSB0cnVlO1xuXHRcdGVsc2Ugdm0uaW5wdXRzLnJlcXVpcmVkRmllbGRzRGVmaW5lZCA9IGZhbHNlO1xuXHR9XG5cblx0Ly9kZWZpbmUgdm0gYWNjZXNzaWJsZSBtZXRob2RzXG5cdHZtLmNoZWNrTmV3TmFtZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVcblx0XHR2YXIgZXJyb3JzID0gW107XG5cdFx0dmFyIGhhc05hbWUgPSBzaWdudXBWYWxpZGF0aW9uLnJlcXVpcmVkKHZtLmlucHV0cy5uZXdOYW1lKTtcblx0XHR2YXIgbG9uZ0Vub3VnaCA9IHNpZ251cFZhbGlkYXRpb24ubWluTmFtZUxlbmd0aCh2bS5pbnB1dHMubmV3TmFtZSlcblx0XHRcblx0XHQvL2xvZyBlcnJvcnNcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChoYXNOYW1lKSkgZXJyb3JzLnB1c2goaGFzTmFtZSk7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQobG9uZ0Vub3VnaCkpIGVycm9ycy5wdXNoKGxvbmdFbm91Z2gpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGVycm9ycyBtb2RlbFxuXHRcdGlmKGVycm9ycy5sZW5ndGggPiAwKSB2bS5lcnJvcnMubmFtZSA9IGVycm9ycy5qb2luKCcsICcpO1xuXHRcdGVsc2Ugdm0uZXJyb3JzLm5hbWUgPSAnJztcblxuXHRcdHZlcmlmeVJlcXVpcm5tZW50cygpO1xuXHR9XG5cblx0dm0uY2hlY2tOZXdFbWFpbCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVcblx0XHR2YXIgZXJyb3JzID0gW107XG5cdFx0dmFyIGhhc0VtYWlsID0gc2lnbnVwVmFsaWRhdGlvbi5yZXF1aXJlZCh2bS5pbnB1dHMubmV3RW1haWwpO1xuXHRcdHZhciBpc0FuRW1haWwgPSBzaWdudXBWYWxpZGF0aW9uLmVtYWlsKHZtLmlucHV0cy5uZXdFbWFpbCk7XG5cdFx0XG5cdFx0Ly9sb2cgZXJyb3JzXG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoaGFzRW1haWwpKSBlcnJvcnMucHVzaChoYXNFbWFpbCk7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoaXNBbkVtYWlsKSkgZXJyb3JzLnB1c2goaXNBbkVtYWlsKTtcblxuXHRcdC8vdXBkYXRlIHRoZSBlcnJvcnMgbW9kZWxcblx0XHRpZihlcnJvcnMubGVuZ3RoID4gMCkgdm0uZXJyb3JzLmVtYWlsID0gZXJyb3JzLmpvaW4oJywgJyk7XG5cdFx0ZWxzZSB2bS5lcnJvcnMuZW1haWwgPSAnJztcblxuXHRcdHZlcmlmeVJlcXVpcm5tZW50cygpO1xuXHR9XG5cblx0dm0uY2hlY2tOZXdQYXNzd29yZCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vZmxpcCBvbiByZXFzIGJveFxuXHRcdHZtLnNob3dSZXFzQm94ID0gdHJ1ZTtcblxuXHRcdC8vbG9jYWwgdmFyaWFibGVcblx0XHR2YXIgZXJyb3JzID0gW107XG5cdFx0dmFyIGhhc1Bhc3N3b3JkID0gc2lnbnVwVmFsaWRhdGlvbi5yZXF1aXJlZCh2bS5pbnB1dHMubmV3UGFzc3dvcmQpO1xuXHRcdHZhciBzcGVjaWZpY1JlcXMgPSBbXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLm1pblBhc3NMZW5ndGgodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24ubWF4UGFzc0xlbmd0aCh2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5hdExlYXN0T25lTG93ZXJjYXNlKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmF0TGVhc3RPbmVVcHBlcmNhc2Uodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24uYXRMZWFzdE9uZU51bWJlcih2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5hdExlYXN0T25lU3ltYm9sKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmlsbGVnYWxDaGFyYWN0ZXIodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKVxuXHRcdF07XG5cblx0XHQvL2xvZyBlcnJvcnNcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChoYXNQYXNzd29yZCkpIGVycm9ycy5wdXNoKGhhc1Bhc3N3b3JkKTtcblxuXHRcdC8vdXBkYXRlIHRoZSBlcnJvcnMgbW9kZWxcblx0XHRpZihlcnJvcnMubGVuZ3RoID4gMCkgdm0uZXJyb3JzLnBhc3N3b3JkID0gZXJyb3JzLmpvaW4oJywgJyk7XG5cdFx0ZWxzZSB2bS5lcnJvcnMuZW1haWwgPSAnJztcblxuXHRcdC8vdXBkYXRlIHJlcXMgbW9kZWxcblx0XHR2YXIgYW55RXJyb3JzID0gZmFsc2U7XG5cdFx0Zm9yKGk9MDsgaTw3OyBpKyspIHtcblx0XHRcdGlmKHNwZWNpZmljUmVxc1tpXSkge1xuXHRcdFx0XHR2bS5wYXNzUmVxc1tpXS5mdWxmaWxsZWQgPSB0cnVlO1xuXHRcdFx0XHR2bS5wYXNzUmVxc1tpXS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLmZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHR2bS5wYXNzUmVxc1tpXS5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdFx0XHRcdGFueUVycm9ycyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dm0uZXJyb3JzLnBhc3N3b3JkID0gYW55RXJyb3JzO1xuXHRcdHZlcmlmeVJlcXVpcm5tZW50cygpO1xuXHR9XG5cblx0dm0uZXhpdFBhc3N3b3JkID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0uY2hlY2tOZXdQYXNzd29yZCgpO1xuXHRcdHZtLnNob3dSZXFzQm94ID0gZmFsc2U7XG5cdH1cblxuXHR2bS5jcmVhdGVOZXdVc2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgbmV3VXNlclNoZXJwYSA9IHRyYWZmaWNWYWxldDtcblxuXHRcdC8vY29uZmlybSBhbGwgZmllbGRzIGFyZSB2YWxpZFxuXHRcdGlmKHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyAmJiB2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkKSB7XG5cdFx0XHRcblx0XHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBjcmVhdGVOZXdVc2VyID0gYmFja2VuZFNlcnZpY2VzO1xuXHRcdFx0dmFyIG5ld1VzZXJEYXRhID0gdXNlckRhdGE7XG5cblx0XHRcdC8vbWFpbnRhaW4gbG9jYWwgdmFsdWVzIHRvIHNwZWVkIHVwIHVzZXIgZXhwZXJpZW5jZVxuXHRcdFx0bmV3VXNlckRhdGEubG9hZFByaW1hcmllcyh2bS5pbnB1dHMubmV3RW1haWwsIHZtLmlucHV0cy5uZXdOYW1lKTtcblxuXHRcdFx0Ly9jcmVhdGUgdGhlIG5ldyB1c2VyIGluIHRoZSBkYXRhYmFzZVxuXHRcdFx0Y3JlYXRlTmV3VXNlci5jcmVhdGVOZXdVc2VyKHZtLmlucHV0cy5uZXdFbWFpbCwgdm0uaW5wdXRzLm5ld1Bhc3N3b3JkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24odXNlckRhdGEpIHtcblx0XHRcdFx0Ly9jcmVhdGUgYSB1c2VyIHByb2ZpbGUgaW4gdGhlIGRhdGFiYXNlXG5cdFx0XHRcdGNyZWF0ZU5ld1VzZXIuYWRkTmV3VXNlclRvRGF0YWJhc2UodXNlckRhdGEudWlkLCB2bS5pbnB1dHMubmV3TmFtZSwgdm0uaW5wdXRzLm5ld0VtYWlsKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihtZXNzYWdlKSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKG1lc3NhZ2UpO1xuXHRcdFx0XHRcdC8vYWRkIHRoaXMgdXNlciB0byB0aGUgbGlzdCBvZiByZWdpc3RlcmVkIHVzZXJzXG5cdFx0XHRcdFx0Y3JlYXRlTmV3VXNlci5hZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3QodXNlckRhdGEudWlkLCB2bS5pbnB1dHMubmV3RW1haWwpXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cdFx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXHRcdFx0XG5cdFx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXh0IHBhZ2UgXG5cdFx0XHRuZXdVc2VyU2hlcnBhLnJlZGlyZWN0VG8oJy91c2VySW5mb3JtYXRpb24nKTtcblx0XHR9XG5cblx0fVxuXHRcblx0Ly9ydW4gdGltZSBhY3Rpb25zXG5cbn1cbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1JlZ1VzZXJMb2dpbkNvbnRyb2xsZXInLCBSZWdVc2VyTG9naW5Db250cm9sbGVyKTtcblxuUmVnVXNlckxvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRkb2N1bWVudCcsICdiYWNrZW5kU2VydmljZXMnLCAndHJhZmZpY1ZhbGV0JywgJ3VzZXJEYXRhJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gUmVnVXNlckxvZ2luQ29udHJvbGxlcigkbG9nLCAkZG9jdW1lbnQsIGJhY2tlbmRTZXJ2aWNlcywgdHJhZmZpY1ZhbGV0LCB1c2VyRGF0YSkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vZGVmaW5lIHZtIGlucHV0IHZhcmlhYmxlc1xuXHR2bS5pbnB1dHMgPSB7XG5cdFx0ZW1haWw6ICcnLFxuXHRcdHBhc3N3b3JkOiAnJyxcblx0XHRyZXF1aXJlZEZpZWxkc0RlZmluZWQ6IGZhbHNlXG5cdH1cblx0dm0uZXJyb3JzID0ge1xuXHRcdG1lc3NhZ2U6ICcnLFxuXHRcdHBhc3Nlc0FsbFRlc3RzOiB0cnVlXG5cdH1cblx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0biA9IHtcblx0XHQndXNhYmxlJzpmYWxzZSwgXG5cdFx0J2NsYXNzJzonYnRuIGJ0bi13YXJuaW5nJyxcblx0XHRtZXNzYWdlOiAnTmVlZCBFbWFpbCAmIFBhc3MnXG5cdH1cblxuXHQvL21ldGhvZHNcblx0ZnVuY3Rpb24gb3BlblVzZXJMb2dpbkJ0bigpIHtcblx0XHQvL2NoZWNrIHRoYXQgdGhlcmUgaXMgYW4gZW1haWwgYW5kIHRoZXJlIGlzIGEgcGFzc3dvcmRcblx0XHRpZihcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5lbWFpbCkgJiYgdm0uaW5wdXRzLmVtYWlsICE9PSAnJyAmJlxuXHRcdFx0YW5ndWxhci5pc0RlZmluZWQodm0uaW5wdXRzLnBhc3N3b3JkKSAmJiB2bS5pbnB1dHMucGFzc3dvcmQgIT09ICcnKSBcblx0XHR7XG5cdFx0XHR2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkID0gdHJ1ZTtcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4uY2xhc3MgPSAnYnRuIGJ0bi1zdWNjZXNzJztcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4ubWVzc2FnZSA9ICdMb2dpbic7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZtLmlucHV0cy5yZXF1aXJlZEZpZWxkc0RlZmluZWQgPSBmYWxzZTtcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4uY2xhc3MgPSAnYnRuIGJ0bi13YXJuaW5nJztcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4ubWVzc2FnZSA9ICdOZWVkIEVtYWlsICYgUGFzcyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSA9IGZhbHNlO1xuXHRcdH1cblxuXHR9XG5cblx0Ly92aWV3IG1vZGVsIG1ldGhvZHNcblx0dm0udXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9zZXQgdmFsdWVzXG5cdFx0dm0uaW5wdXRzLmVtYWlsID0gJGRvY3VtZW50LmZpbmQoJyN1c2VyRW1haWwnKVswXS52YWx1ZTtcblx0XHR2bS5pbnB1dHMucGFzc3dvcmQgPSAkZG9jdW1lbnQuZmluZCgnI3VzZXJQYXNzd29yZCcpWzBdLnZhbHVlO1xuXHRcdFxuXHRcdG9wZW5Vc2VyTG9naW5CdG4oKTtcblx0fVxuXG5cdHZtLmxvZ2luUmVnaXN0ZXJlZFVzZXIgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHJlZ2lzdGVyZWRVc2VyU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXG5cdFx0Ly9jb25maXJtIGFsbCBmaWVsZHMgYXJlIHZhbGlkXG5cdFx0aWYodHJ1ZSkge1xuXHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGRhdGFiYXNlID0gYmFja2VuZFNlcnZpY2VzO1xuXHRcdFx0dmFyIHJlZ2lzdGVyZWRVc2VyRGF0YSA9IHVzZXJEYXRhO1xuXG5cdFx0XHQvL21haW50YWluIGxvY2FsIHZhbHVlcyB0byBzcGVlZCB1cCB1c2VyIGV4cGVyaWVuY2Vcblx0XHRcdHJlZ2lzdGVyZWRVc2VyRGF0YS5sb2FkUHJpbWFyaWVzKHZtLmlucHV0cy5lbWFpbCk7XG5cblx0XHRcdC8vdmVyaWZ5IHVzZXJzIGNyZWRlbnRpYWxzXG5cdFx0XHRkYXRhYmFzZS5Mb2dpblJlZ2lzdGVyZWRVc2VyKHZtLmlucHV0cy5lbWFpbCwgdm0uaW5wdXRzLnBhc3N3b3JkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24odXNlckNyZWRlbnRpYWxzKSB7XG5cdFx0XHRcdC8vaWYgbm8gdHJvdWJsZSBsb2dnaW5nIGluIHVwZGF0ZSBlcnJvciBvYmplY3Rcblx0XHRcdFx0dm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzID0gdHJ1ZTtcblxuXHRcdFx0XHQvL3VzZSB1aWQgdG8gY29sbGVjdCB1c2VyIGJpb1xuXHRcdFx0XHRkYXRhYmFzZS5nZXRVc2VyQmlvKHVzZXJDcmVkZW50aWFscy51aWQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXJCaW8pIHtcblx0XHRcdFx0XHQvL3VwZGF0ZSB1c2VyRGF0YSBtb2RlbCB3aXRoIHVzZXJCaW9cblx0XHRcdFx0XHRyZWdpc3RlcmVkVXNlckRhdGEudXBkYXRlQmlvKHVzZXJCaW8pO1xuXG5cdFx0XHRcdFx0Ly9sb2FkIHVzZXIgZXZlbnRzXG5cdFx0XHRcdFx0ZGF0YWJhc2UuZ2V0VXNlckV2ZW50cyh1c2VyQ3JlZGVudGlhbHMudWlkKVxuXHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKGFsbEV2ZW50c0ZvclRoaXNVc2VyKSB7XG5cdFx0XHRcdFx0XHQvL3VwZGF0ZSB1c2VyRGF0YSBtb2RlbCB3aXRoIHVzZXJFdmVudHNcblx0XHRcdFx0XHRcdHJlZ2lzdGVyZWRVc2VyRGF0YS51cGRhdGVBbGxVc2VyRXZlbnRzKGFsbEV2ZW50c0ZvclRoaXNVc2VyKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5jYXRjaChmdW5jdGlvbihtZXNzYWdlKSB7ICRsb2cuaW5mbyhtZXNzYWdlKTsgfSlcblxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyBcblx0XHRcdFx0Ly9pZiB0aGVyZSB3YXMgYW4gZXJyb3IgbG9nZ2luZyBpbiwgbGV0IHRoZSB1c2VyIGtub3dcblx0XHRcdFx0dm0uZXJyb3JzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRcdFx0XHR2bS5lcnJvcnMucGFzc2VzQWxsVGVzdHMgPSBmYWxzZTtcblx0XHRcdH0pXG5cblx0XHRcdC8vcmVkaXJlY3QgdG8gdGhlIG5leHQgcGFnZSBcblx0XHRcdHJlZ2lzdGVyZWRVc2VyU2hlcnBhLnJlZGlyZWN0VG8oJy91c2VySW5mb3JtYXRpb24nLCAnMjM4OTQ3MycpO1xuXHRcdH1cblxuXHR9XG5cblx0Ly9ydW4gY29tbWFuZHNcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCd0b3BNZW51Q29udHJvbGxlcicsIHRvcE1lbnVDb250cm9sbGVyKTtcblxudG9wTWVudUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRkb2N1bWVudCcsICckd2luZG93J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdG9wTWVudUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sICRkb2N1bWVudCwgJHdpbmRvdykge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZmJVUkwgPSAnaHR0cHM6Ly9tZWV0dXBwbGFubmVyLmZpcmViYXNlaW8uY29tLyc7XG5cdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXG5cdC8vbG9jYWwgdmFyaWFibGVzXG5cdHZtLmxvZ2dlZEluID0gZmFsc2VcblxuXHQvL3N0eWxlcyB2YXJpYWJsZXNcblx0XG5cdC8vZXZlbnQgbGlzdGVuZXJzXG5cdGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gJGRvY3VtZW50KSB7XG5cdCAgICAkZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9nLmluZm8oJ2FkZGluZyBGYXN0Q2xpY2snKTtcblx0ICAgICAgICBGYXN0Q2xpY2suYXR0YWNoKCRkb2N1bWVudC5ib2R5KTtcblx0ICAgIH0sIGZhbHNlKTtcblx0fVxuXG5cdGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5iaW5kKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcblx0XHR2bS5vblJlc2l6ZUZ1bmN0aW9uKCk7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9KTtcblxuXHRhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRpZigkd2luZG93Lm91dGVyV2lkdGggPCA2MDApIHtcblx0XHRcdHZtLm9uUmVzaXplRnVuY3Rpb24oKTtcblx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblx0XHR9XG5cdH0pXG5cdC8vZHluYW1pY2FsbHkgc2V0IGlucHV0IHdpZHRoXG5cblxuXHQvLyBDcmVhdGUgYSBjYWxsYmFjayB3aGljaCBsb2dzIHRoZSBjdXJyZW50IGF1dGggc3RhdGVcblx0ZnVuY3Rpb24gaW5pdCgpIHtcblx0XHR2bS5vblJlc2l6ZUZ1bmN0aW9uKCk7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXV0aERhdGFDYWxsYmFjayhhdXRoRGF0YSkge1xuXHQgIGlmIChhdXRoRGF0YSkge1xuXHQgICAgJGxvZy5pbmZvKFwiVXNlciBcIiArIGF1dGhEYXRhLnVpZCArIFwiIGlzIGxvZ2dlZCBpbiB3aXRoIFwiICsgYXV0aERhdGEucHJvdmlkZXIpO1xuXHQgICAgdm0ubG9nZ2VkSW4gPSB0cnVlO1xuXHQgIH0gZWxzZSB7XG5cdCAgICAkbG9nLmluZm8oXCJVc2VyIGlzIGxvZ2dlZCBvdXRcIik7XG5cdCAgICB2bS5sb2dnZWRJbiA9IGZhbHNlO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZGlyZWN0KHBhdGgsIHVzZXJEYXRhKSB7XG5cdFx0dmFyIGZ1bGxQYXRoID0gcGF0aCArICcvJyArIHVzZXJEYXRhLnVpZCArICcvJyArIHVzZXJEYXRhLnRva2VuO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0XHQvLyRzY29wZS4kYXBwbHkoKTtcblx0fVxuXG5cdC8vdm0gYWNjZXNzaWJsZSBtZXRob2RzXG5cdHZtLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2cuaW5mbygnbG9nZ2luZyBvdXQhJyk7XG5cdFx0dm0ubG9nZ2VkSW4gPSBmYWxzZTtcblx0XHRyZWYudW5hdXRoKCk7XG5cdFx0cmVkaXJlY3QoJy8nLCB7dWlkOicnLCB0b2tlbjonJ30pO1xuXHR9XG5cblx0dm0ubmF2QmFyTG9naW5SZWdpc3RlcmVkVXNlciA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2cuaW5mbygnbGF1bmNoaW5nIGxvZ2luJyk7XG5cdFx0aWYodHJ1ZSkge1xuXHRcdC8vaWYodm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHRcdFx0Ly9hdXRoZW50aWNhdGUgdGhlIHVzZXJcblx0XHRcdHJlZi5hdXRoV2l0aFBhc3N3b3JkKHtcblx0XHRcdFx0ZW1haWw6IHZtLm5hdmJhclVzZXJFbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHZtLm5hdmJhclVzZXJQYXNzXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvciwgYXV0aERhdGEpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0Vycm9yIExvZ2dpbmcgSW46ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdMb2dnZWQgSW4gc3VjY2Vzc2Z1bGx5OiAnICsgYXV0aERhdGEudWlkKTtcblx0XHRcdFx0XHQkbG9nLmluZm8oYXV0aERhdGEpO1xuXHRcdFx0XHRcdC8vc2F2ZSBhbGwgdGhlIGRhdGFcblxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGJpb1xuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGV2ZW50c1xuXG5cdFx0XHRcdFx0Ly9yZWRpcmVjdFxuXHRcdFx0XHRcdHJlZGlyZWN0KCcvdXNlckluZm9ybWF0aW9uJywgYXV0aERhdGEpO1xuXHRcdFx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblxuXHRcdFx0XHRcdC8vY2xpY2sgY2xvc2VkIHRoZSBuYXZiYXJcblx0XHRcdFx0XHRhbmd1bGFyLmVsZW1lbnQoJy5uYXZiYXItdG9nZ2xlJykuY2xpY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblxuXG5cdFx0fVxuXG5cdH1cblxuXHR2bS5vblJlc2l6ZUZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5hdmJhcklucHV0cyA9IGFuZ3VsYXIuZWxlbWVudCgnLm5hdmJhcklucHV0cycpO1xuXHRcdG5hdmJhcklucHV0cy5jc3MoJ3dpZHRoJywgKCR3aW5kb3cub3V0ZXJXaWR0aCAtIDI2KSArICdweCcpO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNhbGxiYWNrIHRvIGJlIGZpcmVkIGV2ZXJ5IHRpbWUgYXV0aCBzdGF0ZSBjaGFuZ2VzXG5cdHJlZi5vbkF1dGgoYXV0aERhdGFDYWxsYmFjayk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignVXNlckV2ZW50c0NvbnRyb2xsZXInLCBVc2VyRXZlbnRzQ29udHJvbGxlcik7XG5cblVzZXJFdmVudHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICckcm91dGVQYXJhbXMnLCAnJGZpcmViYXNlT2JqZWN0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gVXNlckV2ZW50c0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgJGZpcmViYXNlT2JqZWN0KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBmYlVSTCA9ICdodHRwczovL21lZXR1cHBsYW5uZXIuZmlyZWJhc2Vpby5jb20vJztcblx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdHZhciB1c2VyRXZlbnRzID0gcmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLmNoaWxkKCdldmVudHMnKTtcblx0dmFyIGN1cnJlbnRVc2VyQmlvID0gcmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLmNoaWxkKCdiaW8nKTtcblx0dmFyIHVzZXJFdmVudHNTbmFwc2hvdDtcblxuXHQvL2JpbmRpbmcgaW1wb3J0YW50IHZhcmlhYmxlc1xuXHR2bS5ldmVudHMgPSAkZmlyZWJhc2VPYmplY3QodXNlckV2ZW50cyk7XG5cblx0dm0uc2hvd0RlY2xpbmUgPSBmYWxzZTtcblx0XG5cdGN1cnJlbnRVc2VyQmlvLmNoaWxkKCduYW1lJykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHR2bS5jdXJyZW50VXNlck5hbWUgPSBzbmFwc2hvdC52YWwoKTtcblx0XHQkbG9nLmluZm8oJ2dvdCB0aGUgdXNlciBuYW1lJyk7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9LCBmdW5jdGlvbihlcnJvck9iamVjdCkge1xuXHRcdCRsb2cuaW5mbyhcIlRoZSByZWFkIGZhaWxlZDogXCIgKyBlcnJvck9iamVjdC5jb2RlKTtcblx0fSk7XG5cblx0Ly9kZWNsYXJlIGxvY2FsIG1ldGhvZHNcblx0ZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlRXZlbnRJRChkYXRlLCBub09mRXZlbnRzQWxyZWFkeSkge1xuXHRcdHJldHVybiAoZGF0ZSAqIDEwKSArIG5vT2ZFdmVudHNBbHJlYWR5O1xuXHR9XG5cblx0Ly9kZWNsYXJlIHZpZXcgbWV0aG9kc1xuXHRmdW5jdGlvbiBldmVudFJlZGlyZWN0KHBhdGgsIGV2ZW50SUQsIGhvc3RJZCkge1xuXHRcdHZhciBmdWxsUGF0aCA9IHBhdGggKyAnLycgKyBldmVudElEICsgJy8nICsgaG9zdElkICsgJy8nKyAkcm91dGVQYXJhbXMudWlkICsgJy8nICsgJHJvdXRlUGFyYW1zLnRva2VuO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0fVxuXG5cdHZtLmV2ZW50c0FyZUJlaW5nSG9zdGVkID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGV2ZW50Rm91bmQgPSBmYWxzZTtcblx0XHRmb3IoZWxlbWVudCBpbiB2bS5ldmVudHMuaG9zdGluZykge1xuXHRcdFx0aWYoZWxlbWVudCAhPSAndXBkYXRlZCcpe1xuXHRcdFx0XHRldmVudEZvdW5kID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGV2ZW50Rm91bmQ7XG5cdH1cblxuXHR2bS5ldmVudEludml0YXRpb25zUGVuZGluZyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBldmVudEZvdW5kID0gZmFsc2U7XG5cdFx0Zm9yKGVsZW1lbnQgaW4gdm0uZXZlbnRzLnBlbmRpbmcpIHtcblx0XHRcdGlmKGVsZW1lbnQgIT0gJ3VwZGF0ZWQnKXtcblx0XHRcdFx0ZXZlbnRGb3VuZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBldmVudEZvdW5kO1xuXHR9XG5cblx0dm0uYXR0ZW5kaW5nRXZlbnRzID0gZnVuY3Rpb24oZ3Vlc3RMaXN0KSB7XG5cdFx0dmFyIGV2ZW50Rm91bmQgPSBmYWxzZTtcblx0XHRmb3IoZWxlbWVudCBpbiB2bS5ldmVudHMuYXR0ZW5kaW5nKSB7XG5cdFx0XHRpZihlbGVtZW50ICE9ICd1cGRhdGVkJyl7XG5cdFx0XHRcdGV2ZW50Rm91bmQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZXZlbnRGb3VuZDtcblx0fVxuXG5cdHZtLnBlcmNlbnRSU1ZQZWQgPSBmdW5jdGlvbihndWVzdExpc3QpIHtcdFx0XG5cdFx0aWYoZ3Vlc3RMaXN0KSB7XG5cdFx0XHRyZXR1cm4gKHZtLnRvdGFsQXR0ZW5kaW5nKGd1ZXN0TGlzdCkgLyB2bS50b3RhbEludml0ZWQoZ3Vlc3RMaXN0KSkgKiAxMDA7XG5cdFx0fVxuXHRcdGVsc2UgcmV0dXJuIDA7XG5cdH1cblxuXHR2bS50b3RhbEF0dGVuZGluZyA9IGZ1bmN0aW9uKGd1ZXN0TGlzdCkge1xuXHRcdGlmKGd1ZXN0TGlzdCkge1xuXHRcdFx0dmFyIGF0dGVuZGluZyA9IDA7XG5cdFx0XHRhbmd1bGFyLmZvckVhY2goZ3Vlc3RMaXN0LCBmdW5jdGlvbihndWVzdCwgaWQpIHtcblx0XHRcdFx0aWYoZ3Vlc3QuYXR0ZW5kaW5nID09IHRydWUpIGF0dGVuZGluZysrO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gYXR0ZW5kaW5nO1xuXHRcdH1cblx0XHRlbHNlIHJldHVybiAwO1xuXHR9XG5cblx0dm0udG90YWxJbnZpdGVkID0gZnVuY3Rpb24oZ3Vlc3RMaXN0KSB7XG5cdFx0aWYoZ3Vlc3RMaXN0KSB7XG5cdFx0XHR2YXIgaW52aXRlZCA9IDA7XG5cdFx0XHRhbmd1bGFyLmZvckVhY2goZ3Vlc3RMaXN0LCBmdW5jdGlvbihndWVzdCwgaWQpIHtcblx0XHRcdFx0aW52aXRlZCsrO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gaW52aXRlZDtcblx0XHR9XG5cdFx0ZWxzZSByZXR1cm4gMDtcblx0fVxuXG5cdHZtLmFjY2VwdEV2ZW50SW52aXRhdGlvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0Lypcblx0XHQkbG9nLmluZm8oZXZlbnQuaG9zdCk7XG5cdFx0JGxvZy5pbmZvKGV2ZW50LmlkKTtcblx0XHQvL3VwZGF0ZSBob3N0cycgbGlzdHNcblx0XHRyZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoZXZlbnQuaG9zdCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdob3N0aW5nJykuY2hpbGQoZXZlbnQuaWQpLmNoaWxkKCdndWVzdExpc3QnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS51cGRhdGUoe1xuXHRcdFx0YXR0ZW5kaW5nOiB0cnVlLFxuXHRcdFx0c3RhdHVzOiAnYXR0bmRuZydcblx0XHR9KTtcblxuXHRcdC8vdXBkYXRlIGd1ZXN0J3MgbGlzdHNcblx0XHQvL2FkZCB0byB0aGUgYXR0ZW5kaW5nIGxpc3QgLSBvbiB0aGUgc2VydmVyXG5cdFx0dXNlckV2ZW50cy5jaGlsZCgnYXR0ZW5kaW5nJykuY2hpbGQoZXZlbnQuaG9zdCkuY2hpbGQoZXZlbnQuaWQpLnNldCh7XG5cdFx0XHRpZDogZXZlbnQuaWQsXG5cdFx0XHRob3N0OiBldmVudC5ob3N0LFxuXHRcdFx0ZXZlbnRUaW1lczoge1xuXHRcdFx0XHRzdGFydDogdm0uZXZlbnRzLnBlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdLmV2ZW50VGltZXMuc3RhcnQsXG5cdFx0XHRcdGVuZDogdm0uZXZlbnRzLnBlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdLmV2ZW50VGltZXMuZW5kXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogdm0uZXZlbnRzLnBlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdLm5hbWVcblx0XHR9KTtcblx0XHQvL2FkZCB0byB0aGUgYXR0ZW5kaW5nIGxpc3QgLSBpbiB0aGUgYnJvd3NlclxuXHRcdHZtLmV2ZW50cy5hdHRlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdID0ge1xuXHRcdFx0aWQ6IGV2ZW50LmlkLFxuXHRcdFx0aG9zdDogZXZlbnQuaG9zdCxcblx0XHRcdGV2ZW50VGltZXM6IHtcblx0XHRcdFx0c3RhcnQ6IHZtLmV2ZW50cy5wZW5kaW5nW2V2ZW50Lmhvc3RdW2V2ZW50LmlkXS5ldmVudFRpbWVzLnN0YXJ0LFxuXHRcdFx0XHRlbmQ6IHZtLmV2ZW50cy5wZW5kaW5nW2V2ZW50Lmhvc3RdW2V2ZW50LmlkXS5ldmVudFRpbWVzLmVuZFxuXHRcdFx0fSxcblx0XHRcdG5hbWU6IHZtLmV2ZW50cy5wZW5kaW5nW2V2ZW50Lmhvc3RdW2V2ZW50LmlkXS5uYW1lXG5cdFx0fTtcblxuXHRcdC8vcmVtb3ZlIGZyb20gdGhlIHBlbmRpbmcgbGlzdCAtIG9uIHRoZSBzZXJ2ZXJcblx0XHR1c2VyRXZlbnRzLmNoaWxkKCdwZW5kaW5nJykuY2hpbGQoZXZlbnQuaG9zdCkuY2hpbGQoZXZlbnQuaWQpLnJlbW92ZSgpO1xuXHRcdC8vcmVtb3ZlIGZyb20gdGhlIHBlbmRpbmcgbGlzdCAtIGluIHRoZSBicm93c2VyXG5cdFx0dm0uZXZlbnRzLnBlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdID0ge307XG5cdFx0Ki9cblx0fVxuXG5cdHZtLnJlZGlyZWN0VG9Ib3N0ZWRFdmVudCA9IGZ1bmN0aW9uKGV2ZW50SUQpIHtcblx0XHQkbG9nLmluZm8oJ3lvdVxcJ3JlIGFjY2Vzc2luZyBldmVudCAnICsgZXZlbnRJRCk7XG5cblx0XHQvL3JlZGlyZWN0IHRvIHRoZSBldmVudFxuXHRcdGV2ZW50UmVkaXJlY3QoJy9ldmVudCcsIGV2ZW50SUQsICRyb3V0ZVBhcmFtcy51aWQpO1xuXHR9XG5cblx0dm0ucmVkaXJlY3RUbzNyZFBhcnR5RXZlbnQgPSBmdW5jdGlvbihldmVudCwgaW52aXRlU3RhdHVzKSB7XG5cdFx0JGxvZy5pbmZvKGV2ZW50KTtcblxuXHRcdC8vZ2V0dGluZyB0aGUgaG9zdCdzIElkXG5cdFx0aWYoaW52aXRlU3RhdHVzID09ICdwZW5kaW5nJykge1xuXHRcdFx0JGxvZy5pbmZvKCdhY2Nlc3NpbmcgZnJvbSBhIHBlbmRpbmcgaW52aXRhdGlvbicpO1xuXHRcdFx0JGxvZy5pbmZvKGV2ZW50KTtcblx0XHRcdGV2ZW50UmVkaXJlY3QoJy9ldmVudCcsIGV2ZW50LmlkLCBldmVudC5ob3N0KTtcblxuXHRcdH0gZWxzZSBpZihpbnZpdGVTdGF0dXMgPT0gJ2F0dGVuZGluZycpIHtcblx0XHRcdCRsb2cuaW5mbygnYWNjZXNzaW5nIGZyb20gYW4gcnN2cGVkIGludml0YXRpb24nKTtcblx0XHRcdGV2ZW50UmVkaXJlY3QoJy9ldmVudCcsIGV2ZW50LmlkLCBldmVudC5ob3N0KTtcblx0XHR9XG5cblx0XHQvL3JlZGlyZWN0aW5nIHRvIHRoZSBldmVudFxuXG5cdH1cblxuXHR2bS5jcmVhdGVOZXdFdmVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2cuaW5mbygneW91XFwncmUgY3JlYXRpbmcgYSBuZXcgZXZlbnQhJyk7XG5cblx0XHQvL2RlZmluZSB0aGUgZXZlbnRJRFxuXHRcdHZhciBkYXRlID0gbmV3IERhdGUoKTsgXG5cdFx0XHRpZih2bS5ldmVudHMuaG9zdGluZykgbm9PZkV2ZW50c0FscmVhZHkgPSBPYmplY3Qua2V5cyh2bS5ldmVudHMuaG9zdGluZykubGVuZ3RoO1xuXHRcdFx0ZWxzZSBub09mRXZlbnRzQWxyZWFkeSA9IDA7XG5cdFx0dmFyIGV2ZW50SUQgPSBnZW5lcmF0ZUV2ZW50SUQoZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGUpLCBub09mRXZlbnRzQWxyZWFkeSk7XG5cblx0XHQvL2NyZWF0ZSBldmVudCBtb2RlbCB0byBzdGFydCB3aXRoXG5cdFx0Ly8kbG9nLmluZm8odm0uZXZlbnRzWydob3N0aW5nJ10pO1xuXHRcdHZtLmV2ZW50cy5ob3N0aW5nW2V2ZW50SURdID0ge1xuXHRcdFx0aWQ6IGV2ZW50SUQsXG5cdFx0XHRldmVudFRpbWVzOiB7XG5cdFx0XHRcdHN0YXJ0OiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZSksXG5cdFx0XHRcdGVuZDogZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGUpXG5cdFx0XHR9LFxuXHRcdFx0aG9zdDogeyBcblx0XHRcdFx0aWQ6ICRyb3V0ZVBhcmFtcy51aWQsXG5cdFx0XHRcdG5hbWU6IHZtLmN1cnJlbnRVc2VyTmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvL2RlbGV0ZSB0aGUgJ3VwZGF0ZWQnIGZpZWxkXG5cdFx0aWYodm0uZXZlbnRzLmhvc3RpbmcudXBkYXRlZCA9PSAnJyB8fCB2bS5ldmVudHMuaG9zdGluZy51cGRhdGVkKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2RlbGV0aW5nIHRoZSB1cGRhdGVkIGZpZWxkJyk7XG5cdFx0XHRkZWxldGUgdm0uZXZlbnRzLmhvc3RpbmcudXBkYXRlZDtcblx0XHR9XG5cdFx0Ly9zYXZlIHRoZSBuZXcgZXZlbnRcblx0XHQvKlxuXHRcdHZtLmV2ZW50cy4kc2F2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQkbG9nLmluZm8oJ1Byb2ZpbGUgc2F2ZWQhJyk7XG5cdFx0XHQkbG9nLmluZm8odm0uZXZlbnRzLmhvc3RpbmdbZXZlbnRJRF0pO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkbG9nLmluZm8oJ0Vycm9yIScpO1xuXHRcdH0pOyovXG5cblx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXcgRXZlbnQgUGFnZVxuXHRcdGV2ZW50UmVkaXJlY3QoJy9ldmVudCcsIGV2ZW50SUQsICRyb3V0ZVBhcmFtcy51aWQpO1xuXHR9XG5cblx0Ly9leGVjdXRlIHNjcmlwdHNcblx0JGxvZy5pbmZvKCdpbnRvIHRoZSB1c2VyIEV2ZW50cyBjb250cm9sbGVyJyk7XG5cdCRsb2cuaW5mbyh2bS5ldmVudHMpO1xuXG59XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdVc2VySW5mb3JtYXRpb25Db250cm9sbGVyJywgVXNlckluZm9ybWF0aW9uQ29udHJvbGxlcik7XG5cblVzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckZG9jdW1lbnQnLCAndXNlckRhdGEnLCAndHJhZmZpY1ZhbGV0J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gVXNlckluZm9ybWF0aW9uQ29udHJvbGxlcigkbG9nLCAkZG9jdW1lbnQsIHVzZXJEYXRhLCB0cmFmZmljVmFsZXQpIHtcblx0dmFyIHZtID0gdGhpcztcblx0XG5cdC8vbG9jYWwgdmFyaWFibGVzXG5cdHZhciBjdXJyZW50VXNlciA9IHVzZXJEYXRhO1xuXG5cdC8vdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0dm0udXNlciA9IHt9O1xuXHR2bS50ZW1wQmlydGhkYXk7XG5cdHZtLnZpZXcgPSB7XG5cdFx0ZGF0YVRvU2F2ZTogZmFsc2UsXG5cdFx0aXNEYXRhOiBmYWxzZSxcblx0XHRidG5Nc3NnOiAnTW92ZSBPbi4uLicsXG5cdFx0cHJvY2VlZEJ0bjogJ2J0biBidG4tcHJpbWFyeSdcblx0fTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblx0ZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9O1xuXG5cdC8vdmlldyBhY2Nlc3NpYmxlIG1ldGhvZHNcblx0dm0uY2hlY2tWYWx1ZXMgPSBmdW5jdGlvbigpIHtcblx0XHRpZiggIShhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLnVzZXIuY29tcGFueSkgfHwgdm0udXNlci5jb21wYW55ID09PSAnJykgfHwgXG5cdFx0XHQhKGFuZ3VsYXIuaXNVbmRlZmluZWQodm0udXNlci50aXRsZSkgfHwgdm0udXNlci50aXRsZSA9PT0gJycpIHx8IFxuXHRcdFx0IShhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLnVzZXIuZG9iKSB8fCB2bS51c2VyLmRvYiA9PT0gJycpKSBcblx0XHR7XG5cdFx0XHR2bS52aWV3LmRhdGFUb1NhdmUgPSB0cnVlO1xuXHRcdFx0dm0udmlldy5wcm9jZWVkQnRuID0gJ2J0biBidG4tc3VjY2Vzcyc7XG5cdFx0XHR2bS52aWV3LmJ0bk1zc2cgPSAnU2F2ZSAmIENvbnRpbnVlJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dm0udmlldy5kYXRhVG9TYXZlID0gZmFsc2U7XG5cdFx0XHR2bS52aWV3LnByb2NlZWRCdG4gPSAnYnRuIGJ0bi1wcmltYXJ5Jztcblx0XHRcdHZtLnZpZXcuYnRuTXNzZyA9ICdNb3ZlIE9uLi4uJztcdFxuXHRcdH1cblxuXHR9XG5cblx0dm0udXBkYXRlRE9CID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0udXNlci5kb2IgPSBkYXRlVGltZVRvVW5peFRpbWUodm0udGVtcEJpcnRoZGF5KTtcblx0fVxuXG5cdHZtLnNhdmVBbmRNb3ZlT24gPSBmdW5jdGlvbigpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciB1c2VySW5mb1NoZXJwYSA9IHRyYWZmaWNWYWxldDtcblxuXHRcdC8vY29udmVydCBET0IgdG8gYmUgc2F2ZVxuXHRcdHZtLnVwZGF0ZURPQigpO1xuXHRcdFxuXHRcdC8vaWYgdGhlcmUgaXMgbmV3IGRhdGEsIHNhdmUgaXRcblx0XHRpZih2bS52aWV3LmlzRGF0YSkge1xuXHRcdFx0Y3VycmVudFVzZXIudXBkYXRlQmlvKHZtLnVzZXIpO1xuXHRcdH1cblx0XHRcblx0XHQvL21vdmUgb25cblx0XHR1c2VySW5mb1NoZXJwYS5yZWRpcmVjdFRvKCcvdXNlckV2ZW50cycsIHZtLnVzZXIudWlkKVxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcblx0XHQkbG9nLmluZm8oJ2luaXRpYWxpemluZyB0aGUgdXNlciBpbmZvcm1hdGlvbiBwYWdlJyk7XG5cdFx0Ly9sb2FkIEZhc3RDbGlja1xuXHRcdC8vRmFzdENsaWNrLmF0dGFjaCgkZG9jdW1lbnQuYm9keSk7XG5cblx0XHQvL2xvYWQgdXNlckRhdGFcblx0XHRjdXJyZW50VXNlci5sb2FkQmlvKClcblx0XHQudGhlbihmdW5jdGlvbih1c2VyRGF0YSkge1xuXHRcdFx0Ly9hc3NpZ24gdXNlciB2YWx1ZXNcblx0XHRcdHZtLnVzZXIgPSB1c2VyRGF0YTtcblxuXHRcdFx0Ly9idWlsZCB0ZW1wQmlydGhkYXlcblx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHVzZXJEYXRhLmRvYikgJiYgdXNlckRhdGEuZG9iICE9PSAnJykge1xuXHRcdFx0XHR2bS50ZW1wQmlydGhkYXkgPSB1bml4VGltZVRvRGF0ZVRpbWUodXNlckRhdGEuZG9iKVxuXHRcdFx0fVxuXG5cdFx0fSk7XG5cdFx0XG5cdFxuXHR9XG5cblx0Ly9ldmVudCBMaXN0ZW5lcnNcblx0LyppZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluICRkb2N1bWVudCkge1xuXHQgICAgJGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcblx0ICAgIFx0Ly9vbiBwYWdlIGxvYWRcblx0ICAgIFx0aW5pdGlhbGl6ZSgpO1xuXHQgICAgICAgIFxuXHQgICAgfSwgZmFsc2UpO1xuXHR9Ki9cblx0Ly9ydW4gcHJvY2Vzc2VzXG5cdGluaXRpYWxpemUoKTsgLy93aXRoIGludGVybmV0IHVzZSB0aGUgZXZlbnQgbGlzdGVuZXIgaW5zdGVhZFxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ2F1dGhTZXJ2aWNlJywgYXV0aFNlcnZpY2UpO1xuXG5hdXRoU2VydmljZS4kaW5qZWN0ID0gWyckbG9nJywgJyRxJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGF1dGhTZXJ2aWNlKCRsb2csICRxLCAkbG9jYXRpb24pIHtcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHR2YXIgYWxsQXV0aFNlcnZpY2VzID0ge1xuXHRcdGlzTG9nZ2VkSW46IGlzTG9nZ2VkSW5cblx0fTtcblxuXHRmdW5jdGlvbiBhdXRoRGF0YUNhbGxiYWNrKGF1dGhEYXRhKSB7XG5cdCAgXG5cdCAgaWYgKGF1dGhEYXRhKSB7XG5cdCAgICAkbG9nLmluZm8oXCJVc2VyIFwiICsgYXV0aERhdGEudWlkICsgXCIgaXMgbG9nZ2VkIGluIHdpdGggXCIgKyBhdXRoRGF0YS5wcm92aWRlcik7XG5cdCAgfSBlbHNlIHtcblx0ICAgICRsb2cuaW5mbyhcIlVzZXIgaXMgbG9nZ2VkIG91dC4uLmR1bXBpbmcgdGhlbSBiYWNrIHRvIGxhbmRpbmcgcGFnZVwiKTtcblx0ICAgIC8vZHVtcCB0aGUgdXNlciBiYWNrIG91dFxuXHQgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuXHRcdC8vY2hlY2sgdGhlIHVzZXIgYXV0aGVudGljYWlvbiBzdGF0ZVxuXHRcdCRsb2cuaW5mbygnbG9nZ2luZyBmcm9tIHRoZSBpc0xvZ2dlZEluIE1ldGhvZCcpO1xuXHRcdC8vcmVmLm9uQXV0aChhdXRoRGF0YUNhbGxiYWNrKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRcblx0cmV0dXJuIGFsbEF1dGhTZXJ2aWNlcztcblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ2JhY2tlbmRTZXJ2aWNlcycsIGJhY2tlbmRTZXJ2aWNlcyk7XG5cbmJhY2tlbmRTZXJ2aWNlcy4kaW5qZWN0ID0gWyckbG9nJywgJyRxJywgJyR3aW5kb3cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBiYWNrZW5kU2VydmljZXMoJGxvZywgJHEsICR3aW5kb3cpIHtcblx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHR2YXIgZmJVUkwgPSAnaHR0cHM6Ly9tZWV0dXBwbGFubmVyLmZpcmViYXNlaW8uY29tLyc7XG5cdHZhciBhbGxCYWNrZW5kU2VydmljZXMgPSB7XG5cdFx0dXRmOF90b19iNjQ6IHV0ZjhfdG9fYjY0LFxuXHRcdGI2NF90b191dGY4OiBiNjRfdG9fdXRmOCxcblx0XHR1bml4VGltZVRvRGF0ZVRpbWU6IHVuaXhUaW1lVG9EYXRlVGltZSxcblx0XHRkYXRlVGltZVRvVW5peFRpbWU6IGRhdGVUaW1lVG9Vbml4VGltZSxcdFx0XG5cdFx0Y3JlYXRlTmV3VXNlcjogY3JlYXRlTmV3VXNlcixcblx0XHRMb2dpblJlZ2lzdGVyZWRVc2VyOiBMb2dpblJlZ2lzdGVyZWRVc2VyLFxuXHRcdGFkZE5ld1VzZXJUb0RhdGFiYXNlOiBhZGROZXdVc2VyVG9EYXRhYmFzZSxcblx0XHRhZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3Q6IGFkZE5ld1VzZXJUb1JlZ1VzZXJzTGlzdCxcblx0XHR1cGxvYWRVc2VyRGF0YTogdXBsb2FkVXNlckRhdGEsXG5cdFx0ZG93bmxvYWRVc2VyRGF0YTogZG93bmxvYWRVc2VyRGF0YSxcblx0XHRnZXRVc2VyQmlvOiBnZXRVc2VyQmlvLFxuXHRcdGdldFVzZXJFdmVudHM6IGdldFVzZXJFdmVudHNcblx0fTtcblxuXHRmdW5jdGlvbiB1dGY4X3RvX2I2NChzdHIpIHtcblx0XHRyZXR1cm4gYnRvYShzdHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYjY0X3RvX3V0Zjgoc3RyKSB7XG4gICAgXHRyZXR1cm4gYXRvYihzdHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH1cblxuXHRmdW5jdGlvbiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVOZXdVc2VyKGVtYWlsLCBwYXNzd29yZCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZmlyZUJhc2VBY2NvdW50cyA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0XG5cdFx0Ly9yZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQvKmZpcmVCYXNlQWNjb3VudHMuY3JlYXRlVXNlcih7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbWFpbDogZW1haWwsXG5cdFx0XHRcdHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdFx0XG5cdFx0XHR9LGZ1bmN0aW9uKGVycm9yLCB1c2VyRGF0YSkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnRXJyb3IgY3JlYXRpbmcgdXNlcjogJyArIGVycm9yKTtcblxuXHRcdFx0XHRlbHNlIHJlc29sdmUodXNlckRhdGEpO1xuXHRcdFx0fSovXG5cdFx0XHQkd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlc29sdmUoe3VpZDoxMjM0NTY3IH0pO1xuXHRcdFx0fSwgMjAwMCk7XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGROZXdVc2VyVG9EYXRhYmFzZSh1aWQsIG5hbWUsIGVtYWlsKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBhcHBVc2VycyA9IGFwcC5jaGlsZCgnVXNlcnMvJyArIHVpZCk7XG5cdFx0dmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdC8vcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFxuXHRcdFx0LyphcHBVc2Vycy5zZXQoeyBcblx0XHRcdFx0J2Jpbyc6IHtcblx0XHRcdFx0XHQnbmFtZSc6IG5hbWUsXG5cdFx0XHRcdFx0J2VtYWlsJzogZW1haWxcblx0XHRcdFx0fSxcblx0XHRcdFx0J2V2ZW50cyc6IHtcblx0XHRcdFx0XHQncGVuZGluZyc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2hvc3RpbmcnOiB7XG5cdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCdhdHRlbmRpbmcnOiB7XG5cdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCdjb21wbGV0ZWQnOiB7XG5cdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoJ0RhdGEgY291bGQgbm90IGJlIHNhdmVkOiAnICsgZXJyb3IpO1xuXHRcdFx0XHRcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdEYXRhIHNhdmVkIHN1Y2Nlc3NmdWxseS4nKTtcblxuXHRcdFx0fSk7Ki9cblxuXHRcdFx0JHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXNvbHZlKCdEYXRhIHNhdmVkIHN1Y2Nlc3NmdWxseS4nKTtcblx0XHRcdH0sIDIwMDApO1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZE5ld1VzZXJUb1JlZ1VzZXJzTGlzdCh1aWQsIGVtYWlsKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBSZWdpc3RlcmVkVXNlcnNMaXN0ID0gYXBwLmNoaWxkKCdVaWRzJykuY2hpbGQodXRmOF90b19iNjQoZW1haWwpKTtcblxuXHRcdC8vcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFxuXHRcdFx0LypSZWdpc3RlcmVkVXNlcnNMaXN0LnNldCh1aWQsIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoXCJEYXRhIGNvdWxkIG5vdCBiZSBzYXZlZC4gXCIgKyBlcnJvcik7XG5cdFx0XHRcdGVsc2UgcmVzb2x2ZShcInVpZCBjcmVhdGVkIHN1Y2Vzc2Z1bGx5LlwiKTtcblx0XHRcdH0pOyovXG5cblx0XHRcdCR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzb2x2ZShcInVpZCBjcmVhdGVkIHN1Y2Vzc2Z1bGx5LlwiKTtcblx0XHRcdH0sIDIwMDApO1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIExvZ2luUmVnaXN0ZXJlZFVzZXIoZW1haWwsIHBhc3N3b3JkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdFxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0LyovL2F1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0YXBwLmF1dGhXaXRoUGFzc3dvcmQoe1xuXG5cdFx0XHRcdGVtYWlsOiBlbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yLCBhdXRoRGF0YSkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoJ0Vycm9yIExvZ2dpbmcgSW46ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdMb2dnZWQgSW4gc3VjY2Vzc2Z1bGx5OiAnICsgYXV0aERhdGEudWlkKTtcblx0XHRcdFx0XHRyZXNvbHZlKGF1dGhEYXRhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTsqL1xuXG5cdFx0XHQkd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlc29sdmUoeyB1aWQ6ICcyMDk4c2otZGppc285Mi1zamlyJyB9KTtcblx0XHRcdH0sIDIwMDApO1xuXG5cdFx0fSk7XG5cdFx0XG5cdH1cblxuXHRmdW5jdGlvbiB1cGxvYWRVc2VyRGF0YShhbGxVc2VyRGF0YSkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgY3VycmVudFVzZXIgPSBhcHAuY2hpbGQoJ1VzZXJzLycgKyBhbGxVc2VyRGF0YS51aWQpO1xuXG5cdFx0Ly9yZXR1cm4gdGhlIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL3RoZSBhY3R1YWwgY2FsbFxuXHRcdFx0LypjdXJyZW50VXNlci51cGRhdGUoYWxsVXNlckRhdGEsIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoJ1RoZXJlIHdhcyBhIHByb2JsZW0gdXBkYXRpbmcgdGhhdCByZWNvcmQ6ICcgKyBlcnJvcik7XG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSgnYWxsIHVzZXIgZGF0YSB1cGxvYWRlZCBzdWNjZXNzZnVsbHknKTtcblx0XHRcdH0pOyovXG5cdFx0XHQkd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlc29sdmUoJ2FsbCB1c2VyIGRhdGEgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9LCAyMDAwKTtcblxuXHRcdH0pO1xuXHRcdFxuXHR9XG5cblx0ZnVuY3Rpb24gZG93bmxvYWRVc2VyRGF0YSgpIHtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VXNlckJpbyh1aWQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIHVzZXJCaW8gPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnYmlvJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdGhlIGFjdHVhbCBjYWxsXG5cdFx0XHQvKmNhbGwgZ29lcyBoZXJlKi9cblx0XHRcdCR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzb2x2ZSh7XG5cdFx0XHRcdFx0dWlkOiAnc29haXUwLTkyODNtLW1zb1NBLTJtMy1zcmV3Jyxcblx0XHRcdFx0XHRuYW1lOiAnSWFuIE1jQWxsaXN0ZXInLFxuXHRcdFx0XHRcdGVtYWlsOiAnaWVtY2FsbGlzdGVyQGdtYWlsLmNvbScsXG5cdFx0XHRcdFx0Y29tcGFueTogJycsXG5cdFx0XHRcdFx0dGl0bGU6ICcnXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSwgMjAwMCk7XG5cblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFVzZXJFdmVudHModWlkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciB1c2VyQmlvID0gYXBwLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2JpbycpO1xuXG5cdFx0Ly9yZXR1cm4gdGhlIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL3RoZSBhY3R1YWwgY2FsbFxuXHRcdFx0LypjYWxsIGdvZXMgaGVyZSovXG5cdFx0XHQkd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlc29sdmUoe1xuXHRcdFx0XHRcdGhvc3Rpbmc6IHsgaWQ6ICc5ODM3NDIzJyB9LFxuXHRcdFx0XHRcdHBlbmRpbmc6IHsgaWQ6ICczMjA5NzQyJyB9LFxuXHRcdFx0XHRcdGF0dGVuZGluZzogeyBpZDogJzQwOTgyJyB9LFxuXHRcdFx0XHRcdGNvbXBsZXRlZDogeyBpZDogJzMyOTU3JyB9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSwgMjAwMCk7XG5cblx0XHR9KTtcblx0fVxuXG5cdC8vcmV0dXJuIHRoZSBvYmplY3Rcblx0cmV0dXJuIGFsbEJhY2tlbmRTZXJ2aWNlcztcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5mYWN0b3J5KCd0cmFmZmljVmFsZXQnLCB0cmFmZmljVmFsZXQpO1xuXG50cmFmZmljVmFsZXQuJGluamVjdCA9IFsnJGxvZycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0cmFmZmljVmFsZXQoJGxvZywgJGxvY2F0aW9uKSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIGFsbFRyYWZmaWNDb250cm9scyA9IHtcblx0XHRyZWRpcmVjdFRvOiByZWRpcmVjdFRvXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVkaXJlY3RUbyhwYXRoLCBwYXJhbTEsIHBhcmFtMikge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHBhcmFtMSkpIHtcblx0XHRcdHBhdGggPSBwYXRoICsgJy8nICsgcGFyYW0xO1xuXG5cdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChwYXJhbTIpKSB7XG5cdFx0XHRcdC8vZ28gdG8gcGF0aCB3aXRoIDIgcGFyYW1zXG5cdFx0XHRcdHBhdGggPSBwYXRoICsgJy8nICsgcGFyYW0yO1xuXHRcdFx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIG5vdyB0byAnICsgcGF0aCk7XG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuXHRcdFx0fVxuXHRcdFx0Ly9nbyB3aXRoIDEgcGFyYW1cblx0XHRcdCRsb2cuaW5mbygncmVkaXJlY3Rpbmcgbm93IHRvICcgKyBwYXRoKTtcblx0XHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvL2p1c3QgZ28gdG8gcGF0aFxuXHRcdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyBub3cgdG8gJyArIHBhdGgpO1xuXHRcdFx0JGxvY2F0aW9uLnBhdGgocGF0aCk7XG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gYWxsVHJhZmZpY0NvbnRyb2xzO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ3VzZXJEYXRhJywgdXNlckRhdGEpO1xuXG51c2VyRGF0YS4kaW5qZWN0ID0gWyckbG9nJywgJyRxJywgJ2JhY2tlbmRTZXJ2aWNlcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHVzZXJEYXRhKCRsb2csICRxLCBiYWNrZW5kU2VydmljZXMpIHtcblx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHR2YXIgY3VycmVudFVzZXIgPSB7XG5cdFx0YmlvOiB7IFxuXHRcdFx0dWlkOiAnJyxcblx0XHRcdG5hbWU6ICcnLFxuXHRcdFx0ZW1haWw6ICcnLFxuXHRcdFx0Y29tcGFueTogJycsXG5cdFx0XHR0aXRsZTogJycsXG5cdFx0XHRkb2I6IDBcblx0XHR9LFxuXHRcdGhvc3Rpbmc6IHt9LFxuXHRcdHBlbmRpbmc6IHt9LFxuXHRcdGF0dGVuZGluZzoge30sXG5cdFx0Y29tcGxldGVkOiB7fVxuXHR9O1xuXG5cdHZhciBhbGxVc2VyRGF0YSA9IHtcblx0XHRnZXRVSUQ6IGdldFVJRCxcblx0XHRnZXROYW1lOiBnZXROYW1lLFxuXHRcdGdldEVtYWlsOiBnZXRFbWFpbCxcblx0XHRnZXRDb21wYW55OiBnZXRDb21wYW55LFxuXHRcdGdldFRpdGxlOiBnZXRUaXRsZSxcblx0XHRnZXRET0I6IGdldERPQixcblx0XHRnZXRVc2VyRXZlbnRzOiBnZXRVc2VyRXZlbnRzLFxuXHRcdFxuXHRcdHNldFVJRDogc2V0VUlELFxuXHRcdHNldE5hbWU6IHNldE5hbWUsXG5cdFx0c2V0RW1haWw6IHNldEVtYWlsLFxuXHRcdHNldENvbXBhbnk6IHNldENvbXBhbnksXG5cdFx0c2V0VGl0bGU6IHNldFRpdGxlLFxuXHRcdHNldERPQjogc2V0RE9CLFxuXHRcdHVwZGF0ZVVzZXJFdmVudHM6IHVwZGF0ZVVzZXJFdmVudHMsXG5cdFx0dXBkYXRlQWxsVXNlckV2ZW50czogdXBkYXRlQWxsVXNlckV2ZW50cyxcblx0XHR1cGRhdGVCaW86IHVwZGF0ZUJpbyxcblxuXHRcdHJlbW92ZVVzZXJFdmVudHM6IHJlbW92ZVVzZXJFdmVudHMsXG5cblx0XHRsb2FkUHJpbWFyaWVzOiBsb2FkUHJpbWFyaWVzLFxuXHRcdHdyaXRlQWxsVG9EYXRhYmFzZTogd3JpdGVBbGxUb0RhdGFiYXNlLFxuXHRcdHJlYWRBbGxGcm9tRGF0YWJhc2U6IHJlYWRBbGxGcm9tRGF0YWJhc2UsXG5cdFx0aXNBQmlvOiBpc0FCaW8sXG5cdFx0bG9hZEJpbzogbG9hZEJpb1xuXHR9XG5cblx0Ly9yZWFkIG1ldGhvZHNcblx0ZnVuY3Rpb24gZ2V0VUlEKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci51aWQ7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXROYW1lKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5uYW1lO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RW1haWwoKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmVtYWlsO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q29tcGFueSgpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXIuY29tcGFueTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFRpdGxlKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci50aXRsZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0RE9CKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5kb2I7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyRXZlbnRzKHR5cGUpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXJbdHlwZV07XG5cdH1cblxuXHQvL3VwZGF0ZSBtZXRob2RzXG5cdGZ1bmN0aW9uIHNldFVJRChuYW1lKSB7XG5cdFx0Y3VycmVudFVzZXIudWlkID0gdWlkO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TmFtZShuYW1lKSB7XG5cdFx0Y3VycmVudFVzZXIubmFtZSA9IG5hbWU7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRFbWFpbChlbWFpbCkge1xuXHRcdGN1cnJlbnRVc2VyLmVtYWlsID0gZW1haWw7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDb21wYW55KGNvbXBhbnkpIHtcblx0XHRjdXJyZW50VXNlci5jb21wYW55ID0gY29tcGFueTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc2V0VGl0bGUodGl0bGUpIHtcblx0XHRjdXJyZW50VXNlci50aXRsZSA9IHRpdGxlO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0RE9CKGRvYikge1xuXHRcdGN1cnJlbnRVc2VyLmRvYiA9IGRvYjtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVVzZXJFdmVudHModHlwZSwgZXZlbnQpIHtcblx0XHRjdXJyZW50VXNlclt0eXBlXVtldmVudC5pZF0gPSBldmVudDtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUFsbFVzZXJFdmVudHMoYWxsVXNlckV2ZW50cykge1xuXHRcdGN1cnJlbnRVc2VyLmhvc3RpbmcgPSBhbGxVc2VyRXZlbnRzLmhvc3Rpbmc7XG5cdFx0Y3VycmVudFVzZXIucGVuZGluZyA9IGFsbFVzZXJFdmVudHMucGVuZGluZztcblx0XHRjdXJyZW50VXNlci5hdHRlbmRpbmcgPSBhbGxVc2VyRXZlbnRzLmF0dGVuZGluZztcblx0XHRjdXJyZW50VXNlci5jb21wbGV0ZWQgPSBhbGxVc2VyRXZlbnRzLmNvbXBsZXRlZDtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUJpbyh1c2VyQmlvKSB7XG5cdFx0Ly91cGRhdGUgbG9jYWwgdmFsdWVzXG5cdFx0c2V0TmFtZSh1c2VyQmlvLm5hbWUpO1xuXHRcdHNldEVtYWlsKHVzZXJCaW8uZW1haWwpO1xuXHRcdHNldENvbXBhbnkodXNlckJpby5jb21wYW55KTtcblx0XHRzZXRUaXRsZSh1c2VyQmlvLnRpdGxlKTtcblx0XHRzZXRET0IodXNlckJpby5kb2IpO1xuXHRcdC8vc2F2ZSB0byBkYlxuXHRcdHdyaXRlQWxsVG9EYXRhYmFzZSgpO1xuXHR9XG5cblx0Ly9kZWxldGUgTWV0aG9kc1xuXHRmdW5jdGlvbiByZW1vdmVVc2VyRXZlbnRzKHR5cGUsIGV2ZW50KSB7XG5cdFx0Ly9kb2VzIHRoaXMgd29yaz9cblx0XHRjdXJyZW50VXNlclt0eXBlXVtldmVudC5pZF0ucmVtb3ZlKCk7XG5cdH1cblxuXHQvL290aGVyIE1ldGhvZHNcblx0ZnVuY3Rpb24gbG9hZFByaW1hcmllcyhlbWFpbCwgbmFtZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGVtYWlsKSkgc2V0RW1haWwoZW1haWwpO1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKG5hbWUpKSBzZXRFbWFpbChuYW1lKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlQWxsVG9EYXRhYmFzZSgpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblxuXHRcdGRiLnVwbG9hZFVzZXJEYXRhKGN1cnJlbnRVc2VyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlYWRBbGxGcm9tRGF0YWJhc2UoKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRkYi5kb3dubG9hZFVzZXJEYXRhKClcblx0XHQudGhlbihmdW5jdGlvbih1c2VyRGF0YSkge1xuXHRcdFx0Y3VycmVudFVzZXIgPSB1c2VyRGF0YTtcblx0XHR9KVxuXHR9XG5cblx0ZnVuY3Rpb24gaXNBQmlvKCkge1xuXHRcdGlmKCBjdXJyZW50VXNlci51aWQgIT09ICcnICYmXG5cdFx0XHRjdXJyZW50VXNlci5uYW1lICE9PSAnJyAmJlxuXHRcdFx0Y3VycmVudFVzZXIuZW1haWwgIT09ICcnXG5cdFx0XHQpXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRlbHNlIHJldHVybiBmYWxzZTtcblx0fVxuXHRmdW5jdGlvbiBsb2FkQmlvKCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0Ly9taWdodCBuZWVkIHRvIGdvIG91dCB0byB0aGUgZGIgc28gcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vY2hlY2sgZm9yIGJpb1xuXHRcdFx0aWYoaXNBQmlvKCkpIHtcblx0XHRcdFx0cmVzb2x2ZSgge1xuXHRcdFx0XHRcdG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG5cdFx0XHRcdFx0ZW1haWw6IGN1cnJlbnRVc2VyLmVtYWlsLFxuXHRcdFx0XHRcdGNvbXBhbnk6IGN1cnJlbnRVc2VyLmNvbXBhbnksXG5cdFx0XHRcdFx0dGl0bGU6IGN1cnJlbnRVc2VyLnRpdGxlLFxuXHRcdFx0XHRcdGRvYjogY3VycmVudFVzZXIuZG9iXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9nbyBvdXQgdG8gdGhlIGRiIGJlZm9yZSByZXNvbHZpbmdcblx0XHRcdFx0ZGIuZ2V0VXNlckJpbygpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXJCaW8pIHtcblx0XHRcdFx0XHRyZXNvbHZlKHVzZXJCaW8pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdH0pO1xuXG5cdH1cblx0XG5cdHJldHVybiBhbGxVc2VyRGF0YTtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5mYWN0b3J5KCd2YWxpZGF0aW9uJywgdmFsaWRhdGlvbik7XG5cbnZhbGlkYXRpb24uJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHZhbGlkYXRpb24oJGxvZykge1xuXHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdHZhciBtaW5pbXVtTmFtZUxlbmd0aCA9IDM7XG5cdHZhciBtaW5pbXVtUGFzc0xlbmd0aCA9IDE2O1xuXHR2YXIgbWF4aW11bVBhc3NMZW5ndGggPSAxMDA7XG5cblx0dmFyIGFsbFZhbGlkYXRpb25zID0ge1xuXHRcdHJlcXVpcmVkOiByZXF1aXJlZCxcblx0XHRtaW5OYW1lTGVuZ3RoOiBtaW5OYW1lTGVuZ3RoLFxuXHRcdG1pblBhc3NMZW5ndGg6IG1pblBhc3NMZW5ndGgsXG5cdFx0bWF4UGFzc0xlbmd0aDogbWF4UGFzc0xlbmd0aCxcblx0XHRhdExlYXN0T25lU3ltYm9sOiBhdExlYXN0T25lU3ltYm9sLFxuXHRcdGF0TGVhc3RPbmVOdW1iZXI6IGF0TGVhc3RPbmVOdW1iZXIsXG5cdFx0YXRMZWFzdE9uZUxvd2VyY2FzZTogYXRMZWFzdE9uZUxvd2VyY2FzZSxcblx0XHRhdExlYXN0T25lVXBwZXJjYXNlOiBhdExlYXN0T25lVXBwZXJjYXNlLFxuXHRcdGlsbGVnYWxDaGFyYWN0ZXI6IGlsbGVnYWxDaGFyYWN0ZXIsXG5cdFx0ZW1haWw6IGVtYWlsLFxuXHRcdGRhdGVPZkJpcnRoOiBkYXRlT2ZCaXJ0aFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHJlcXVpcmVkKHZhbHVlKSB7XG5cdFx0aWYoYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiAnVGhpcyBpcyBhIHJlcXVpcmVkIGZpZWxkJztcblx0XHR9IFxuXHR9XG5cblx0ZnVuY3Rpb24gbWluTmFtZUxlbmd0aCh2YWx1ZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0aWYodmFsdWUubGVuZ3RoIDwgbWluaW11bU5hbWVMZW5ndGgpIHJldHVybiAoJ05hbWUgc2hvdWxkIGJlIGF0IGxlYXN0ICcgKyBtaW5pbXVtTmFtZUxlbmd0aCArICcgY2hhcmFjdGVycycpO1xuXHRcdH0gXG5cdH1cblxuXHRmdW5jdGlvbiBtaW5QYXNzTGVuZ3RoKHZhbHVlKSB7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHRpZighKHZhbHVlLmxlbmd0aCA8IG1pbmltdW1QYXNzTGVuZ3RoKSkgcmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIG1heFBhc3NMZW5ndGgodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdGlmKCEodmFsdWUubGVuZ3RoID4gbWF4aW11bVBhc3NMZW5ndGgpKSByZXR1cm4gdHJ1ZTtcblx0XHR9IFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGF0TGVhc3RPbmVTeW1ib2wodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbXFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqXVwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBhdExlYXN0T25lTnVtYmVyKHZhbHVlKSB7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHQvLyBidWlsZCByZWdleFxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiWzAtOV1cIiwgXCJcIik7XG5cblx0XHRcdC8vY2hlY2sgY29uc3RyYXRpbnRcblx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0Ly9zdWNjZXNzOiBhdCBsZWFzdCBvbmUgc3BlY2lhbCBjaGFyYWN0ZXIgZm91bmRcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvL2ZhaWx1cmU6IGRpZG4ndCBmaW5kIGFueSBzcGNpYWwgY2hhcmFjdGVyc1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cbiAgICBmdW5jdGlvbiBhdExlYXN0T25lTG93ZXJjYXNlKHZhbHVlKSB7XG4gICAgXHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16XVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXRMZWFzdE9uZVVwcGVyY2FzZSh2YWx1ZSkge1xuICAgIFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHQvLyBidWlsZCByZWdleFxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW0EtWl1cIiwgXCJcIik7XG5cblx0XHRcdC8vY2hlY2sgY29uc3RyYXRpbnRcblx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0Ly9zdWNjZXNzOiBhdCBsZWFzdCBvbmUgc3BlY2lhbCBjaGFyYWN0ZXIgZm91bmRcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvL2ZhaWx1cmU6IGRpZG4ndCBmaW5kIGFueSBzcGNpYWwgY2hhcmFjdGVyc1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlsbGVnYWxDaGFyYWN0ZXIodmFsdWUpIHtcbiAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0Ly8gYnVpbGQgcmVnZXhcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlteQS16MC05XFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqXVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvL2ZhaWx1cmU6IGRpZG4ndCBmaW5kIGFueSBzcGNpYWwgY2hhcmFjdGVyc1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGVtYWlsKHZhbHVlKSB7XG4gICAgXHQvL2RlZmluZSBjb25zdHJhaW50c1xuICAgIFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XCIsIFwiXCIpO1xuXG4gICAgXHRpZighY29uc3RyYWludC50ZXN0KHZhbHVlKSkgcmV0dXJuICdOb3QgYSB2YWxpZCBlLW1haWwgYWRkcmVzcydcbiAgICBcdFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRhdGVPZkJpcnRoKHZhbHVlKSB7fVxuXG5cdHJldHVybiBhbGxWYWxpZGF0aW9ucztcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb25maWcoY29uZmlnKTtcbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyKSB7ICAgXG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnTGFuZGluZ1BhZ2VDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3NpZ251cCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9uZXdVc2VyU2lnbnVwLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdOZXdVc2VyU2lnblVwQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9sb2dpbicsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9yZWdpc3RlcmVkVXNlckxvZ2luLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdSZWdVc2VyTG9naW5Db250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3VzZXJJbmZvcm1hdGlvbi86dWlkPy86dG9rZW4/Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3VzZXJJbmZvcm1hdGlvbi5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnVXNlckluZm9ybWF0aW9uQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2U6IHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2VcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy91c2VyRXZlbnRzLzp1aWQ/Lzp0b2tlbj8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdXNlckV2ZW50cy5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnVXNlckV2ZW50c0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlOiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC53aGVuKCcvZXZlbnQvOmV2ZW50SWQ/Lzpob3N0SWQ/Lzp1aWQ/Lzp0b2tlbj8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYW5FdmVudC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnQW5FdmVudENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlOiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZShhdXRoU2VydmljZSkge1xuICAgIGF1dGhTZXJ2aWNlLmlzTG9nZ2VkSW4oKTtcbn0iLCJcbmNvbmZpZy4kaW5qZWN0ID0gW1wiJHJvdXRlUHJvdmlkZXJcIl07XG51c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlLiRpbmplY3QgPSBbXCJhdXRoU2VydmljZVwiXTthbmd1bGFyXG5cdC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJywgW1xuXHRcdCduZ1JvdXRlJyxcblx0XHQnbmdUb3VjaCcsXG5cdFx0J2ZpcmViYXNlJ1xuXHRdKTtcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0FuRXZlbnRDb250cm9sbGVyJywgQW5FdmVudENvbnRyb2xsZXIpO1xuXG5BbkV2ZW50Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nLCAnJHJvdXRlUGFyYW1zJywgJyRmaXJlYmFzZU9iamVjdCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIEFuRXZlbnRDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uLCAkcm91dGVQYXJhbXMsICRmaXJlYmFzZU9iamVjdCkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZmJVUkwgPSAnaHR0cHM6Ly9tZWV0dXBwbGFubmVyLmZpcmViYXNlaW8uY29tLyc7XG5cdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHR2YXIgdXNlckV2ZW50cyA9IHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCgkcm91dGVQYXJhbXMuaG9zdElkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ2hvc3RpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMuZXZlbnRJZClcblxuXHQvL2JpbmRpbmcgdG8gdGhlIGV2ZW50XG5cdHZtLmV2ZW50ID0gJGZpcmViYXNlT2JqZWN0KHVzZXJFdmVudHMpXG5cdHZhciByZWdpc3RlcmVkVXNlcnMgPSAkZmlyZWJhc2VPYmplY3QocmVmLmNoaWxkKCdVaWRzJykpO1xuXG5cdC8vcmVxdWlyZWQgZmllbGRzXG5cdHZtLnJlcXVpcmVkSW5wdXRzID0gWycnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJyddO1xuXG5cdC8vTG9jYWwgTWV0aG9kc1xuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdC8vZGVjbGFyZSBhbmQgaW5pdGlhbGl6ZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2bS50ZW1wRGF0ZVRpbWUgPSB7c3RhcnQ6ICcnLCBlbmQ6ICcnfTtcblx0XHR2bS5uZXdHdWVzdCA9IHtuYW1lOiAnJywgZW1haWw6e2FkZHJlc3M6JycsIHZhbGlkOmZhbHNlLCBzdHlsZTp7Y29sb3I6Jyd9fX07XG5cdFx0dm0uc2hvd0lmSG9zdCA9IGZhbHNlO1xuXHRcdHZtLmhpZGVJZkF0dGVuZGluZyA9IHRydWU7XG5cdFx0Ly9zZWN0aW9uc1xuXHRcdHZtLm1hbmFnZVNlY3Rpb25zID0ge1xuXHRcdFx0MToge2FjdGl2ZTogdHJ1ZSwgY29tcGxldGU6IGZhbHNlLCBzdHlsZTp7Y29sb3I6J2JsYWNrJywgJ2JhY2tncm91bmQtY29sb3InOid5ZWxsb3cnfX0sXG5cdFx0XHQyOiB7YWN0aXZlOiBmYWxzZSwgY29tcGxldGU6IGZhbHNlLCBzdHlsZTp7Y29sb3I6J3doaXRlJywgJ2JhY2tncm91bmQtY29sb3InOidncmF5J319LFxuXHRcdFx0Mzoge2FjdGl2ZTogZmFsc2UsIGNvbXBsZXRlOiBmYWxzZSwgc3R5bGU6e2NvbG9yOid3aGl0ZScsICdiYWNrZ3JvdW5kLWNvbG9yJzonZ3JheSd9fVxuXHRcdH07XG5cblx0XHQvL2NoZWNrIHVzZXIgdG8gZGV0ZXJtaW5lIHN0YXRlXG5cdFx0Y2hlY2tGb3JIb3N0KCk7XG5cdFx0Y2hlY2tJZkd1ZXN0SXNBdHRlbmRpbmcoKTtcblxuXHRcdC8vb3BlbiB1cCBzZWN0aW9uc1xuXHRcdGlmKCF2bS5zaG93SWZIb3N0KSBvcGVuQWxsU2VjdGlvbnMoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHV0ZjhfdG9fYjY0KHN0cikge1xuXHRcdHJldHVybiBidG9hKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRfdG9fdXRmOChzdHIpIHtcbiAgICBcdHJldHVybiBhdG9iKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH1cblxuXHRmdW5jdGlvbiBjbGVhbk5ld0d1ZXN0VmFyaWFibGUoKSB7XG5cdFx0dm0ubmV3R3Vlc3QgPSB7bmFtZTogJycsIGVtYWlsOnthZGRyZXNzOicnLCB2YWxpZDpmYWxzZSwgc3R5bGU6e2NvbG9yOicnfX19O1xuXHR9XG5cblx0ZnVuY3Rpb24gaW52aXRlQVJlZ2lzdGVyZWRVc2VyKHVpZCkge1xuXHRcdCRsb2cuaW5mbygnYWRkaW5nIHRoZW0gdG8gdGhlIHJlZ2lzdGVyZWQgdXNlcnMgbGlzdCAnICsgdWlkKTtcblx0XHQvL3NldCB0aGUgbmV3IGV2ZW50XG5cdFx0cmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdwZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJHJvdXRlUGFyYW1zLmV2ZW50SWQpLnNldCh7XG5cdFx0XHRpZDogJHJvdXRlUGFyYW1zLmV2ZW50SWQsXG5cdFx0XHRldmVudFRpbWVzOiB7XG5cdFx0XHRcdHN0YXJ0OiB2bS5ldmVudC5ldmVudFRpbWVzLnN0YXJ0LFxuXHRcdFx0XHRlbmQ6IHZtLmV2ZW50LmV2ZW50VGltZXMuZW5kXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogdm0uZXZlbnQubmFtZSxcblx0XHRcdGhvc3Q6ICRyb3V0ZVBhcmFtcy51aWRcblx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbygndGhlcmUgd2FzIGFuIGVycm9yJyArIGVycm9yKTtcblx0XHR9KTtcblx0XHQvL2lmIHRoZXJlIHdhcyBhbiB1cGRhdGVkIHBsYWNlIGhvbGRlciwgcmVtb3ZlIGl0XG5cdFx0cmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdwZW5kaW5nJykub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0dmFyIGNoZWNrRm9yUGxhY2Vob2xkZXIgPSBzbmFwc2hvdC52YWwoKVxuXHRcdFx0JGxvZy5pbmZvKHNuYXBzaG90LnZhbCgpKTtcblxuXHRcdFx0aWYoY2hlY2tGb3JQbGFjZWhvbGRlci51cGRhdGVkKSB7XG5cdFx0XHRcdCRsb2cuaW5mbygnZGVsZXRpbmcgdXBkYXRlZCcpO1xuXHRcdFx0XHRyZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ3BlbmRpbmcnKS5jaGlsZCgndXBkYXRlZCcpLnJlbW92ZShmdW5jdGlvbihlcnJvck9iamVjdCkge1xuXHRcdFx0XHRcdGlmKGVycm9yT2JqZWN0KSAkbG9nLmluZm8oXCJEZWxldGluZyBmYWlsZWQ6IFwiICsgZXJyb3JPYmplY3QuY29kZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlICRsb2cuaW5mbygnbm90aGluZyB0byBkbycpO1xuXG5cdFx0fSwgZnVuY3Rpb24oZXJyb3JPYmplY3QpIHtcblx0XHRcdGlmKGVycm9yT2JqZWN0KSAkbG9nLmluZm8oXCJUaGUgcmVhZCBmYWlsZWQ6IFwiICsgZXJyb3JPYmplY3QuY29kZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBpbnZpdGVBblVucmVnaXN0ZXJlZFVzZXIodXNlcktleSkge1xuXHRcdCRsb2cuaW5mbygnYWRkaW5nIHRoZW0gdG8gdGhlIFVOUkVHSVNURVJFRCB1c2VycyBsaXN0ICcgKyB1c2VyS2V5KTtcblx0XHRyZWYuY2hpbGQoJ1VucmVnaXN0ZXJlZFVzZXJzJykuY2hpbGQodXNlcktleSkuY2hpbGQoJ3BlbmRpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS5jaGlsZCgkcm91dGVQYXJhbXMuZXZlbnRJZCkuc2V0KHtcblx0XHRcdGlkOiAkcm91dGVQYXJhbXMuZXZlbnRJZCxcblx0XHRcdGhvc3Q6ICRyb3V0ZVBhcmFtcy51aWQsXG5cdFx0XHRldmVudFRpbWVzOiB7XG5cdFx0XHRcdHN0YXJ0OiB2bS5ldmVudC5ldmVudFRpbWVzLnN0YXJ0LFxuXHRcdFx0XHRlbmQ6IHZtLmV2ZW50LmV2ZW50VGltZXMuZW5kXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogdm0uZXZlbnQubmFtZVxuXHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKCd0aGVyZSB3YXMgYW4gZXJyb3InICsgZXJyb3IpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tGb3JIb3N0KCkge1xuXHRcdC8vY2hlY2sgZXZlbnQgaG9zdFxuXHRcdHZhciBhdXRoRGF0YSA9IHJlZi5nZXRBdXRoKCk7XG5cblx0XHRpZihhdXRoRGF0YS51aWQgPT0gJHJvdXRlUGFyYW1zLmhvc3RJZCkge1xuXHRcdFx0JGxvZy5pbmZvKCdpcyB0aGUgaG9zdCcpO1xuXHRcdFx0dm0uc2hvd0lmSG9zdCA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRsb2cuaW5mbygnbm90IHRoZSBob3N0Jyk7XG5cdFx0XHR2bS5zaG93SWZIb3N0ID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tJZkd1ZXN0SXNBdHRlbmRpbmcoKSB7XG5cdFx0aWYoIXZtLnNob3dJZkhvc3QpIHtcblx0XHRcdCRsb2cuaW5mbygnY2hlY2sgZ3Vlc3QgYXR0ZW5kYW5jZScpO1xuXHRcdFx0dXNlckV2ZW50cy5jaGlsZCgnZ3Vlc3RMaXN0Jykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdFx0dmFyIGFsbEd1ZXN0cyA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0XHR2bS5oaWRlSWZBdHRlbmRpbmcgPSAhYWxsR3Vlc3RzWyRyb3V0ZVBhcmFtcy51aWRdLmF0dGVuZGluZztcblx0XHRcdFx0XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBvcGVuQWxsU2VjdGlvbnMoKSB7XG5cdFx0dm0ubWFuYWdlU2VjdGlvbnNbMV0uYWN0aXZlID0gdHJ1ZTtcblx0XHR2bS5tYW5hZ2VTZWN0aW9uc1syXS5hY3RpdmUgPSB0cnVlO1xuXHRcdHZtLm1hbmFnZVNlY3Rpb25zWzNdLmFjdGl2ZSA9IHRydWU7XG5cdH1cblxuXHRmdW5jdGlvbiBzYXZlRXZlbnQoKSB7XG5cdFx0dm0uZXZlbnQuJHNhdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0JGxvZy5pbmZvKCdldmVudCBzYXZlZCcpO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2Vycm9yISAnICsgZXJyb3IpO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly92aWV3IE1ldGhvZFxuXHR2bS5zZXRUZW1wVGltZSA9IGZ1bmN0aW9uKGVuZHBvaW50KSB7XG5cdFx0aWYoZW5kcG9pbnQgPT0gJ3N0YXJ0Jykgdm0udGVtcERhdGVUaW1lLnN0YXJ0ID0gbmV3IERhdGUoKTtcblx0XHRpZihlbmRwb2ludCA9PSAnZW5kJykgdm0udGVtcERhdGVUaW1lLmVuZCA9IG5ldyBEYXRlKCk7XG5cdH1cblxuXHR2bS51bml4VGltZVRvRGF0ZVRpbWUgPSBmdW5jdGlvbiAodW5peFRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0fTtcblxuXHR2bS5kYXRlVGltZVRvVW5peFRpbWUgPSBmdW5jdGlvbiAoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH07XG5cblx0dm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvZy5pbmZvKCdzdWJtaXR0aW5nIHRoZSBmb3JtIG5vdyEnKTtcblx0fVxuXG5cdHZtLmJhY2tUb1VzZXJFdmVudHMgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9jYXRpb24ucGF0aCgnL3VzZXJFdmVudHMvJyArICRyb3V0ZVBhcmFtcy51aWQgKyAnLycgKyAkcm91dGVQYXJhbXMudG9rZW4pO1xuXHR9XG5cblx0dm0uZXZlbnRSZWRpcmVjdCA9IGZ1bmN0aW9uKHBhdGgsIGV2ZW50SUQpIHtcblx0XHR2YXIgZnVsbFBhdGggPSBwYXRoICsgJy8nICsgJHJvdXRlUGFyYW1zLnVpZCArICcvJyArICRyb3V0ZVBhcmFtcy50b2tlbjtcblx0XHQvL3JlZGlyZWN0XG5cdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyB0bzogJyArIGZ1bGxQYXRoKTtcblx0XHQkbG9jYXRpb24ucGF0aChmdWxsUGF0aCk7XG5cdH1cblxuXHR2bS5jaGFuZ2VTZWN0aW9uID0gZnVuY3Rpb24odGFyZ2V0U2VjdGlvbikge1xuXHRcdCRsb2cuaW5mbygnYXJlIHdlIGhlcmUnKTtcblx0XHRmb3IoaSA9IDE7IGkgPD0zOyBpKyspIHtcblx0XHRcdGlmKGk9PXRhcmdldFNlY3Rpb24pIHtcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uYWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uc3R5bGVbJ2JhY2tncm91bmQtY29sb3InXSA9J3llbGxvdyc7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLnN0eWxlWydjb2xvciddID0nYmxhY2snO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLnN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSdncmF5Jztcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uc3R5bGVbJ2NvbG9yJ10gPSd3aGl0ZSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dm0uc2F2ZUV2ZW50VGltZSA9IGZ1bmN0aW9uKGRhdGVUaW1lLCB0YXJnZXQpIHtcblx0XHQvL2lmIHRoaXMgZXZlbnQgZGlkbid0IGhhdmUgYSBzdGFydCB0aW1lLCBjcmVhdGUgaXRcblx0XHRpZighdm0uZXZlbnQuZXZlbnRUaW1lcykgeyBcblx0XHRcdHZtLmV2ZW50LmV2ZW50VGltZXMgPSB7c3RhcnQ6ICcnLCBlbmQ6ICcnfTtcblx0XHRcdHZtLmV2ZW50LmV2ZW50VGltZXMuc3RhcnQgPSB2bS5kYXRlVGltZVRvVW5peFRpbWUodm0udGVtcERhdGVUaW1lLnN0YXJ0KTsgXG5cdFx0XHR2bS5ldmVudC5ldmVudFRpbWVzLmVuZCA9IHZtLmRhdGVUaW1lVG9Vbml4VGltZSh2bS50ZW1wRGF0ZVRpbWUuZW5kKTtcblx0XHR9XG5cblx0XHRpZigodm0udGVtcERhdGVUaW1lLmVuZCA8IHZtLnRlbXBEYXRlVGltZS5zdGFydCkgJiYgdGFyZ2V0ID09ICdzdGFydCcpIHZtLnRlbXBEYXRlVGltZS5lbmQgPSB2bS50ZW1wRGF0ZVRpbWUuc3RhcnQ7XG5cdFx0aWYodGFyZ2V0ID09ICdzdGFydCcpIHZtLmV2ZW50LmV2ZW50VGltZXMuc3RhcnQgPSB2bS5kYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpO1xuXHRcdGlmKHRhcmdldCA9PSAnZW5kJykgdm0uZXZlbnQuZXZlbnRUaW1lcy5lbmQgPSB2bS5kYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpO1xuXHR9XG5cblx0dm0uZ3Vlc3RzQXJlSW52aXRlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLmV2ZW50Lmd1ZXN0TGlzdCkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2bS52YWxpZGF0ZUd1ZXN0RW1haWwgPSBmdW5jdGlvbigpIHtcblx0XHQvL2lmIHRoZXJlIGlzIGFuIGVtYWlsIGFkZHJlc3Ncblx0XHRpZih2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzKSB7XG5cdFx0XHQvL2NoZWNrIHZhbGlkaXR5XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG5cblx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzKSkge1xuXHRcdFx0XHR2bS5uZXdHdWVzdC5lbWFpbC52YWxpZCA9IHRydWU7XG5cdFx0XHRcdHZtLm5ld0d1ZXN0LmVtYWlsLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0ubmV3R3Vlc3QuZW1haWwudmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0dm0ubmV3R3Vlc3QuZW1haWwuc3R5bGUgPSB7Y29sb3I6Jyd9O1xuXHRcdFx0fVx0XHRcdFxuXHRcdH1cblx0fVxuXG5cdHZtLmlzU2VjdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yKGk9MDtpPDg7aSsrKSB7XG5cdFx0XHQkbG9nLmluZm8odm0ucmVxdWlyZWRJbnB1dHNbaV0pO1xuXHRcdH1cblx0fVxuXG5cdHZtLnNhdmVBbmRBZHZhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0uZXZlbnQuJHNhdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0JGxvZy5pbmZvKCdldmVudCBzYXZlZCcpO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2Vycm9yISAnICsgZXJyb3IpO1xuXHRcdH0pO1xuXG5cdFx0Ly9jaGVjayBmb3IgY29tcGxldGVuZXNcblx0XHR2bS5pc1NlY3Rpb25Db21wbGV0ZSgpO1xuXG5cdFx0aWYodm0ubWFuYWdlU2VjdGlvbnNbMV0uY29tcGxldGUgPT0gdHJ1ZSAmJiB2bS5tYW5hZ2VTZWN0aW9uc1syXS5jb21wbGV0ZSA9PSB0cnVlICYmIHZtLm1hbmFnZVNlY3Rpb25zWzNdLmNvbXBsZXRlID09IHRydWUpIHtcblx0XHRcdHZtLmV2ZW50UmVkaXJlY3QoJy91c2VyRXZlbnRzJywgJHJvdXRlUGFyYW1zLnVpZCk7XG5cdFx0fSBlbHNlIGlmICh2bS5tYW5hZ2VTZWN0aW9uc1sxXS5hY3RpdmUpIHZtLmNoYW5nZVNlY3Rpb24oMik7XG5cdFx0ZWxzZSBpZiAodm0ubWFuYWdlU2VjdGlvbnNbMl0uYWN0aXZlKSB2bS5jaGFuZ2VTZWN0aW9uKDMpO1xuXHRcdGVsc2UgaWYgKHZtLm1hbmFnZVNlY3Rpb25zWzNdLmFjdGl2ZSkgdm0uY2hhbmdlU2VjdGlvbigxKTtcblx0fVxuXG5cdHZtLmFkZEd1ZXN0VG9Ib3N0c0xpc3QgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlY2xhcmUgYW5kIGluaXRpYWxpemUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHVzZXJLZXkgPSB1dGY4X3RvX2I2NCh2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzKTtcblxuXHRcdC8vaWYgZW1haWwgaXMgdmFsaWQgYW5kIG5hbWUgZXhpc3RzXG5cdFx0aWYgKHZtLm5ld0d1ZXN0Lm5hbWUgJiYgdm0ubmV3R3Vlc3QuZW1haWwudmFsaWQpIHtcblx0XHRcdC8vaXMgdGhlcmUgYSBndWVzdCBsaXN0IGFscmVhZHk/IElmIG5vdCBjcmVhdGUgb25lXG5cdFx0XHRpZighdm0uZXZlbnQuZ3Vlc3RMaXN0KSB7XG5cdFx0XHRcdHZtLmV2ZW50Lmd1ZXN0TGlzdCA9IHt9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9pZiBzbyBpcyB0aGlzIHBlcnNvbiBhbHJlYWR5IG9uIHRoZSBsaXN0P1xuXHRcdFx0XHR2YXIgaSA9MDtcblx0XHRcdFx0d2hpbGUodm0uZXZlbnQuZ3Vlc3RMaXN0W2ldKSB7XG5cdFx0XHRcdFx0aWYodm0uZXZlbnQuZ3Vlc3RMaXN0W2ldLmVtYWlsID09IGI2NF90b191dGY4KHVzZXJLZXkpKSB7XG5cdFx0XHRcdFx0XHQkbG9nLmluZm8oJ1RoaXMgZ3Vlc3QgaXMgYWxyZWFkeSBvbiB0aGUgbGlzdCcpO1xuXHRcdFx0XHRcdFx0Y2xlYW5OZXdHdWVzdFZhcmlhYmxlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL2lzIHRoaXMgZ3Vlc3QgYSByZWdpc3RlcmVkIHVzZXI/XG5cdFx0XHRpZihyZWdpc3RlcmVkVXNlcnNbdXNlcktleV0pIHtcblx0XHRcdFx0Ly9pcyB0aGUgcmVnaXN0ZXJlZCB1c2VyIHRoZSBob3N0P1xuXHRcdFx0XHRpZihyZWdpc3RlcmVkVXNlcnNbdXNlcktleV0gPT0gJHJvdXRlUGFyYW1zLnVpZCkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygndHJpZWQgdG8gcmVnaXN0ZXIgdGhlIGhvc3QnKTtcblx0XHRcdFx0XHRjbGVhbk5ld0d1ZXN0VmFyaWFibGUoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0Ly9hZGQgdGhlbSB0byB0aGUgYXBwcm9wcmlhdGUgcmVnaXN0ZXJlZCB1c2VycycgbGlzdCBvZiBldmVudCBpbnZpdGVzXG5cdFx0XHRcdFx0aW52aXRlQVJlZ2lzdGVyZWRVc2VyKHJlZ2lzdGVyZWRVc2Vyc1t1c2VyS2V5XSk7XG5cblx0XHRcdFx0XHQvL2FkZCB0aGUgZ3Vlc3QgdG8gdGhlIGxpc3Rcblx0XHRcdFx0XHR2bS5ldmVudC5ndWVzdExpc3RbcmVnaXN0ZXJlZFVzZXJzW3VzZXJLZXldXSA9IHtcblx0XHRcdFx0XHRcdGF0dGVuZGluZzogZmFsc2UsIFxuXHRcdFx0XHRcdFx0c3RhdHVzOidwZW5kaW5nJywgXG5cdFx0XHRcdFx0XHRuYW1lOiB2bS5uZXdHdWVzdC5uYW1lLCBcblx0XHRcdFx0XHRcdGVtYWlsOnZtLm5ld0d1ZXN0LmVtYWlsLmFkZHJlc3MsXG5cdFx0XHRcdFx0fTtcdFx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vYWRkIHRoZSBpbnZpdGUgdG8gdGhlIG5vbi1yZWdpc3RlcmVkIHVzZXJzIGxpc3Qgb2YgZXZlbnQgaW52aXRlc1xuXHRcdFx0XHRpbnZpdGVBblVucmVnaXN0ZXJlZFVzZXIodXNlcktleSk7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIGd1ZXN0IHRvIHRoZSBsaXN0XG5cdFx0XHRcdHZtLmV2ZW50Lmd1ZXN0TGlzdFt1c2VyS2V5XSA9IHtcblx0XHRcdFx0XHRcdGF0dGVuZGluZzogZmFsc2UsIFxuXHRcdFx0XHRcdFx0c3RhdHVzOidwZW5kaW5nJywgXG5cdFx0XHRcdFx0XHRuYW1lOiB2bS5uZXdHdWVzdC5uYW1lLCBcblx0XHRcdFx0XHRcdGVtYWlsOnZtLm5ld0d1ZXN0LmVtYWlsLmFkZHJlc3MsXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblxuXHRcdFx0Ly9zYXZlIHRoZSBldmVudFxuXHRcdFx0dm0uc2F2ZUV2ZW50KCk7XG5cdFx0XHQvL2NsZWFyIHRoZSB0ZW1wIHZhbHVlc1xuXHRcdFx0Y2xlYW5OZXdHdWVzdFZhcmlhYmxlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRsb2cuaW5mbygneW91IGRpZG5cXCd0IGVudGVyIGEgbmFtZSBhbmQgb3IgZW1haWwnKTtcblx0XHR9XG5cdH1cblxuXHR2bS5ndWVzdFdpbGxBdHRlbmQgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdHZhciBjdXJyZW50VXNlciA9IHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS5jaGlsZCgnZXZlbnRzJyk7XG5cdFx0dmFyIHRvdGFsUGVuZGluZ0ludml0YXRpb25zID0gMDtcblx0XHR2YXIgcmVtb3ZlQXR0ZW5kaW5nVXBkYXRlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdC8vY2hhbmdlIGF0dGVuZGluZyB0byB0cnVlIGluIGhvc3QncyBndWVzdExpc3Rcblx0XHR2bS5ldmVudC5ndWVzdExpc3RbJHJvdXRlUGFyYW1zLnVpZF0uYXR0ZW5kaW5nID0gcmVzcG9uc2U7XG5cdFx0Ly9jaGFuZ2Ugc3RhdHVzIHRvICdhdHRlbmRpbmcnIGluIGhvc3QncyBndWVzdExpc3Rcblx0XHR2bS5ldmVudC5ndWVzdExpc3RbJHJvdXRlUGFyYW1zLnVpZF0uc3RhdHVzID0gJ2F0dGVuZGluZyc7XG5cdFx0XG5cdFx0Ly9nZXQgdGhlIGludml0YXRpb24gZGV0YWlsc1xuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdwZW5kaW5nJykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhbGJlXG5cdFx0XHR2YXIgaW52aXRhdGlvbnMgPSBzbmFwc2hvdC52YWwoKTtcblx0XHRcdC8vbG9nIHN0YXJ0aW5nIHZhbHVlc1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zKTtcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9uc1skcm91dGVQYXJhbXMuaG9zdElkXSk7XG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF1bJHJvdXRlUGFyYW1zLmV2ZW50SWRdKTtcblxuXHRcdFx0dmFyIHRoaXNJbnZpdGF0aW9uID0gaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF1bJHJvdXRlUGFyYW1zLmV2ZW50SWRdO1xuXHRcdFx0XG5cdFx0XHQkbG9nLmluZm8odGhpc0ludml0YXRpb24pO1xuXHRcdFx0XG5cdFx0XHQvL2NoZWNrICMgb2YgaW5pdmlhdGlvbnNcblx0XHRcdGZvcihpbnZpdGF0aW9uIGluIGludml0YXRpb25zKSB7XG5cdFx0XHRcdHRvdGFsUGVuZGluZ0ludml0YXRpb25zKys7XG5cdFx0XHR9XG5cblx0XHRcdC8vcmVwb3J0ICMgb2YgaW52aXRhdGlvbnNcblx0XHRcdCRsb2cuaW5mbyhcInRvdGFsIGF0dGVuZGluZzogXCIgKyB0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyk7XG5cdFx0XHRcblx0XHRcdC8vYWRkIHRoZSBldmVudCB0byB0aGUgZ3Vlc3QncyBhdHRlbmRpbmcgbGlzdFxuXHRcdFx0aWYocmVzcG9uc2UpIGN1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMuaG9zdElkKS5jaGlsZCgkcm91dGVQYXJhbXMuZXZlbnRJZCkuc2V0KHRoaXNJbnZpdGF0aW9uLCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKGVycm9yKTtcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0XHQvL2lmIHRoZSB1cGRhdGVkIHBsYWNlaG9sZGVyIHdhcyBvbiB0aGUgYXR0ZW5kaW5nIGxpc3QgcmVtb3ZlIGl0XG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLm9uKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGF0dGVuZGluZ0xpc3QgPSBzbmFwc2hvdC52YWwoKTtcblx0XHRcdFxuXHRcdFx0Ly9yZXBvcnQgYWN0aW9uc1xuXHRcdFx0JGxvZy5pbmZvKCd0aGlzIGlzIHRoZSBhdHRlbmRpbmcgbGlzdCcpO1xuXHRcdFx0JGxvZy5pbmZvKGF0dGVuZGluZ0xpc3QpO1xuXHRcdFx0XG5cdFx0XHQvL3Rocm93IGZsYWcgZm9yIGxhdGVyXG5cdFx0XHRpZihhdHRlbmRpbmdMaXN0LnVwZGF0ZWQpIHJlbW92ZUF0dGVuZGluZ1VwZGF0ZWQgPSB0cnVlO1xuXG5cdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdC8vaWYgdGhlciB3YXMgYW4gZXJyb3IgcmVwb3J0IGl0XG5cdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKGVycm9yKTtcblx0XHR9KTtcblxuXHRcdC8vaWYgdGhpcyBpcyB0aGUgbGFzdCBwZW5kaW5nIGV2ZW50IG9uIHRoZSBndWVzdCdzIHBlbmRpbmcgbGlzdCwgYWRkIHRoZSB1cGRhdGVkIHBsYWNlaG9sZGVyXG5cdFx0aWYodG90YWxQZW5kaW5nSW52aXRhdGlvbnMgPCAyKSB7XG5cdFx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdFx0Ly9yZXBsYWNlIHdpdGggdXBkYXRlZCBmaWVsZFxuXHRcdFx0Y3VycmVudFVzZXIuY2hpbGQoJ3BlbmRpbmcnKS51cGRhdGUoe1xuXHRcdFx0XHR1cGRhdGVkOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKGVycm9yKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vcmVtb3ZlIHRoZSBldmVudCBmcm9tIHRoZSBndWVzdCdzIHBlbmRpbmcgbGlzdFxuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdwZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLmhvc3RJZCkucmVtb3ZlKCk7XG5cblx0XHQvL2lmIHRoZXJlIHdhcyBhbiB1cGRhdGVkIGZpZWxkIGluIGF0dGVuZGluZywgcmVtb3ZlIGl0XG5cdFx0aWYocmVtb3ZlQXR0ZW5kaW5nVXBkYXRlZCkge1xuXHRcdFx0JGxvZy5pbmZvKCdyZW1vdmluZyB0aGUgdXBkYXRlZCBwbGFjZWhvbGRlcicpO1xuXHRcdFx0Ly9jdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykuY2hpbGQoJ3VwZGF0ZWQnKS5yZW1vdmUoKTtcblx0XHR9XG5cblx0XHQvL3NhdmUgY2hhbmdlc1xuXHRcdHZtLmV2ZW50LiRzYXZlKCk7XG5cdH1cblxuXHR2bS51cGRhdGVVcGRhdGVkUGFyYW0gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3VycmVudFVzZXIgPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJ2V2ZW50cycpO1xuXHRcdFxuXHRcdCRsb2cuaW5mbygndXBkYXRpbmcgdGhlIHBhcmFtJyk7XG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLm9uKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHQkbG9nLmluZm8oc25hcHNob3QudmFsKCkpO1xuXHRcdH0pO1xuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5jaGlsZCgndXBkYXRlZCcpLnJlbW92ZSgpO1xuXHR9XG5cblx0dm0uYWRkSW52aXRhdGlvblRvQXR0ZW5kaW5nID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHR2YXIgY3VycmVudFVzZXIgPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJ2V2ZW50cycpO1xuXHRcdHZhciB0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyA9IDA7XG5cblx0XHQvL2dldCB0aGUgaW52aXRhdGlvbiBkZXRhaWxzXG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ3BlbmRpbmcnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFsYmVcblx0XHRcdHZhciBpbnZpdGF0aW9ucyA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0dmFyIHRoaXNJbnZpdGF0aW9uID0gaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF1bJHJvdXRlUGFyYW1zLmV2ZW50SWRdO1xuXHRcdFx0XG5cdFx0XHQvL2xvZyBzdGFydGluZyB2YWx1ZXNcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9ucyk7XG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF0pO1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zWyRyb3V0ZVBhcmFtcy5ob3N0SWRdWyRyb3V0ZVBhcmFtcy5ldmVudElkXSk7XG5cdFx0XHRcblx0XHRcdC8vY2hlY2sgIyBvZiBpbml2aWF0aW9uc1xuXHRcdFx0Zm9yKGludml0YXRpb24gaW4gaW52aXRhdGlvbnMpIHtcblx0XHRcdFx0dG90YWxQZW5kaW5nSW52aXRhdGlvbnMrKztcblx0XHRcdH1cblxuXHRcdFx0Ly9yZXBvcnQgIyBvZiBpbnZpdGF0aW9uc1xuXHRcdFx0JGxvZy5pbmZvKFwidG90YWwgcGVuZGluZyBpbnZpdGF0aW9uczogXCIgKyB0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyk7XG5cdFx0XHRcblx0XHRcdCRsb2cuaW5mbyhyZXNwb25zZSk7XG5cdFx0XHQvL2FkZCB0aGUgZXZlbnQgdG8gdGhlIGd1ZXN0J3MgYXR0ZW5kaW5nIGxpc3Rcblx0XHRcdGlmKHJlc3BvbnNlKSBjdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLmhvc3RJZCkuY2hpbGQoJHJvdXRlUGFyYW1zLmV2ZW50SWQpLnNldCh0aGlzSW52aXRhdGlvbiwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbyhlcnJvcik7XG5cdFx0XHR9KTtcblxuXG5cblx0XHR9KTtcblx0fVxuXG5cdC8vc3RhcnQgcnVuXG5cdGluaXQoKTtcbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignTGFuZGluZ1BhZ2VDb250cm9sbGVyJywgTGFuZGluZ1BhZ2VDb250cm9sbGVyKTtcblxuTGFuZGluZ1BhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICckZG9jdW1lbnQnLCAnJHdpbmRvdyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIExhbmRpbmdQYWdlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgJGRvY3VtZW50LCAkd2luZG93KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBmYlVSTCA9ICdodHRwczovL21lZXR1cHBsYW5uZXIuZmlyZWJhc2Vpby5jb20vJztcblx0dmFyIGF1dGhEYXRhID0ge307XG5cdHZhciBjdXJyZW50VXNlckRhdGEgPSB7fTtcblxuXHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0dm0uc2hvd1JlcXVpcm5tZW50cyA9IGZhbHNlO1xuXHR2bS52YWxpZE5ld05hbWUgPSB7J3ZhbGlkJzpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6Jyd9fTtcblx0dm0udmFsaWROZXdFbWFpbCA9IHsndmFsaWQnOmZhbHNlLCAnc3R5bGUnOntjb2xvcjonJ319O1xuXHR2bS5zZWN1cmVQYXNzd29yZCA9IHsnc2VjdXJlJzpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6Jyd9fTtcblx0dm0udW5sb2NrQ3JlYXRlVXNlckJ0biA9IHsndXNhYmxlJzpmYWxzZSwgJ2NsYXNzJzonYnRuIGJ0bi13YXJuaW5nJ307XG5cdHZtLm1lc3NhZ2UgPSAndGVzdGluZyc7XG5cblx0XG5cdHZtLnZhbGlkVXNlckVtYWlsID0geyd2YWxpZCc6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOicnfX07XG5cdHZtLnZhbGlkVXNlclBhc3N3b3JkID0geyd2YWxpZCc6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOicnfX07XG5cdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4gPSB7J3VzYWJsZSc6ZmFsc2UsICdjbGFzcyc6J2J0biBidG4td2FybmluZyd9O1xuXHR2bS5wYXNzd29yZFJlcXVpcm5tZW50cyA9IHtcblx0XHQwOnsnY29uc3RyYWludCc6J0lzIGF0IGxlYXN0IDE2IGNoYXJhY3RlcnMgbG9uZycsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDE6eydjb25zdHJhaW50JzonSXMgbm8gbG9uZ2VyIHRoYW4gMTAwIGNoYXJhY3RlcnMnLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQyOnsnY29uc3RyYWludCc6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSByZXF1aXJlZCBzeW1ib2wgKFxcIVxcQFxcI1xcJFxcJVxcXlxcJlxcKiknLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQzOnsnY29uc3RyYWludCc6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBudW1iZXInLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQ0OnsnY29uc3RyYWludCc6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBsb3dlcmNhc2UgbGV0dGVyJywgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX0sXG5cdFx0NTp7J2NvbnN0cmFpbnQnOidDb250YWlucyBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlcicsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDY6eydjb25zdHJhaW50JzpcIkRvZXNuJ3QgaGF2ZSBhbnkgaWxsZWdhbCBjaGFyYWN0ZXJzXCIsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9XG5cdH07XG5cblx0Ly92YXIgdGhlVGVzdEJveCA9IGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnQpLmZpbmQoJyN0ZXN0Qm94Jyk7XG5cblx0Ly90aGVUZXN0Qm94LmNoZWNrVmFsaWRpdHkoKTtcblx0Ly9zZXRDdXN0b21WYWxpZGl0eSgneW91IG5lZWQgc29tZXRoaW5nIGVsc2UnKTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblx0ZnVuY3Rpb24gdXRmOF90b19iNjQoc3RyKSB7XG5cdFx0cmV0dXJuIGJ0b2Eoc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NF90b191dGY4KHN0cikge1xuICAgIFx0cmV0dXJuIGF0b2Ioc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHVuaXhUaW1lVG9EYXRlVGltZSh1bml4VGltZSkge1xuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh1bml4VGltZSkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9XG5cblx0Ly9kZWZpbmUgY29udHJvbGxlciBtZXRob2RzXG5cdHZtLmRpc3BsYXlQYXNzUmVxcyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLm5ld05hbWUgJiYgdm0ubmV3RW1haWwpIHtcblx0XHRcdHZtLnNob3dSZXF1aXJubWVudHMgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS5zaG93UmVxdWlybm1lbnRzID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0dm0uY2hlY2tOZXdOYW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0aWYodm0ubmV3TmFtZSkge1xuXHRcdFx0aWYodm0ubmV3TmFtZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZtLnZhbGlkTmV3TmFtZS52YWxpZCA9IHRydWU7XG5cdFx0XHRcdHZtLnZhbGlkTmV3TmFtZS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLnZhbGlkTmV3TmFtZS52YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHR2bS52YWxpZE5ld05hbWUuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZtLm9wZW5DcmVhdGVVc2VyQnV0dG9uKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld0VtYWlsID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmKHZtLm5ld0VtYWlsKSB7XG5cdFx0XHQvL2NoZWNrIHZhbGlkaXR5XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG5cblx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2bS5uZXdFbWFpbCkpIHtcblx0XHRcdFx0dm0udmFsaWROZXdFbWFpbC52YWxpZCA9IHRydWU7XG5cdFx0XHRcdHZtLnZhbGlkTmV3RW1haWwuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS52YWxpZE5ld0VtYWlsLnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnZhbGlkTmV3RW1haWwuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHRcdFx0fVx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHR2bS5vcGVuQ3JlYXRlVXNlckJ1dHRvbigpO1xuXHR9XG5cblx0dm0uY2hlY2tVc2VyRW1haWwgPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS51c2VyRW1haWwpIHtcblx0XHRcdC8vY2hlY2sgdmFsaWRpdHlcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1wiLCBcIlwiKTtcblxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZtLnVzZXJFbWFpbCkpIHtcblx0XHRcdFx0dm0udmFsaWRVc2VyRW1haWwudmFsaWQgPSB0cnVlO1xuXHRcdFx0XHR2bS52YWxpZFVzZXJFbWFpbC5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLnZhbGlkVXNlckVtYWlsLnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnZhbGlkVXNlckVtYWlsLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2bS5vcGVuVXNlckxvZ2luQnRuKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld1Bhc3N3b3JkcyA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vZm9yIGVhY2ggcGFzc3dvcmQgZGVmaW5lIHRoZSBwYXR0ZXJuIHRoYXQgdGhlIHBhc3N3b3JkIG11c3QgbWF0Y2hcblx0XHR2YXIgY29uc3RyYWludHMgPSB7XG5cdCBcdFx0MDogWycnLCAnIHlvdXIgcGFzc3dvcmQgbmVlZHMgdG8gYmUgMTYgY2hhcmFjdGVycyBvciBsb25nZXInXSxcblx0IFx0XHQxOiBbJycsICcgeW91ciBwYXNzd29yZCBuZWVkcyB0byBiZSBsZXNzIHRoYW4gMTAwIGNoYXJhY3RlcnMnXSxcblx0IFx0XHQyOiBbJ1tcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdJywgXCIgbm8gcmVxdWlyZWQgc3ltYm9scyBmb3VuZFwiXSxcblx0IFx0XHQzOiBbJ1swLTldJywgXCIgbm8gbnVtYmVycyBmb3VuZFwiXSxcblx0IFx0XHQ0OiBbJ1thLXpdJywgXCIgbm8gbG93ZXJjYXNlIGxldHRlcnMgZm91bmRcIl0sXG5cdCBcdFx0NTogWydbQS1aXScsIFwiIG5vIHVwcGVyY2FzZSBsZXR0ZXJzIGZvdW5kXCJdLFxuXHQgXHRcdDY6IFsnW15BLXowLTlcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdJywgXCIgaWxsZWdhbCBjaGFyYWN0ZXJzIGZvdW5kXCJdLFxuIFx0XHR9O1xuIFx0XHRcbiBcdFx0Ly9jaGVjayBmb3IgbGVuZ3RoXG4gXHRcdGlmKHZtLm5ld1Bhc3N3b3JkKSB7XG4gXHRcdFx0aWYodm0ubmV3UGFzc3dvcmQubGVuZ3RoID4gMTUpIHsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1swXS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1swXS5tZXQgPSB0cnVlOyBcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMF0uc3R5bGUgPSB7Y29sb3I6J3JlZCd9OyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzBdLm1ldCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZih2bS5uZXdQYXNzd29yZC5sZW5ndGggPD0gMTAwKSB7IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0uc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0ubWV0ID0gdHJ1ZTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0uc3R5bGUgPSB7Y29sb3I6J3JlZCd9OyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzFdLm1ldCA9IGZhbHNlO1xuIFx0XHRcdH1cblxuIFx0XHRcdC8vY2hlY2sgY29uc3RyYWludHMgMi01XG4gXHRcdFx0Zm9yKGkgPSAyOyBpIDwgNjsgaSsrKSB7XG5cdCBcdFx0XHQvL2NoZWNrIGZvciByZXF1aXJlZCBzeW1ib2xzLCB1cHBlcmNhc2UsIGxvc2VyY2FzZSwgYW5kIGNoYXJhY3RlcnNcblx0IFx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChjb25zdHJhaW50c1tpXVswXSwgXCJcIik7XHRcblxuXHQgXHRcdFx0Ly90ZXN0IGVhY2ggY29uc3RyYXRpbnRcblx0IFx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2bS5uZXdQYXNzd29yZCkpIHtcblx0IFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbaV0uc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdCBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzW2ldLm1ldCA9IHRydWU7XG5cdCBcdFx0XHR9IGVsc2Uge1xuXHQgXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1tpXS5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdCBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzW2ldLm1ldCA9IGZhbHNlO1xuXHQgXHRcdFx0fVxuXHQgXHRcdH1cblxuXHQgXHRcdC8vY2hlY2sgaWxsZWdhbCBjaGFyYWN0ZXJzXG5cdCBcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKGNvbnN0cmFpbnRzWzZdWzBdLCBcIlwiKTtcblxuXHQgXHRcdC8vcnVuIHRoZSBjaGVja1xuXHQgXHRcdGlmKCFjb25zdHJhaW50LnRlc3Qodm0ubmV3UGFzc3dvcmQpKSB7XG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5tZXQgPSBmYWxzZTtcblx0IFx0XHR9IGVsc2Uge1xuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNl0uc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5tZXQgPSB0cnVlO1xuXHQgXHRcdH1cblxuXHQgXHRcdC8vaWYgYWxsIGNvbnN0cmFpbnMgbWV0LCB0aHJvdyB2YWxpZCBwYXNzIGZsYWdcblx0IFx0XHRpZiggdm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMF0ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1sxXS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzJdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbM10ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s0XS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzVdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNl0ubWV0KSB7XG5cdCBcdFx0XHR2bS5zZWN1cmVQYXNzd29yZC5zZWN1cmUgPSB0cnVlXG5cdCBcdFx0fSBlbHNlIHtcblx0IFx0XHRcdHZtLnNlY3VyZVBhc3N3b3JkLnNlY3VyZSA9IGZhbHNlO1xuXHQgXHRcdH1cblxuXHQgXHRcdGlmKHZtLnNlY3VyZVBhc3N3b3JkLnNlY3VyZSkge1xuXHQgXHRcdFx0dm0uc2VjdXJlUGFzc3dvcmQuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdCBcdFx0fSBlbHNlIHtcblx0IFx0XHRcdHZtLnNlY3VyZVBhc3N3b3JkLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0IFx0XHR9XG4gXHRcdH1cbiBcdFx0XG4gXHRcdHZtLm9wZW5DcmVhdGVVc2VyQnV0dG9uKCk7XG5cdH1cblxuXHR2bS5jaGVja1VzZXJQYXNzd29yZHMgPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS51c2VyUGFzc3dvcmQpIHtcblx0XHRcdGlmKHZtLnVzZXJQYXNzd29yZC5sZW5ndGggPiAxNSkge1xuXHRcdFx0XHR2bS52YWxpZFVzZXJQYXNzd29yZC5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdFx0dm0udmFsaWRVc2VyUGFzc3dvcmQudmFsaWQgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0udmFsaWRVc2VyUGFzc3dvcmQuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHRcdFx0XHR2bS52YWxpZFVzZXJQYXNzd29yZC52YWxpZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdFxuXHRcdHZtLm9wZW5Vc2VyTG9naW5CdG4oKTtcblx0fVxuXG5cdHZtLm9wZW5DcmVhdGVVc2VyQnV0dG9uID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYodm0udmFsaWROZXdOYW1lLnZhbGlkICYmIHZtLnZhbGlkTmV3RW1haWwudmFsaWQgJiYgdm0uc2VjdXJlUGFzc3dvcmQuc2VjdXJlKSB7XG5cdFx0XHR2bS51bmxvY2tDcmVhdGVVc2VyQnRuLmNsYXNzID0gJ2J0biBidG4tc3VjY2Vzcyc7XG5cdFx0XHR2bS51bmxvY2tDcmVhdGVVc2VyQnRuLnVzYWJsZSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4uY2xhc3MgPSAnYnRuIGJ0bi13YXJuaW5nJztcblx0XHRcdHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4udXNhYmxlID0gZmFsc2U7XHRcblx0XHR9XG5cblx0fVxuXG5cdHZtLm9wZW5Vc2VyTG9naW5CdG4gPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS52YWxpZFVzZXJFbWFpbC52YWxpZCAmJiB2bS52YWxpZFVzZXJQYXNzd29yZC52YWxpZCkge1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi5jbGFzcyA9ICdidG4gYnRuLXN1Y2Nlc3MnO1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLmNsYXNzID0gJ2J0biBidG4td2FybmluZyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSA9IGZhbHNlO1x0XG5cdFx0fVxuXHR9XG5cblx0dm0udXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9zZXQgdmFsdWVzXG5cdFx0dm0ubmV3TmFtZSA9ICRkb2N1bWVudC5maW5kKCcjbmV3TmFtZScpWzBdLnZhbHVlO1xuXHRcdHZtLm5ld0VtYWlsID0gJGRvY3VtZW50LmZpbmQoJyNuZXdFbWFpbCcpWzBdLnZhbHVlO1xuXHRcdHZtLnVzZXJFbWFpbCA9ICRkb2N1bWVudC5maW5kKCcjdXNlckVtYWlsJylbMF0udmFsdWU7XG5cdFx0XG5cdFx0dm0uY2hlY2tOZXdOYW1lKCk7XG5cdFx0dm0uY2hlY2tOZXdFbWFpbCgpO1xuXHRcdHZtLmNoZWNrVXNlckVtYWlsKCk7XG5cdH1cblxuXHRmdW5jdGlvbiByZWRpcmVjdChwYXRoLCB1c2VyRGF0YSkge1xuXHRcdHZhciBmdWxsUGF0aCA9IHBhdGggKyAnLycgKyBjdXJyZW50VXNlckRhdGEudWlkICsgJy8nICsgY3VycmVudFVzZXJEYXRhLnRva2VuO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdH1cblxuXHR2bS5jcmVhdGVOZXdVc2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvZy5pbmZvKCdDcmVhdGluZyBhIG5ldyB1c2VyIGFjY291bnQgbm93IScpO1xuXG5cdFx0aWYodm0udW5sb2NrQ3JlYXRlVXNlckJ0bi51c2FibGUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHRcdFx0cmVmLmNyZWF0ZVVzZXIoe1xuXHRcdFx0XHRlbWFpbDp2bS5uZXdFbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6dm0ubmV3UGFzc3dvcmRcblx0XHRcdH0sZnVuY3Rpb24oZXJyb3IsIHVzZXJEYXRhKSB7XG5cdFx0XHRcdGlmKGVycm9yKSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdFcnJvciBjcmVhdGluZyB1c2VyOiAnICsgZXJyb3IpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vbG9nIHJlc3VsdHNcblx0XHRcdFx0XHQkbG9nLmluZm8odXNlckRhdGEpO1xuXG5cdFx0XHRcdFx0Ly9zYXZlIGFsbCB0aGUgZGF0YVxuXHRcdFx0XHRcdGN1cnJlbnRVc2VyRGF0YSA9IHVzZXJEYXRhO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vZ2VuZXJhdGUgdGhlIHVzZXIgcmVjb3JkXG5cdFx0XHRcdFx0dmFyIHVzZXJzUmVmID0gcmVmLmNoaWxkKCdVc2Vycy8nICsgdXNlckRhdGEudWlkKTtcblx0XHRcdFx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0XHRcdFx0Ly93cml0ZSBuZXcgdXNlciB0byB0aGUgZGF0YWJhc2Ugd2l0aCBiaW8gaW5mb1xuXHRcdFx0XHRcdHVzZXJzUmVmLnNldCh7IFxuXHRcdFx0XHRcdFx0J2Jpbyc6IHtcblx0XHRcdFx0XHRcdFx0J25hbWUnOiB2bS5uZXdOYW1lLFxuXHRcdFx0XHRcdFx0XHQnZW1haWwnOiB2bS5uZXdFbWFpbFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdCdldmVudHMnOiB7XG5cdFx0XHRcdFx0XHRcdCdwZW5kaW5nJzoge1xuXHRcdFx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHQnaG9zdGluZyc6IHtcblx0XHRcdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0J2F0dGVuZGluZyc6IHtcblx0XHRcdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0J2NvbXBsZXRlZCc6IHtcblx0XHRcdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdFx0XHQkbG9nLmluZm8oJ0RhdGEgY291bGQgbm90IGJlIHNhdmVkOiAnICsgZXJyb3IpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0JGxvZy5pbmZvKCdEYXRhIHNhdmVkIHN1Y2Nlc3NmdWxseS4nKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQvL2FkZCB0aGlzIHVzZXIgdG8gdGhlIGxpc3Qgb2YgcmVnaXN0ZXJlZCB1c2Vyc1xuXHRcdFx0XHRcdHJlZi5jaGlsZCgnVWlkcycpLmNoaWxkKHV0ZjhfdG9fYjY0KHZtLm5ld0VtYWlsKSkuc2V0KGN1cnJlbnRVc2VyRGF0YS51aWQsIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKFwiRGF0YSBjb3VsZCBub3QgYmUgc2F2ZWQuIFwiICsgZXJyb3IpO1xuXHRcdFx0XHRcdFx0ZWxzZSAkbG9nLmluZm8oXCJ1aWQgY3JlYXRlZCBzdWNlc3NmdWxseS5cIik7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvL3JlZGlyZWN0IHRvIFVzZXJJbmZvcm1hdGlvblxuXHRcdFx0XHRcdHJlZGlyZWN0KCcvdXNlckluZm9ybWF0aW9uJywgY3VycmVudFVzZXJEYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR9XG5cdH1cblxuXHR2bS5sb2dpblJlZ2lzdGVyZWRVc2VyID0gZnVuY3Rpb24oKSB7XG5cblx0XHRpZih2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVcblx0XHRcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXG5cdFx0XHQvL2F1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0cmVmLmF1dGhXaXRoUGFzc3dvcmQoe1xuXHRcdFx0XHRlbWFpbDogdm0udXNlckVtYWlsLFxuXHRcdFx0XHRwYXNzd29yZDogdm0udXNlclBhc3N3b3JkXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvciwgYXV0aERhdGEpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0Vycm9yIExvZ2dpbmcgSW46ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdMb2dnZWQgSW4gc3VjY2Vzc2Z1bGx5OiAnICsgYXV0aERhdGEudWlkKTtcblx0XHRcdFx0XHQkbG9nLmluZm8oYXV0aERhdGEpO1xuXHRcdFx0XHRcdC8vc2F2ZSBhbGwgdGhlIGRhdGFcblx0XHRcdFx0XHRjdXJyZW50VXNlckRhdGEgPSBhdXRoRGF0YTtcblxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGJpb1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGV2ZW50c1xuXG5cdFx0XHRcdFx0Ly9yZWRpcmVjdFxuXHRcdFx0XHRcdHJlZGlyZWN0KCcvdXNlckluZm9ybWF0aW9uJywgY3VycmVudFVzZXJEYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR2bS5hbGVydE1lID0gZnVuY3Rpb24oKSB7XG5cdFx0YWxlcnQoJ3RoaXMgaXMgd29ya2luZyEgYW4gYWxlcnQhJyk7XG5cdH1cblxuXHR2bS5vblJlc2l6ZUZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlucHV0VGV4dCA9IGFuZ3VsYXIuZWxlbWVudCgnLmlucHV0VGV4dCcpO1xuXHRcdGlmKCR3aW5kb3cub3V0ZXJXaWR0aCA+ICR3aW5kb3cub3V0ZXJIZWlnaHQpIHtcblx0XHRcdGlucHV0VGV4dC5jc3MoJ2ZvbnQtc2l6ZScsICcyZW0nKTtcblx0XHRcdCRsb2cuaW5mbygnbWFraW5nIGJpZ2dlcicpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbnB1dFRleHQuY3NzKCdmb250LXNpemUnLCAnMS4yZW0nKTtcblx0XHR9XG5cdH1cblxuXHQvL2V2ZW50IGxpc3RlbmVyc1xuXHRpZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluICRkb2N1bWVudCkge1xuXHQgICAgJGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvZy5pbmZvKCdhZGRpbmcgRmFzdENsaWNrJyk7XG5cdCAgICAgICAgRmFzdENsaWNrLmF0dGFjaCgkZG9jdW1lbnQuYm9keSk7XG5cdCAgICB9LCBmYWxzZSk7XG5cdH1cblxuXHRhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZCgncmVzaXplJywgZnVuY3Rpb24oKSB7XG5cdFx0dm0ub25SZXNpemVGdW5jdGlvbigpO1xuXHRcdC8vJHNjb3BlLiRhcHBseSgpO1xuXHR9KTtcblxuXHRhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRpZigkd2luZG93Lm91dGVyV2lkdGggPCA2MDApIHtcblx0XHRcdHZtLm9uUmVzaXplRnVuY3Rpb24oKTtcblx0XHRcdC8vJHNjb3BlLiRhcHBseSgpO1xuXHRcdH1cblx0fSlcblxuXG5cdCB2bS5tYXN0ZXIgPSB7fTtcblxuXHQgIHZtLnVwZGF0ZSA9IGZ1bmN0aW9uKHVzZXIpIHtcblx0ICAgIHZtLm1hc3RlciA9IGFuZ3VsYXIuY29weSh1c2VyKTtcblx0ICB9O1xuXG5cdCAgdm0ucmVzZXQgPSBmdW5jdGlvbihmb3JtKSB7XG5cdCAgICBpZiAoZm9ybSkge1xuXHQgICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xuXHQgICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcblx0ICAgIH1cblx0ICAgIHZtLnVzZXIgPSBhbmd1bGFyLmNvcHkodm0ubWFzdGVyKTtcblx0ICB9O1xuXG5cdCAgdm0ucmVzZXQoKTtcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgTWFpbkNvbnRyb2xsZXIpO1xuXG5NYWluQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRsb2NhdGlvbicsICckZG9jdW1lbnQnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBNYWluQ29udHJvbGxlcigkbG9nLCAkbG9jYXRpb24sICRkb2N1bWVudCkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZmJVUkwgPSAnaHR0cHM6Ly9tZWV0dXBwbGFubmVyLmZpcmViYXNlaW8uY29tLyc7XG5cdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpOyBcblxuXHR2bS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcblx0XHRhbGVydCgnbG9nZ2luZyB5b3Ugb3V0IScpO1xuXHRcdHJlZi51bmF1dGgoKTtcblx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHR9O1xuXG5cdGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gJGRvY3VtZW50KSB7XG5cdCAgICAkZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9nLmluZm8oJ2FkZGluZyBGYXN0Q2xpY2snKTtcblx0ICAgICAgICBGYXN0Q2xpY2suYXR0YWNoKCRkb2N1bWVudC5ib2R5KTtcblx0ICAgIH0sIGZhbHNlKTtcblx0fVxufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignTmV3VXNlclNpZ25VcENvbnRyb2xsZXInLCBOZXdVc2VyU2lnblVwQ29udHJvbGxlcik7XG5cbk5ld1VzZXJTaWduVXBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ3ZhbGlkYXRpb24nLCAnYmFja2VuZFNlcnZpY2VzJywgJ3RyYWZmaWNWYWxldCcsICd1c2VyRGF0YSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIE5ld1VzZXJTaWduVXBDb250cm9sbGVyKCRzY29wZSwgJGxvZywgdmFsaWRhdGlvbiwgYmFja2VuZFNlcnZpY2VzLCB0cmFmZmljVmFsZXQsIHVzZXJEYXRhKSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9kZWZpbmUgdm0gaW5wdXQgdmFyaWFibGVzXG5cdHZtLmlucHV0cyA9IHtcblx0XHRuZXdOYW1lOiAnJyxcblx0XHRuZXdFbWFpbDogJycsXG5cdFx0bmV3UGFzc3dvcmQ6ICcnLFxuXHRcdHJlcXVpcmVkRmllbGRzRGVmaW5lZDogZmFsc2Vcblx0fVxuXHR2bS5lcnJvcnMgPSB7XG5cdFx0bmFtZTogJycsXG5cdFx0ZW1haWw6ICcnLFxuXHRcdHBhc3N3b3JkOiBmYWxzZSxcblx0XHRwYXNzZXNBbGxUZXN0czogZmFsc2Vcblx0fVxuXHR2bS5wYXNzUmVxcyA9IHtcblx0XHQwOiB7IGlkOicnLCByZXE6J0lzIGF0IGxlYXN0IDE2IGNoYXJhY3RlcnMgbG9uZycsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9fSxcblx0XHQxOiB7IGlkOicnLCByZXE6J0lzIG5vIGxvbmdlciB0aGFuIDEwMCBjaGFyYWN0ZXJzJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQyOiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBsb3dlcmNhc2UgbGV0dGVyJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQzOiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQ0OiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBudW1iZXInLCBmdWxmaWxsZWQ6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOidyZWQnfSB9LFxuXHRcdDU6IHsgaWQ6JycsIHJlcTonQ29udGFpbnMgYXQgbGVhc3Qgb25lIHJlcXVpcmVkIHN5bWJvbCAoXFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqKScsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9IH0sXG5cdFx0NjogeyBpZDonJywgcmVxOlwiRG9lc24ndCBoYXZlIGFueSBpbGxlZ2FsIGNoYXJhY3RlcnNcIiwgZnVsZmlsbGVkOnRydWUsICdzdHlsZSc6e2NvbG9yOidyZWQnfSB9XG5cdH1cblx0dm0uc2hvd1JlcXNCb3ggPSBmYWxzZTtcblxuXHQvL2RlZmluZSByZXF1aXJlZCBmaWVsZCBjb25zdHJhaW50c1xuXHR2YXIgc2lnbnVwVmFsaWRhdGlvbiA9IHZhbGlkYXRpb247XG5cblx0Ly9kZWZpbmUgY29udHJvbGxlciBtZXRob2RzXG5cdGZ1bmN0aW9uIHZlcmlmeVJlcXVpcm5tZW50cygpIHtcblx0XHRpZih2bS5lcnJvcnMubmFtZSA9PSAnJyAmJiB2bS5lcnJvcnMuZW1haWwgPT0gJycgJiYgIXZtLmVycm9ycy5wYXNzd29yZCkgdm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzID0gdHJ1ZTtcblx0XHRlbHNlIHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyA9IGZhbHNlO1xuXG5cdFx0aWYoIGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5uZXdOYW1lKSAmJiB2bS5pbnB1dHMubmV3TmFtZSAhPT0gJycgJiZcblx0XHRcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5uZXdFbWFpbCkgJiYgdm0uaW5wdXRzLm5ld0VtYWlsICE9PSAnJyAmJlxuXHRcdFx0YW5ndWxhci5pc0RlZmluZWQodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSAmJiB2bS5pbnB1dHMubmV3UGFzc3dvcmQgIT09ICcnKSBcblx0XHRcdFx0dm0uaW5wdXRzLnJlcXVpcmVkRmllbGRzRGVmaW5lZCA9IHRydWU7XG5cdFx0ZWxzZSB2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkID0gZmFsc2U7XG5cdH1cblxuXHQvL2RlZmluZSB2bSBhY2Nlc3NpYmxlIG1ldGhvZHNcblx0dm0uY2hlY2tOZXdOYW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzTmFtZSA9IHNpZ251cFZhbGlkYXRpb24ucmVxdWlyZWQodm0uaW5wdXRzLm5ld05hbWUpO1xuXHRcdHZhciBsb25nRW5vdWdoID0gc2lnbnVwVmFsaWRhdGlvbi5taW5OYW1lTGVuZ3RoKHZtLmlucHV0cy5uZXdOYW1lKVxuXHRcdFxuXHRcdC8vbG9nIGVycm9yc1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGhhc05hbWUpKSBlcnJvcnMucHVzaChoYXNOYW1lKTtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChsb25nRW5vdWdoKSkgZXJyb3JzLnB1c2gobG9uZ0Vub3VnaCk7XG5cblx0XHQvL3VwZGF0ZSB0aGUgZXJyb3JzIG1vZGVsXG5cdFx0aWYoZXJyb3JzLmxlbmd0aCA+IDApIHZtLmVycm9ycy5uYW1lID0gZXJyb3JzLmpvaW4oJywgJyk7XG5cdFx0ZWxzZSB2bS5lcnJvcnMubmFtZSA9ICcnO1xuXG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld0VtYWlsID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzRW1haWwgPSBzaWdudXBWYWxpZGF0aW9uLnJlcXVpcmVkKHZtLmlucHV0cy5uZXdFbWFpbCk7XG5cdFx0dmFyIGlzQW5FbWFpbCA9IHNpZ251cFZhbGlkYXRpb24uZW1haWwodm0uaW5wdXRzLm5ld0VtYWlsKTtcblx0XHRcblx0XHQvL2xvZyBlcnJvcnNcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChoYXNFbWFpbCkpIGVycm9ycy5wdXNoKGhhc0VtYWlsKTtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChpc0FuRW1haWwpKSBlcnJvcnMucHVzaChpc0FuRW1haWwpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGVycm9ycyBtb2RlbFxuXHRcdGlmKGVycm9ycy5sZW5ndGggPiAwKSB2bS5lcnJvcnMuZW1haWwgPSBlcnJvcnMuam9pbignLCAnKTtcblx0XHRlbHNlIHZtLmVycm9ycy5lbWFpbCA9ICcnO1xuXG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld1Bhc3N3b3JkID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9mbGlwIG9uIHJlcXMgYm94XG5cdFx0dm0uc2hvd1JlcXNCb3ggPSB0cnVlO1xuXG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzUGFzc3dvcmQgPSBzaWdudXBWYWxpZGF0aW9uLnJlcXVpcmVkKHZtLmlucHV0cy5uZXdQYXNzd29yZCk7XG5cdFx0dmFyIHNwZWNpZmljUmVxcyA9IFtcblx0XHRcdHNpZ251cFZhbGlkYXRpb24ubWluUGFzc0xlbmd0aCh2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5tYXhQYXNzTGVuZ3RoKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmF0TGVhc3RPbmVMb3dlcmNhc2Uodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24uYXRMZWFzdE9uZVVwcGVyY2FzZSh2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5hdExlYXN0T25lTnVtYmVyKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmF0TGVhc3RPbmVTeW1ib2wodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24uaWxsZWdhbENoYXJhY3Rlcih2bS5pbnB1dHMubmV3UGFzc3dvcmQpXG5cdFx0XTtcblxuXHRcdC8vbG9nIGVycm9yc1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGhhc1Bhc3N3b3JkKSkgZXJyb3JzLnB1c2goaGFzUGFzc3dvcmQpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGVycm9ycyBtb2RlbFxuXHRcdGlmKGVycm9ycy5sZW5ndGggPiAwKSB2bS5lcnJvcnMucGFzc3dvcmQgPSBlcnJvcnMuam9pbignLCAnKTtcblx0XHRlbHNlIHZtLmVycm9ycy5lbWFpbCA9ICcnO1xuXG5cdFx0Ly91cGRhdGUgcmVxcyBtb2RlbFxuXHRcdHZhciBhbnlFcnJvcnMgPSBmYWxzZTtcblx0XHRmb3IoaT0wOyBpPDc7IGkrKykge1xuXHRcdFx0aWYoc3BlY2lmaWNSZXFzW2ldKSB7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLmZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0ucGFzc1JlcXNbaV0uZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdFx0YW55RXJyb3JzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2bS5lcnJvcnMucGFzc3dvcmQgPSBhbnlFcnJvcnM7XG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5leGl0UGFzc3dvcmQgPSBmdW5jdGlvbigpIHtcblx0XHR2bS5jaGVja05ld1Bhc3N3b3JkKCk7XG5cdFx0dm0uc2hvd1JlcXNCb3ggPSBmYWxzZTtcblx0fVxuXG5cdHZtLmNyZWF0ZU5ld1VzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBuZXdVc2VyU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXG5cdFx0Ly9jb25maXJtIGFsbCBmaWVsZHMgYXJlIHZhbGlkXG5cdFx0aWYodm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzICYmIHZtLmlucHV0cy5yZXF1aXJlZEZpZWxkc0RlZmluZWQpIHtcblx0XHRcdFxuXHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGNyZWF0ZU5ld1VzZXIgPSBiYWNrZW5kU2VydmljZXM7XG5cdFx0XHR2YXIgbmV3VXNlckRhdGEgPSB1c2VyRGF0YTtcblxuXHRcdFx0Ly9tYWludGFpbiBsb2NhbCB2YWx1ZXMgdG8gc3BlZWQgdXAgdXNlciBleHBlcmllbmNlXG5cdFx0XHRuZXdVc2VyRGF0YS5sb2FkUHJpbWFyaWVzKHZtLmlucHV0cy5uZXdFbWFpbCwgdm0uaW5wdXRzLm5ld05hbWUpO1xuXG5cdFx0XHQvL2NyZWF0ZSB0aGUgbmV3IHVzZXIgaW4gdGhlIGRhdGFiYXNlXG5cdFx0XHRjcmVhdGVOZXdVc2VyLmNyZWF0ZU5ld1VzZXIodm0uaW5wdXRzLm5ld0VtYWlsLCB2bS5pbnB1dHMubmV3UGFzc3dvcmQpXG5cdFx0XHQudGhlbihmdW5jdGlvbih1c2VyRGF0YSkge1xuXHRcdFx0XHQvL2NyZWF0ZSBhIHVzZXIgcHJvZmlsZSBpbiB0aGUgZGF0YWJhc2Vcblx0XHRcdFx0Y3JlYXRlTmV3VXNlci5hZGROZXdVc2VyVG9EYXRhYmFzZSh1c2VyRGF0YS51aWQsIHZtLmlucHV0cy5uZXdOYW1lLCB2bS5pbnB1dHMubmV3RW1haWwpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8obWVzc2FnZSk7XG5cdFx0XHRcdFx0Ly9hZGQgdGhpcyB1c2VyIHRvIHRoZSBsaXN0IG9mIHJlZ2lzdGVyZWQgdXNlcnNcblx0XHRcdFx0XHRjcmVhdGVOZXdVc2VyLmFkZE5ld1VzZXJUb1JlZ1VzZXJzTGlzdCh1c2VyRGF0YS51aWQsIHZtLmlucHV0cy5uZXdFbWFpbClcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbihtZXNzYWdlKSB7ICRsb2cuaW5mbyhtZXNzYWdlKTsgfSlcblx0XHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbihtZXNzYWdlKSB7ICRsb2cuaW5mbyhtZXNzYWdlKTsgfSlcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cdFx0XHRcblx0XHRcdC8vcmVkaXJlY3QgdG8gdGhlIG5leHQgcGFnZSBcblx0XHRcdG5ld1VzZXJTaGVycGEucmVkaXJlY3RUbygnL3VzZXJJbmZvcm1hdGlvbicpO1xuXHRcdH1cblxuXHR9XG5cdFxuXHQvL3J1biB0aW1lIGFjdGlvbnNcblxufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdSZWdVc2VyTG9naW5Db250cm9sbGVyJywgUmVnVXNlckxvZ2luQ29udHJvbGxlcik7XG5cblJlZ1VzZXJMb2dpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckZG9jdW1lbnQnLCAnYmFja2VuZFNlcnZpY2VzJywgJ3RyYWZmaWNWYWxldCcsICd1c2VyRGF0YSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIFJlZ1VzZXJMb2dpbkNvbnRyb2xsZXIoJGxvZywgJGRvY3VtZW50LCBiYWNrZW5kU2VydmljZXMsIHRyYWZmaWNWYWxldCwgdXNlckRhdGEpIHtcblx0dmFyIHZtID0gdGhpcztcblxuXHQvL2RlZmluZSB2bSBpbnB1dCB2YXJpYWJsZXNcblx0dm0uaW5wdXRzID0ge1xuXHRcdGVtYWlsOiAnJyxcblx0XHRwYXNzd29yZDogJycsXG5cdFx0cmVxdWlyZWRGaWVsZHNEZWZpbmVkOiBmYWxzZVxuXHR9XG5cdHZtLmVycm9ycyA9IHtcblx0XHRtZXNzYWdlOiAnJyxcblx0XHRwYXNzZXNBbGxUZXN0czogdHJ1ZVxuXHR9XG5cdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4gPSB7XG5cdFx0J3VzYWJsZSc6ZmFsc2UsIFxuXHRcdCdjbGFzcyc6J2J0biBidG4td2FybmluZycsXG5cdFx0bWVzc2FnZTogJ05lZWQgRW1haWwgJiBQYXNzJ1xuXHR9XG5cblx0Ly9tZXRob2RzXG5cdGZ1bmN0aW9uIG9wZW5Vc2VyTG9naW5CdG4oKSB7XG5cdFx0Ly9jaGVjayB0aGF0IHRoZXJlIGlzIGFuIGVtYWlsIGFuZCB0aGVyZSBpcyBhIHBhc3N3b3JkXG5cdFx0aWYoXHRhbmd1bGFyLmlzRGVmaW5lZCh2bS5pbnB1dHMuZW1haWwpICYmIHZtLmlucHV0cy5lbWFpbCAhPT0gJycgJiZcblx0XHRcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5wYXNzd29yZCkgJiYgdm0uaW5wdXRzLnBhc3N3b3JkICE9PSAnJykgXG5cdFx0e1xuXHRcdFx0dm0uaW5wdXRzLnJlcXVpcmVkRmllbGRzRGVmaW5lZCA9IHRydWU7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLmNsYXNzID0gJ2J0biBidG4tc3VjY2Vzcyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLm1lc3NhZ2UgPSAnTG9naW4nO1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkID0gZmFsc2U7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLmNsYXNzID0gJ2J0biBidG4td2FybmluZyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLm1lc3NhZ2UgPSAnTmVlZCBFbWFpbCAmIFBhc3MnO1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUgPSBmYWxzZTtcblx0XHR9XG5cblx0fVxuXG5cdC8vdmlldyBtb2RlbCBtZXRob2RzXG5cdHZtLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vc2V0IHZhbHVlc1xuXHRcdHZtLmlucHV0cy5lbWFpbCA9ICRkb2N1bWVudC5maW5kKCcjdXNlckVtYWlsJylbMF0udmFsdWU7XG5cdFx0dm0uaW5wdXRzLnBhc3N3b3JkID0gJGRvY3VtZW50LmZpbmQoJyN1c2VyUGFzc3dvcmQnKVswXS52YWx1ZTtcblx0XHRcblx0XHRvcGVuVXNlckxvZ2luQnRuKCk7XG5cdH1cblxuXHR2bS5sb2dpblJlZ2lzdGVyZWRVc2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciByZWdpc3RlcmVkVXNlclNoZXJwYSA9IHRyYWZmaWNWYWxldDtcblxuXHRcdC8vY29uZmlybSBhbGwgZmllbGRzIGFyZSB2YWxpZFxuXHRcdGlmKHRydWUpIHtcblx0XHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBkYXRhYmFzZSA9IGJhY2tlbmRTZXJ2aWNlcztcblx0XHRcdHZhciByZWdpc3RlcmVkVXNlckRhdGEgPSB1c2VyRGF0YTtcblxuXHRcdFx0Ly9tYWludGFpbiBsb2NhbCB2YWx1ZXMgdG8gc3BlZWQgdXAgdXNlciBleHBlcmllbmNlXG5cdFx0XHRyZWdpc3RlcmVkVXNlckRhdGEubG9hZFByaW1hcmllcyh2bS5pbnB1dHMuZW1haWwpO1xuXG5cdFx0XHQvL3ZlcmlmeSB1c2VycyBjcmVkZW50aWFsc1xuXHRcdFx0ZGF0YWJhc2UuTG9naW5SZWdpc3RlcmVkVXNlcih2bS5pbnB1dHMuZW1haWwsIHZtLmlucHV0cy5wYXNzd29yZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXJDcmVkZW50aWFscykge1xuXHRcdFx0XHQvL2lmIG5vIHRyb3VibGUgbG9nZ2luZyBpbiB1cGRhdGUgZXJyb3Igb2JqZWN0XG5cdFx0XHRcdHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyA9IHRydWU7XG5cblx0XHRcdFx0Ly91c2UgdWlkIHRvIGNvbGxlY3QgdXNlciBiaW9cblx0XHRcdFx0ZGF0YWJhc2UuZ2V0VXNlckJpbyh1c2VyQ3JlZGVudGlhbHMudWlkKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbih1c2VyQmlvKSB7XG5cdFx0XHRcdFx0Ly91cGRhdGUgdXNlckRhdGEgbW9kZWwgd2l0aCB1c2VyQmlvXG5cdFx0XHRcdFx0cmVnaXN0ZXJlZFVzZXJEYXRhLnVwZGF0ZUJpbyh1c2VyQmlvKTtcblxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGV2ZW50c1xuXHRcdFx0XHRcdGRhdGFiYXNlLmdldFVzZXJFdmVudHModXNlckNyZWRlbnRpYWxzLnVpZClcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbihhbGxFdmVudHNGb3JUaGlzVXNlcikge1xuXHRcdFx0XHRcdFx0Ly91cGRhdGUgdXNlckRhdGEgbW9kZWwgd2l0aCB1c2VyRXZlbnRzXG5cdFx0XHRcdFx0XHRyZWdpc3RlcmVkVXNlckRhdGEudXBkYXRlQWxsVXNlckV2ZW50cyhhbGxFdmVudHNGb3JUaGlzVXNlcik7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cblx0XHRcdFx0fSlcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgXG5cdFx0XHRcdC8vaWYgdGhlcmUgd2FzIGFuIGVycm9yIGxvZ2dpbmcgaW4sIGxldCB0aGUgdXNlciBrbm93XG5cdFx0XHRcdHZtLmVycm9ycy5tZXNzYWdlID0gbWVzc2FnZTtcblx0XHRcdFx0dm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzID0gZmFsc2U7XG5cdFx0XHR9KVxuXG5cdFx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXh0IHBhZ2UgXG5cdFx0XHRyZWdpc3RlcmVkVXNlclNoZXJwYS5yZWRpcmVjdFRvKCcvdXNlckluZm9ybWF0aW9uJywgJzIzODk0NzMnKTtcblx0XHR9XG5cblx0fVxuXG5cdC8vcnVuIGNvbW1hbmRzXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCd0b3BNZW51Q29udHJvbGxlcicsIHRvcE1lbnVDb250cm9sbGVyKTtcblxudG9wTWVudUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRkb2N1bWVudCcsICckd2luZG93J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdG9wTWVudUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sICRkb2N1bWVudCwgJHdpbmRvdykge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZmJVUkwgPSAnaHR0cHM6Ly9tZWV0dXBwbGFubmVyLmZpcmViYXNlaW8uY29tLyc7XG5cdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXG5cdC8vbG9jYWwgdmFyaWFibGVzXG5cdHZtLmxvZ2dlZEluID0gZmFsc2VcblxuXHQvL3N0eWxlcyB2YXJpYWJsZXNcblx0XG5cdC8vZXZlbnQgbGlzdGVuZXJzXG5cdGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gJGRvY3VtZW50KSB7XG5cdCAgICAkZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9nLmluZm8oJ2FkZGluZyBGYXN0Q2xpY2snKTtcblx0ICAgICAgICBGYXN0Q2xpY2suYXR0YWNoKCRkb2N1bWVudC5ib2R5KTtcblx0ICAgIH0sIGZhbHNlKTtcblx0fVxuXG5cdGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5iaW5kKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcblx0XHR2bS5vblJlc2l6ZUZ1bmN0aW9uKCk7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9KTtcblxuXHRhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRpZigkd2luZG93Lm91dGVyV2lkdGggPCA2MDApIHtcblx0XHRcdHZtLm9uUmVzaXplRnVuY3Rpb24oKTtcblx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblx0XHR9XG5cdH0pXG5cdC8vZHluYW1pY2FsbHkgc2V0IGlucHV0IHdpZHRoXG5cblxuXHQvLyBDcmVhdGUgYSBjYWxsYmFjayB3aGljaCBsb2dzIHRoZSBjdXJyZW50IGF1dGggc3RhdGVcblx0ZnVuY3Rpb24gaW5pdCgpIHtcblx0XHR2bS5vblJlc2l6ZUZ1bmN0aW9uKCk7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXV0aERhdGFDYWxsYmFjayhhdXRoRGF0YSkge1xuXHQgIGlmIChhdXRoRGF0YSkge1xuXHQgICAgJGxvZy5pbmZvKFwiVXNlciBcIiArIGF1dGhEYXRhLnVpZCArIFwiIGlzIGxvZ2dlZCBpbiB3aXRoIFwiICsgYXV0aERhdGEucHJvdmlkZXIpO1xuXHQgICAgdm0ubG9nZ2VkSW4gPSB0cnVlO1xuXHQgIH0gZWxzZSB7XG5cdCAgICAkbG9nLmluZm8oXCJVc2VyIGlzIGxvZ2dlZCBvdXRcIik7XG5cdCAgICB2bS5sb2dnZWRJbiA9IGZhbHNlO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZGlyZWN0KHBhdGgsIHVzZXJEYXRhKSB7XG5cdFx0dmFyIGZ1bGxQYXRoID0gcGF0aCArICcvJyArIHVzZXJEYXRhLnVpZCArICcvJyArIHVzZXJEYXRhLnRva2VuO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0XHQvLyRzY29wZS4kYXBwbHkoKTtcblx0fVxuXG5cdC8vdm0gYWNjZXNzaWJsZSBtZXRob2RzXG5cdHZtLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2cuaW5mbygnbG9nZ2luZyBvdXQhJyk7XG5cdFx0dm0ubG9nZ2VkSW4gPSBmYWxzZTtcblx0XHRyZWYudW5hdXRoKCk7XG5cdFx0cmVkaXJlY3QoJy8nLCB7dWlkOicnLCB0b2tlbjonJ30pO1xuXHR9XG5cblx0dm0ubmF2QmFyTG9naW5SZWdpc3RlcmVkVXNlciA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2cuaW5mbygnbGF1bmNoaW5nIGxvZ2luJyk7XG5cdFx0aWYodHJ1ZSkge1xuXHRcdC8vaWYodm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHRcdFx0Ly9hdXRoZW50aWNhdGUgdGhlIHVzZXJcblx0XHRcdHJlZi5hdXRoV2l0aFBhc3N3b3JkKHtcblx0XHRcdFx0ZW1haWw6IHZtLm5hdmJhclVzZXJFbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHZtLm5hdmJhclVzZXJQYXNzXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvciwgYXV0aERhdGEpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0Vycm9yIExvZ2dpbmcgSW46ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdMb2dnZWQgSW4gc3VjY2Vzc2Z1bGx5OiAnICsgYXV0aERhdGEudWlkKTtcblx0XHRcdFx0XHQkbG9nLmluZm8oYXV0aERhdGEpO1xuXHRcdFx0XHRcdC8vc2F2ZSBhbGwgdGhlIGRhdGFcblxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGJpb1xuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGV2ZW50c1xuXG5cdFx0XHRcdFx0Ly9yZWRpcmVjdFxuXHRcdFx0XHRcdHJlZGlyZWN0KCcvdXNlckluZm9ybWF0aW9uJywgYXV0aERhdGEpO1xuXHRcdFx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblxuXHRcdFx0XHRcdC8vY2xpY2sgY2xvc2VkIHRoZSBuYXZiYXJcblx0XHRcdFx0XHRhbmd1bGFyLmVsZW1lbnQoJy5uYXZiYXItdG9nZ2xlJykuY2xpY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblxuXG5cdFx0fVxuXG5cdH1cblxuXHR2bS5vblJlc2l6ZUZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5hdmJhcklucHV0cyA9IGFuZ3VsYXIuZWxlbWVudCgnLm5hdmJhcklucHV0cycpO1xuXHRcdG5hdmJhcklucHV0cy5jc3MoJ3dpZHRoJywgKCR3aW5kb3cub3V0ZXJXaWR0aCAtIDI2KSArICdweCcpO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNhbGxiYWNrIHRvIGJlIGZpcmVkIGV2ZXJ5IHRpbWUgYXV0aCBzdGF0ZSBjaGFuZ2VzXG5cdHJlZi5vbkF1dGgoYXV0aERhdGFDYWxsYmFjayk7XG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdVc2VyRXZlbnRzQ29udHJvbGxlcicsIFVzZXJFdmVudHNDb250cm9sbGVyKTtcblxuVXNlckV2ZW50c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICckZmlyZWJhc2VPYmplY3QnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBVc2VyRXZlbnRzQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCAkZmlyZWJhc2VPYmplY3QpIHtcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0dmFyIHVzZXJFdmVudHMgPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJ2V2ZW50cycpO1xuXHR2YXIgY3VycmVudFVzZXJCaW8gPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJ2JpbycpO1xuXHR2YXIgdXNlckV2ZW50c1NuYXBzaG90O1xuXG5cdC8vYmluZGluZyBpbXBvcnRhbnQgdmFyaWFibGVzXG5cdHZtLmV2ZW50cyA9ICRmaXJlYmFzZU9iamVjdCh1c2VyRXZlbnRzKTtcblxuXHR2bS5zaG93RGVjbGluZSA9IGZhbHNlO1xuXHRcblx0Y3VycmVudFVzZXJCaW8uY2hpbGQoJ25hbWUnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdHZtLmN1cnJlbnRVc2VyTmFtZSA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdCRsb2cuaW5mbygnZ290IHRoZSB1c2VyIG5hbWUnKTtcblx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdH0sIGZ1bmN0aW9uKGVycm9yT2JqZWN0KSB7XG5cdFx0JGxvZy5pbmZvKFwiVGhlIHJlYWQgZmFpbGVkOiBcIiArIGVycm9yT2JqZWN0LmNvZGUpO1xuXHR9KTtcblxuXHQvL2RlY2xhcmUgbG9jYWwgbWV0aG9kc1xuXHRmdW5jdGlvbiB1bml4VGltZVRvRGF0ZVRpbWUodW5peFRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0fTtcblxuXHRmdW5jdGlvbiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVFdmVudElEKGRhdGUsIG5vT2ZFdmVudHNBbHJlYWR5KSB7XG5cdFx0cmV0dXJuIChkYXRlICogMTApICsgbm9PZkV2ZW50c0FscmVhZHk7XG5cdH1cblxuXHQvL2RlY2xhcmUgdmlldyBtZXRob2RzXG5cdGZ1bmN0aW9uIGV2ZW50UmVkaXJlY3QocGF0aCwgZXZlbnRJRCwgaG9zdElkKSB7XG5cdFx0dmFyIGZ1bGxQYXRoID0gcGF0aCArICcvJyArIGV2ZW50SUQgKyAnLycgKyBob3N0SWQgKyAnLycrICRyb3V0ZVBhcmFtcy51aWQgKyAnLycgKyAkcm91dGVQYXJhbXMudG9rZW47XG5cdFx0Ly9yZWRpcmVjdFxuXHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86ICcgKyBmdWxsUGF0aCk7XG5cdFx0JGxvY2F0aW9uLnBhdGgoZnVsbFBhdGgpO1xuXHR9XG5cblx0dm0uZXZlbnRzQXJlQmVpbmdIb3N0ZWQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZXZlbnRGb3VuZCA9IGZhbHNlO1xuXHRcdGZvcihlbGVtZW50IGluIHZtLmV2ZW50cy5ob3N0aW5nKSB7XG5cdFx0XHRpZihlbGVtZW50ICE9ICd1cGRhdGVkJyl7XG5cdFx0XHRcdGV2ZW50Rm91bmQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZXZlbnRGb3VuZDtcblx0fVxuXG5cdHZtLmV2ZW50SW52aXRhdGlvbnNQZW5kaW5nID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGV2ZW50Rm91bmQgPSBmYWxzZTtcblx0XHRmb3IoZWxlbWVudCBpbiB2bS5ldmVudHMucGVuZGluZykge1xuXHRcdFx0aWYoZWxlbWVudCAhPSAndXBkYXRlZCcpe1xuXHRcdFx0XHRldmVudEZvdW5kID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGV2ZW50Rm91bmQ7XG5cdH1cblxuXHR2bS5hdHRlbmRpbmdFdmVudHMgPSBmdW5jdGlvbihndWVzdExpc3QpIHtcblx0XHR2YXIgZXZlbnRGb3VuZCA9IGZhbHNlO1xuXHRcdGZvcihlbGVtZW50IGluIHZtLmV2ZW50cy5hdHRlbmRpbmcpIHtcblx0XHRcdGlmKGVsZW1lbnQgIT0gJ3VwZGF0ZWQnKXtcblx0XHRcdFx0ZXZlbnRGb3VuZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBldmVudEZvdW5kO1xuXHR9XG5cblx0dm0ucGVyY2VudFJTVlBlZCA9IGZ1bmN0aW9uKGd1ZXN0TGlzdCkge1x0XHRcblx0XHRpZihndWVzdExpc3QpIHtcblx0XHRcdHJldHVybiAodm0udG90YWxBdHRlbmRpbmcoZ3Vlc3RMaXN0KSAvIHZtLnRvdGFsSW52aXRlZChndWVzdExpc3QpKSAqIDEwMDtcblx0XHR9XG5cdFx0ZWxzZSByZXR1cm4gMDtcblx0fVxuXG5cdHZtLnRvdGFsQXR0ZW5kaW5nID0gZnVuY3Rpb24oZ3Vlc3RMaXN0KSB7XG5cdFx0aWYoZ3Vlc3RMaXN0KSB7XG5cdFx0XHR2YXIgYXR0ZW5kaW5nID0gMDtcblx0XHRcdGFuZ3VsYXIuZm9yRWFjaChndWVzdExpc3QsIGZ1bmN0aW9uKGd1ZXN0LCBpZCkge1xuXHRcdFx0XHRpZihndWVzdC5hdHRlbmRpbmcgPT0gdHJ1ZSkgYXR0ZW5kaW5nKys7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBhdHRlbmRpbmc7XG5cdFx0fVxuXHRcdGVsc2UgcmV0dXJuIDA7XG5cdH1cblxuXHR2bS50b3RhbEludml0ZWQgPSBmdW5jdGlvbihndWVzdExpc3QpIHtcblx0XHRpZihndWVzdExpc3QpIHtcblx0XHRcdHZhciBpbnZpdGVkID0gMDtcblx0XHRcdGFuZ3VsYXIuZm9yRWFjaChndWVzdExpc3QsIGZ1bmN0aW9uKGd1ZXN0LCBpZCkge1xuXHRcdFx0XHRpbnZpdGVkKys7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBpbnZpdGVkO1xuXHRcdH1cblx0XHRlbHNlIHJldHVybiAwO1xuXHR9XG5cblx0dm0uYWNjZXB0RXZlbnRJbnZpdGF0aW9uID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHQvKlxuXHRcdCRsb2cuaW5mbyhldmVudC5ob3N0KTtcblx0XHQkbG9nLmluZm8oZXZlbnQuaWQpO1xuXHRcdC8vdXBkYXRlIGhvc3RzJyBsaXN0c1xuXHRcdHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZChldmVudC5ob3N0KS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ2hvc3RpbmcnKS5jaGlsZChldmVudC5pZCkuY2hpbGQoJ2d1ZXN0TGlzdCcpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLnVwZGF0ZSh7XG5cdFx0XHRhdHRlbmRpbmc6IHRydWUsXG5cdFx0XHRzdGF0dXM6ICdhdHRuZG5nJ1xuXHRcdH0pO1xuXG5cdFx0Ly91cGRhdGUgZ3Vlc3QncyBsaXN0c1xuXHRcdC8vYWRkIHRvIHRoZSBhdHRlbmRpbmcgbGlzdCAtIG9uIHRoZSBzZXJ2ZXJcblx0XHR1c2VyRXZlbnRzLmNoaWxkKCdhdHRlbmRpbmcnKS5jaGlsZChldmVudC5ob3N0KS5jaGlsZChldmVudC5pZCkuc2V0KHtcblx0XHRcdGlkOiBldmVudC5pZCxcblx0XHRcdGhvc3Q6IGV2ZW50Lmhvc3QsXG5cdFx0XHRldmVudFRpbWVzOiB7XG5cdFx0XHRcdHN0YXJ0OiB2bS5ldmVudHMucGVuZGluZ1tldmVudC5ob3N0XVtldmVudC5pZF0uZXZlbnRUaW1lcy5zdGFydCxcblx0XHRcdFx0ZW5kOiB2bS5ldmVudHMucGVuZGluZ1tldmVudC5ob3N0XVtldmVudC5pZF0uZXZlbnRUaW1lcy5lbmRcblx0XHRcdH0sXG5cdFx0XHRuYW1lOiB2bS5ldmVudHMucGVuZGluZ1tldmVudC5ob3N0XVtldmVudC5pZF0ubmFtZVxuXHRcdH0pO1xuXHRcdC8vYWRkIHRvIHRoZSBhdHRlbmRpbmcgbGlzdCAtIGluIHRoZSBicm93c2VyXG5cdFx0dm0uZXZlbnRzLmF0dGVuZGluZ1tldmVudC5ob3N0XVtldmVudC5pZF0gPSB7XG5cdFx0XHRpZDogZXZlbnQuaWQsXG5cdFx0XHRob3N0OiBldmVudC5ob3N0LFxuXHRcdFx0ZXZlbnRUaW1lczoge1xuXHRcdFx0XHRzdGFydDogdm0uZXZlbnRzLnBlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdLmV2ZW50VGltZXMuc3RhcnQsXG5cdFx0XHRcdGVuZDogdm0uZXZlbnRzLnBlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdLmV2ZW50VGltZXMuZW5kXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogdm0uZXZlbnRzLnBlbmRpbmdbZXZlbnQuaG9zdF1bZXZlbnQuaWRdLm5hbWVcblx0XHR9O1xuXG5cdFx0Ly9yZW1vdmUgZnJvbSB0aGUgcGVuZGluZyBsaXN0IC0gb24gdGhlIHNlcnZlclxuXHRcdHVzZXJFdmVudHMuY2hpbGQoJ3BlbmRpbmcnKS5jaGlsZChldmVudC5ob3N0KS5jaGlsZChldmVudC5pZCkucmVtb3ZlKCk7XG5cdFx0Ly9yZW1vdmUgZnJvbSB0aGUgcGVuZGluZyBsaXN0IC0gaW4gdGhlIGJyb3dzZXJcblx0XHR2bS5ldmVudHMucGVuZGluZ1tldmVudC5ob3N0XVtldmVudC5pZF0gPSB7fTtcblx0XHQqL1xuXHR9XG5cblx0dm0ucmVkaXJlY3RUb0hvc3RlZEV2ZW50ID0gZnVuY3Rpb24oZXZlbnRJRCkge1xuXHRcdCRsb2cuaW5mbygneW91XFwncmUgYWNjZXNzaW5nIGV2ZW50ICcgKyBldmVudElEKTtcblxuXHRcdC8vcmVkaXJlY3QgdG8gdGhlIGV2ZW50XG5cdFx0ZXZlbnRSZWRpcmVjdCgnL2V2ZW50JywgZXZlbnRJRCwgJHJvdXRlUGFyYW1zLnVpZCk7XG5cdH1cblxuXHR2bS5yZWRpcmVjdFRvM3JkUGFydHlFdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBpbnZpdGVTdGF0dXMpIHtcblx0XHQkbG9nLmluZm8oZXZlbnQpO1xuXG5cdFx0Ly9nZXR0aW5nIHRoZSBob3N0J3MgSWRcblx0XHRpZihpbnZpdGVTdGF0dXMgPT0gJ3BlbmRpbmcnKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2FjY2Vzc2luZyBmcm9tIGEgcGVuZGluZyBpbnZpdGF0aW9uJyk7XG5cdFx0XHQkbG9nLmluZm8oZXZlbnQpO1xuXHRcdFx0ZXZlbnRSZWRpcmVjdCgnL2V2ZW50JywgZXZlbnQuaWQsIGV2ZW50Lmhvc3QpO1xuXG5cdFx0fSBlbHNlIGlmKGludml0ZVN0YXR1cyA9PSAnYXR0ZW5kaW5nJykge1xuXHRcdFx0JGxvZy5pbmZvKCdhY2Nlc3NpbmcgZnJvbSBhbiByc3ZwZWQgaW52aXRhdGlvbicpO1xuXHRcdFx0ZXZlbnRSZWRpcmVjdCgnL2V2ZW50JywgZXZlbnQuaWQsIGV2ZW50Lmhvc3QpO1xuXHRcdH1cblxuXHRcdC8vcmVkaXJlY3RpbmcgdG8gdGhlIGV2ZW50XG5cblx0fVxuXG5cdHZtLmNyZWF0ZU5ld0V2ZW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvZy5pbmZvKCd5b3VcXCdyZSBjcmVhdGluZyBhIG5ldyBldmVudCEnKTtcblxuXHRcdC8vZGVmaW5lIHRoZSBldmVudElEXG5cdFx0dmFyIGRhdGUgPSBuZXcgRGF0ZSgpOyBcblx0XHRcdGlmKHZtLmV2ZW50cy5ob3N0aW5nKSBub09mRXZlbnRzQWxyZWFkeSA9IE9iamVjdC5rZXlzKHZtLmV2ZW50cy5ob3N0aW5nKS5sZW5ndGg7XG5cdFx0XHRlbHNlIG5vT2ZFdmVudHNBbHJlYWR5ID0gMDtcblx0XHR2YXIgZXZlbnRJRCA9IGdlbmVyYXRlRXZlbnRJRChkYXRlVGltZVRvVW5peFRpbWUoZGF0ZSksIG5vT2ZFdmVudHNBbHJlYWR5KTtcblxuXHRcdC8vY3JlYXRlIGV2ZW50IG1vZGVsIHRvIHN0YXJ0IHdpdGhcblx0XHQvLyRsb2cuaW5mbyh2bS5ldmVudHNbJ2hvc3RpbmcnXSk7XG5cdFx0dm0uZXZlbnRzLmhvc3RpbmdbZXZlbnRJRF0gPSB7XG5cdFx0XHRpZDogZXZlbnRJRCxcblx0XHRcdGV2ZW50VGltZXM6IHtcblx0XHRcdFx0c3RhcnQ6IGRhdGVUaW1lVG9Vbml4VGltZShkYXRlKSxcblx0XHRcdFx0ZW5kOiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZSlcblx0XHRcdH0sXG5cdFx0XHRob3N0OiB7IFxuXHRcdFx0XHRpZDogJHJvdXRlUGFyYW1zLnVpZCxcblx0XHRcdFx0bmFtZTogdm0uY3VycmVudFVzZXJOYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vZGVsZXRlIHRoZSAndXBkYXRlZCcgZmllbGRcblx0XHRpZih2bS5ldmVudHMuaG9zdGluZy51cGRhdGVkID09ICcnIHx8IHZtLmV2ZW50cy5ob3N0aW5nLnVwZGF0ZWQpIHtcblx0XHRcdCRsb2cuaW5mbygnZGVsZXRpbmcgdGhlIHVwZGF0ZWQgZmllbGQnKTtcblx0XHRcdGRlbGV0ZSB2bS5ldmVudHMuaG9zdGluZy51cGRhdGVkO1xuXHRcdH1cblx0XHQvL3NhdmUgdGhlIG5ldyBldmVudFxuXHRcdC8qXG5cdFx0dm0uZXZlbnRzLiRzYXZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdCRsb2cuaW5mbygnUHJvZmlsZSBzYXZlZCEnKTtcblx0XHRcdCRsb2cuaW5mbyh2bS5ldmVudHMuaG9zdGluZ1tldmVudElEXSk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdCRsb2cuaW5mbygnRXJyb3IhJyk7XG5cdFx0fSk7Ki9cblxuXHRcdC8vcmVkaXJlY3QgdG8gdGhlIG5ldyBFdmVudCBQYWdlXG5cdFx0ZXZlbnRSZWRpcmVjdCgnL2V2ZW50JywgZXZlbnRJRCwgJHJvdXRlUGFyYW1zLnVpZCk7XG5cdH1cblxuXHQvL2V4ZWN1dGUgc2NyaXB0c1xuXHQkbG9nLmluZm8oJ2ludG8gdGhlIHVzZXIgRXZlbnRzIGNvbnRyb2xsZXInKTtcblx0JGxvZy5pbmZvKHZtLmV2ZW50cyk7XG5cbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignVXNlckluZm9ybWF0aW9uQ29udHJvbGxlcicsIFVzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXIpO1xuXG5Vc2VySW5mb3JtYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJGRvY3VtZW50JywgJ3VzZXJEYXRhJywgJ3RyYWZmaWNWYWxldCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIFVzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXIoJGxvZywgJGRvY3VtZW50LCB1c2VyRGF0YSwgdHJhZmZpY1ZhbGV0KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdFxuXHQvL2xvY2FsIHZhcmlhYmxlc1xuXHR2YXIgY3VycmVudFVzZXIgPSB1c2VyRGF0YTtcblxuXHQvL3ZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdHZtLnVzZXIgPSB7fTtcblx0dm0udGVtcEJpcnRoZGF5O1xuXHR2bS52aWV3ID0ge1xuXHRcdGRhdGFUb1NhdmU6IGZhbHNlLFxuXHRcdGlzRGF0YTogZmFsc2UsXG5cdFx0YnRuTXNzZzogJ01vdmUgT24uLi4nLFxuXHRcdHByb2NlZWRCdG46ICdidG4gYnRuLXByaW1hcnknXG5cdH07XG5cblx0Ly9sb2NhbCBtZXRob2RzXG5cdGZ1bmN0aW9uIHVuaXhUaW1lVG9EYXRlVGltZSh1bml4VGltZSkge1xuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh1bml4VGltZSkpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGRhdGVUaW1lVG9Vbml4VGltZShkYXRlVGltZSkge1xuXHRcdHJldHVybiBEYXRlLnBhcnNlKGRhdGVUaW1lKTtcblx0fTtcblxuXHQvL3ZpZXcgYWNjZXNzaWJsZSBtZXRob2RzXG5cdHZtLmNoZWNrVmFsdWVzID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoICEoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS51c2VyLmNvbXBhbnkpIHx8IHZtLnVzZXIuY29tcGFueSA9PT0gJycpIHx8IFxuXHRcdFx0IShhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLnVzZXIudGl0bGUpIHx8IHZtLnVzZXIudGl0bGUgPT09ICcnKSB8fCBcblx0XHRcdCEoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS51c2VyLmRvYikgfHwgdm0udXNlci5kb2IgPT09ICcnKSkgXG5cdFx0e1xuXHRcdFx0dm0udmlldy5kYXRhVG9TYXZlID0gdHJ1ZTtcblx0XHRcdHZtLnZpZXcucHJvY2VlZEJ0biA9ICdidG4gYnRuLXN1Y2Nlc3MnO1xuXHRcdFx0dm0udmlldy5idG5Nc3NnID0gJ1NhdmUgJiBDb250aW51ZSc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZtLnZpZXcuZGF0YVRvU2F2ZSA9IGZhbHNlO1xuXHRcdFx0dm0udmlldy5wcm9jZWVkQnRuID0gJ2J0biBidG4tcHJpbWFyeSc7XG5cdFx0XHR2bS52aWV3LmJ0bk1zc2cgPSAnTW92ZSBPbi4uLic7XHRcblx0XHR9XG5cblx0fVxuXG5cdHZtLnVwZGF0ZURPQiA9IGZ1bmN0aW9uKCkge1xuXHRcdHZtLnVzZXIuZG9iID0gZGF0ZVRpbWVUb1VuaXhUaW1lKHZtLnRlbXBCaXJ0aGRheSk7XG5cdH1cblxuXHR2bS5zYXZlQW5kTW92ZU9uID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgdXNlckluZm9TaGVycGEgPSB0cmFmZmljVmFsZXQ7XG5cblx0XHQvL2NvbnZlcnQgRE9CIHRvIGJlIHNhdmVcblx0XHR2bS51cGRhdGVET0IoKTtcblx0XHRcblx0XHQvL2lmIHRoZXJlIGlzIG5ldyBkYXRhLCBzYXZlIGl0XG5cdFx0aWYodm0udmlldy5pc0RhdGEpIHtcblx0XHRcdGN1cnJlbnRVc2VyLnVwZGF0ZUJpbyh2bS51c2VyKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9tb3ZlIG9uXG5cdFx0dXNlckluZm9TaGVycGEucmVkaXJlY3RUbygnL3VzZXJFdmVudHMnLCB2bS51c2VyLnVpZClcblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG5cdFx0JGxvZy5pbmZvKCdpbml0aWFsaXppbmcgdGhlIHVzZXIgaW5mb3JtYXRpb24gcGFnZScpO1xuXHRcdC8vbG9hZCBGYXN0Q2xpY2tcblx0XHQvL0Zhc3RDbGljay5hdHRhY2goJGRvY3VtZW50LmJvZHkpO1xuXG5cdFx0Ly9sb2FkIHVzZXJEYXRhXG5cdFx0Y3VycmVudFVzZXIubG9hZEJpbygpXG5cdFx0LnRoZW4oZnVuY3Rpb24odXNlckRhdGEpIHtcblx0XHRcdC8vYXNzaWduIHVzZXIgdmFsdWVzXG5cdFx0XHR2bS51c2VyID0gdXNlckRhdGE7XG5cblx0XHRcdC8vYnVpbGQgdGVtcEJpcnRoZGF5XG5cdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh1c2VyRGF0YS5kb2IpICYmIHVzZXJEYXRhLmRvYiAhPT0gJycpIHtcblx0XHRcdFx0dm0udGVtcEJpcnRoZGF5ID0gdW5peFRpbWVUb0RhdGVUaW1lKHVzZXJEYXRhLmRvYilcblx0XHRcdH1cblxuXHRcdH0pO1xuXHRcdFxuXHRcblx0fVxuXG5cdC8vZXZlbnQgTGlzdGVuZXJzXG5cdC8qaWYgKCdhZGRFdmVudExpc3RlbmVyJyBpbiAkZG9jdW1lbnQpIHtcblx0ICAgICRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG5cdCAgICBcdC8vb24gcGFnZSBsb2FkXG5cdCAgICBcdGluaXRpYWxpemUoKTtcblx0ICAgICAgICBcblx0ICAgIH0sIGZhbHNlKTtcblx0fSovXG5cdC8vcnVuIHByb2Nlc3Nlc1xuXHRpbml0aWFsaXplKCk7IC8vd2l0aCBpbnRlcm5ldCB1c2UgdGhlIGV2ZW50IGxpc3RlbmVyIGluc3RlYWRcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ2F1dGhTZXJ2aWNlJywgYXV0aFNlcnZpY2UpO1xuXG5hdXRoU2VydmljZS4kaW5qZWN0ID0gWyckbG9nJywgJyRxJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGF1dGhTZXJ2aWNlKCRsb2csICRxLCAkbG9jYXRpb24pIHtcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHR2YXIgYWxsQXV0aFNlcnZpY2VzID0ge1xuXHRcdGlzTG9nZ2VkSW46IGlzTG9nZ2VkSW5cblx0fTtcblxuXHRmdW5jdGlvbiBhdXRoRGF0YUNhbGxiYWNrKGF1dGhEYXRhKSB7XG5cdCAgXG5cdCAgaWYgKGF1dGhEYXRhKSB7XG5cdCAgICAkbG9nLmluZm8oXCJVc2VyIFwiICsgYXV0aERhdGEudWlkICsgXCIgaXMgbG9nZ2VkIGluIHdpdGggXCIgKyBhdXRoRGF0YS5wcm92aWRlcik7XG5cdCAgfSBlbHNlIHtcblx0ICAgICRsb2cuaW5mbyhcIlVzZXIgaXMgbG9nZ2VkIG91dC4uLmR1bXBpbmcgdGhlbSBiYWNrIHRvIGxhbmRpbmcgcGFnZVwiKTtcblx0ICAgIC8vZHVtcCB0aGUgdXNlciBiYWNrIG91dFxuXHQgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuXHRcdC8vY2hlY2sgdGhlIHVzZXIgYXV0aGVudGljYWlvbiBzdGF0ZVxuXHRcdCRsb2cuaW5mbygnbG9nZ2luZyBmcm9tIHRoZSBpc0xvZ2dlZEluIE1ldGhvZCcpO1xuXHRcdC8vcmVmLm9uQXV0aChhdXRoRGF0YUNhbGxiYWNrKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRcblx0cmV0dXJuIGFsbEF1dGhTZXJ2aWNlcztcblxufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuZmFjdG9yeSgnYmFja2VuZFNlcnZpY2VzJywgYmFja2VuZFNlcnZpY2VzKTtcblxuYmFja2VuZFNlcnZpY2VzLiRpbmplY3QgPSBbJyRsb2cnLCAnJHEnLCAnJHdpbmRvdyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGJhY2tlbmRTZXJ2aWNlcygkbG9nLCAkcSwgJHdpbmRvdykge1xuXHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdHZhciBmYlVSTCA9ICdodHRwczovL21lZXR1cHBsYW5uZXIuZmlyZWJhc2Vpby5jb20vJztcblx0dmFyIGFsbEJhY2tlbmRTZXJ2aWNlcyA9IHtcblx0XHR1dGY4X3RvX2I2NDogdXRmOF90b19iNjQsXG5cdFx0YjY0X3RvX3V0Zjg6IGI2NF90b191dGY4LFxuXHRcdHVuaXhUaW1lVG9EYXRlVGltZTogdW5peFRpbWVUb0RhdGVUaW1lLFxuXHRcdGRhdGVUaW1lVG9Vbml4VGltZTogZGF0ZVRpbWVUb1VuaXhUaW1lLFx0XHRcblx0XHRjcmVhdGVOZXdVc2VyOiBjcmVhdGVOZXdVc2VyLFxuXHRcdExvZ2luUmVnaXN0ZXJlZFVzZXI6IExvZ2luUmVnaXN0ZXJlZFVzZXIsXG5cdFx0YWRkTmV3VXNlclRvRGF0YWJhc2U6IGFkZE5ld1VzZXJUb0RhdGFiYXNlLFxuXHRcdGFkZE5ld1VzZXJUb1JlZ1VzZXJzTGlzdDogYWRkTmV3VXNlclRvUmVnVXNlcnNMaXN0LFxuXHRcdHVwbG9hZFVzZXJEYXRhOiB1cGxvYWRVc2VyRGF0YSxcblx0XHRkb3dubG9hZFVzZXJEYXRhOiBkb3dubG9hZFVzZXJEYXRhLFxuXHRcdGdldFVzZXJCaW86IGdldFVzZXJCaW8sXG5cdFx0Z2V0VXNlckV2ZW50czogZ2V0VXNlckV2ZW50c1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHV0ZjhfdG9fYjY0KHN0cikge1xuXHRcdHJldHVybiBidG9hKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRfdG9fdXRmOChzdHIpIHtcbiAgICBcdHJldHVybiBhdG9iKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiB1bml4VGltZVRvRGF0ZVRpbWUodW5peFRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRhdGVUaW1lVG9Vbml4VGltZShkYXRlVGltZSkge1xuXHRcdHJldHVybiBEYXRlLnBhcnNlKGRhdGVUaW1lKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZU5ld1VzZXIoZW1haWwsIHBhc3N3b3JkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBmaXJlQmFzZUFjY291bnRzID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHRcblx0XHQvL3JldHVybiBhIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdC8qZmlyZUJhc2VBY2NvdW50cy5jcmVhdGVVc2VyKHtcblx0XHRcdFx0XG5cdFx0XHRcdGVtYWlsOiBlbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0XHRcblx0XHRcdH0sZnVuY3Rpb24oZXJyb3IsIHVzZXJEYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KCdFcnJvciBjcmVhdGluZyB1c2VyOiAnICsgZXJyb3IpO1xuXG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSh1c2VyRGF0YSk7XG5cdFx0XHR9Ki9cblx0XHRcdCR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzb2x2ZSh7dWlkOjEyMzQ1NjcgfSk7XG5cdFx0XHR9LCAyMDAwKTtcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZE5ld1VzZXJUb0RhdGFiYXNlKHVpZCwgbmFtZSwgZW1haWwpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIGFwcFVzZXJzID0gYXBwLmNoaWxkKCdVc2Vycy8nICsgdWlkKTtcblx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0Ly9yZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQvKmFwcFVzZXJzLnNldCh7IFxuXHRcdFx0XHQnYmlvJzoge1xuXHRcdFx0XHRcdCduYW1lJzogbmFtZSxcblx0XHRcdFx0XHQnZW1haWwnOiBlbWFpbFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQnZXZlbnRzJzoge1xuXHRcdFx0XHRcdCdwZW5kaW5nJzoge1xuXHRcdFx0XHRcdFx0J3VwZGF0ZWQnOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQnaG9zdGluZyc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2F0dGVuZGluZyc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2NvbXBsZXRlZCc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnRGF0YSBjb3VsZCBub3QgYmUgc2F2ZWQ6ICcgKyBlcnJvcik7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbHNlIHJlc29sdmUoJ0RhdGEgc2F2ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXG5cdFx0XHR9KTsqL1xuXG5cdFx0XHQkd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJlc29sdmUoJ0RhdGEgc2F2ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdFx0fSwgMjAwMCk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWRkTmV3VXNlclRvUmVnVXNlcnNMaXN0KHVpZCwgZW1haWwpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIFJlZ2lzdGVyZWRVc2Vyc0xpc3QgPSBhcHAuY2hpbGQoJ1VpZHMnKS5jaGlsZCh1dGY4X3RvX2I2NChlbWFpbCkpO1xuXG5cdFx0Ly9yZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQvKlJlZ2lzdGVyZWRVc2Vyc0xpc3Quc2V0KHVpZCwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdChcIkRhdGEgY291bGQgbm90IGJlIHNhdmVkLiBcIiArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKFwidWlkIGNyZWF0ZWQgc3VjZXNzZnVsbHkuXCIpO1xuXHRcdFx0fSk7Ki9cblxuXHRcdFx0JHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXNvbHZlKFwidWlkIGNyZWF0ZWQgc3VjZXNzZnVsbHkuXCIpO1xuXHRcdFx0fSwgMjAwMCk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gTG9naW5SZWdpc3RlcmVkVXNlcihlbWFpbCwgcGFzc3dvcmQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0XG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvKi8vYXV0aGVudGljYXRlIHRoZSB1c2VyXG5cdFx0XHRhcHAuYXV0aFdpdGhQYXNzd29yZCh7XG5cblx0XHRcdFx0ZW1haWw6IGVtYWlsLFxuXHRcdFx0XHRwYXNzd29yZDogcGFzc3dvcmRcblxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IsIGF1dGhEYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdCgnRXJyb3IgTG9nZ2luZyBJbjogJyArIGVycm9yKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0xvZ2dlZCBJbiBzdWNjZXNzZnVsbHk6ICcgKyBhdXRoRGF0YS51aWQpO1xuXHRcdFx0XHRcdHJlc29sdmUoYXV0aERhdGEpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0pOyovXG5cblx0XHRcdCR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzb2x2ZSh7IHVpZDogJzIwOThzai1kamlzbzkyLXNqaXInIH0pO1xuXHRcdFx0fSwgMjAwMCk7XG5cblx0XHR9KTtcblx0XHRcblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZFVzZXJEYXRhKGFsbFVzZXJEYXRhKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBjdXJyZW50VXNlciA9IGFwcC5jaGlsZCgnVXNlcnMvJyArIGFsbFVzZXJEYXRhLnVpZCk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdGhlIGFjdHVhbCBjYWxsXG5cdFx0XHQvKmN1cnJlbnRVc2VyLnVwZGF0ZShhbGxVc2VyRGF0YSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnVGhlcmUgd2FzIGEgcHJvYmxlbSB1cGRhdGluZyB0aGF0IHJlY29yZDogJyArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdhbGwgdXNlciBkYXRhIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScpO1xuXHRcdFx0fSk7Ki9cblx0XHRcdCR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzb2x2ZSgnYWxsIHVzZXIgZGF0YSB1cGxvYWRlZCBzdWNjZXNzZnVsbHknKTtcblx0XHRcdH0sIDIwMDApO1xuXG5cdFx0fSk7XG5cdFx0XG5cdH1cblxuXHRmdW5jdGlvbiBkb3dubG9hZFVzZXJEYXRhKCkge1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyQmlvKHVpZCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgdXNlckJpbyA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdiaW8nKTtcblxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90aGUgYWN0dWFsIGNhbGxcblx0XHRcdC8qY2FsbCBnb2VzIGhlcmUqL1xuXHRcdFx0JHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXNvbHZlKHtcblx0XHRcdFx0XHR1aWQ6ICdzb2FpdTAtOTI4M20tbXNvU0EtMm0zLXNyZXcnLFxuXHRcdFx0XHRcdG5hbWU6ICdJYW4gTWNBbGxpc3RlcicsXG5cdFx0XHRcdFx0ZW1haWw6ICdpZW1jYWxsaXN0ZXJAZ21haWwuY29tJyxcblx0XHRcdFx0XHRjb21wYW55OiAnJyxcblx0XHRcdFx0XHR0aXRsZTogJydcblx0XHRcdFx0fSk7XG5cdFx0XHR9LCAyMDAwKTtcblxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VXNlckV2ZW50cyh1aWQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIHVzZXJCaW8gPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnYmlvJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdGhlIGFjdHVhbCBjYWxsXG5cdFx0XHQvKmNhbGwgZ29lcyBoZXJlKi9cblx0XHRcdCR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzb2x2ZSh7XG5cdFx0XHRcdFx0aG9zdGluZzogeyBpZDogJzk4Mzc0MjMnIH0sXG5cdFx0XHRcdFx0cGVuZGluZzogeyBpZDogJzMyMDk3NDInIH0sXG5cdFx0XHRcdFx0YXR0ZW5kaW5nOiB7IGlkOiAnNDA5ODInIH0sXG5cdFx0XHRcdFx0Y29tcGxldGVkOiB7IGlkOiAnMzI5NTcnIH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9LCAyMDAwKTtcblxuXHRcdH0pO1xuXHR9XG5cblx0Ly9yZXR1cm4gdGhlIG9iamVjdFxuXHRyZXR1cm4gYWxsQmFja2VuZFNlcnZpY2VzO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuZmFjdG9yeSgndHJhZmZpY1ZhbGV0JywgdHJhZmZpY1ZhbGV0KTtcblxudHJhZmZpY1ZhbGV0LiRpbmplY3QgPSBbJyRsb2cnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdHJhZmZpY1ZhbGV0KCRsb2csICRsb2NhdGlvbikge1xuXHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdHZhciBhbGxUcmFmZmljQ29udHJvbHMgPSB7XG5cdFx0cmVkaXJlY3RUbzogcmVkaXJlY3RUb1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHJlZGlyZWN0VG8ocGF0aCwgcGFyYW0xLCBwYXJhbTIpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChwYXJhbTEpKSB7XG5cdFx0XHRwYXRoID0gcGF0aCArICcvJyArIHBhcmFtMTtcblxuXHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQocGFyYW0yKSkge1xuXHRcdFx0XHQvL2dvIHRvIHBhdGggd2l0aCAyIHBhcmFtc1xuXHRcdFx0XHRwYXRoID0gcGF0aCArICcvJyArIHBhcmFtMjtcblx0XHRcdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyBub3cgdG8gJyArIHBhdGgpO1xuXHRcdFx0XHQkbG9jYXRpb24ucGF0aChwYXRoKTtcblx0XHRcdH1cblx0XHRcdC8vZ28gd2l0aCAxIHBhcmFtXG5cdFx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIG5vdyB0byAnICsgcGF0aCk7XG5cdFx0XHQkbG9jYXRpb24ucGF0aChwYXRoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly9qdXN0IGdvIHRvIHBhdGhcblx0XHRcdCRsb2cuaW5mbygncmVkaXJlY3Rpbmcgbm93IHRvICcgKyBwYXRoKTtcblx0XHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGFsbFRyYWZmaWNDb250cm9scztcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ3VzZXJEYXRhJywgdXNlckRhdGEpO1xuXG51c2VyRGF0YS4kaW5qZWN0ID0gWyckbG9nJywgJyRxJywgJ2JhY2tlbmRTZXJ2aWNlcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHVzZXJEYXRhKCRsb2csICRxLCBiYWNrZW5kU2VydmljZXMpIHtcblx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHR2YXIgY3VycmVudFVzZXIgPSB7XG5cdFx0YmlvOiB7IFxuXHRcdFx0dWlkOiAnJyxcblx0XHRcdG5hbWU6ICcnLFxuXHRcdFx0ZW1haWw6ICcnLFxuXHRcdFx0Y29tcGFueTogJycsXG5cdFx0XHR0aXRsZTogJycsXG5cdFx0XHRkb2I6IDBcblx0XHR9LFxuXHRcdGhvc3Rpbmc6IHt9LFxuXHRcdHBlbmRpbmc6IHt9LFxuXHRcdGF0dGVuZGluZzoge30sXG5cdFx0Y29tcGxldGVkOiB7fVxuXHR9O1xuXG5cdHZhciBhbGxVc2VyRGF0YSA9IHtcblx0XHRnZXRVSUQ6IGdldFVJRCxcblx0XHRnZXROYW1lOiBnZXROYW1lLFxuXHRcdGdldEVtYWlsOiBnZXRFbWFpbCxcblx0XHRnZXRDb21wYW55OiBnZXRDb21wYW55LFxuXHRcdGdldFRpdGxlOiBnZXRUaXRsZSxcblx0XHRnZXRET0I6IGdldERPQixcblx0XHRnZXRVc2VyRXZlbnRzOiBnZXRVc2VyRXZlbnRzLFxuXHRcdFxuXHRcdHNldFVJRDogc2V0VUlELFxuXHRcdHNldE5hbWU6IHNldE5hbWUsXG5cdFx0c2V0RW1haWw6IHNldEVtYWlsLFxuXHRcdHNldENvbXBhbnk6IHNldENvbXBhbnksXG5cdFx0c2V0VGl0bGU6IHNldFRpdGxlLFxuXHRcdHNldERPQjogc2V0RE9CLFxuXHRcdHVwZGF0ZVVzZXJFdmVudHM6IHVwZGF0ZVVzZXJFdmVudHMsXG5cdFx0dXBkYXRlQWxsVXNlckV2ZW50czogdXBkYXRlQWxsVXNlckV2ZW50cyxcblx0XHR1cGRhdGVCaW86IHVwZGF0ZUJpbyxcblxuXHRcdHJlbW92ZVVzZXJFdmVudHM6IHJlbW92ZVVzZXJFdmVudHMsXG5cblx0XHRsb2FkUHJpbWFyaWVzOiBsb2FkUHJpbWFyaWVzLFxuXHRcdHdyaXRlQWxsVG9EYXRhYmFzZTogd3JpdGVBbGxUb0RhdGFiYXNlLFxuXHRcdHJlYWRBbGxGcm9tRGF0YWJhc2U6IHJlYWRBbGxGcm9tRGF0YWJhc2UsXG5cdFx0aXNBQmlvOiBpc0FCaW8sXG5cdFx0bG9hZEJpbzogbG9hZEJpb1xuXHR9XG5cblx0Ly9yZWFkIG1ldGhvZHNcblx0ZnVuY3Rpb24gZ2V0VUlEKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci51aWQ7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXROYW1lKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5uYW1lO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RW1haWwoKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmVtYWlsO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q29tcGFueSgpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXIuY29tcGFueTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFRpdGxlKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci50aXRsZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0RE9CKCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5kb2I7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyRXZlbnRzKHR5cGUpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXJbdHlwZV07XG5cdH1cblxuXHQvL3VwZGF0ZSBtZXRob2RzXG5cdGZ1bmN0aW9uIHNldFVJRChuYW1lKSB7XG5cdFx0Y3VycmVudFVzZXIudWlkID0gdWlkO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TmFtZShuYW1lKSB7XG5cdFx0Y3VycmVudFVzZXIubmFtZSA9IG5hbWU7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRFbWFpbChlbWFpbCkge1xuXHRcdGN1cnJlbnRVc2VyLmVtYWlsID0gZW1haWw7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDb21wYW55KGNvbXBhbnkpIHtcblx0XHRjdXJyZW50VXNlci5jb21wYW55ID0gY29tcGFueTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc2V0VGl0bGUodGl0bGUpIHtcblx0XHRjdXJyZW50VXNlci50aXRsZSA9IHRpdGxlO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0RE9CKGRvYikge1xuXHRcdGN1cnJlbnRVc2VyLmRvYiA9IGRvYjtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVVzZXJFdmVudHModHlwZSwgZXZlbnQpIHtcblx0XHRjdXJyZW50VXNlclt0eXBlXVtldmVudC5pZF0gPSBldmVudDtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUFsbFVzZXJFdmVudHMoYWxsVXNlckV2ZW50cykge1xuXHRcdGN1cnJlbnRVc2VyLmhvc3RpbmcgPSBhbGxVc2VyRXZlbnRzLmhvc3Rpbmc7XG5cdFx0Y3VycmVudFVzZXIucGVuZGluZyA9IGFsbFVzZXJFdmVudHMucGVuZGluZztcblx0XHRjdXJyZW50VXNlci5hdHRlbmRpbmcgPSBhbGxVc2VyRXZlbnRzLmF0dGVuZGluZztcblx0XHRjdXJyZW50VXNlci5jb21wbGV0ZWQgPSBhbGxVc2VyRXZlbnRzLmNvbXBsZXRlZDtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUJpbyh1c2VyQmlvKSB7XG5cdFx0Ly91cGRhdGUgbG9jYWwgdmFsdWVzXG5cdFx0c2V0TmFtZSh1c2VyQmlvLm5hbWUpO1xuXHRcdHNldEVtYWlsKHVzZXJCaW8uZW1haWwpO1xuXHRcdHNldENvbXBhbnkodXNlckJpby5jb21wYW55KTtcblx0XHRzZXRUaXRsZSh1c2VyQmlvLnRpdGxlKTtcblx0XHRzZXRET0IodXNlckJpby5kb2IpO1xuXHRcdC8vc2F2ZSB0byBkYlxuXHRcdHdyaXRlQWxsVG9EYXRhYmFzZSgpO1xuXHR9XG5cblx0Ly9kZWxldGUgTWV0aG9kc1xuXHRmdW5jdGlvbiByZW1vdmVVc2VyRXZlbnRzKHR5cGUsIGV2ZW50KSB7XG5cdFx0Ly9kb2VzIHRoaXMgd29yaz9cblx0XHRjdXJyZW50VXNlclt0eXBlXVtldmVudC5pZF0ucmVtb3ZlKCk7XG5cdH1cblxuXHQvL290aGVyIE1ldGhvZHNcblx0ZnVuY3Rpb24gbG9hZFByaW1hcmllcyhlbWFpbCwgbmFtZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGVtYWlsKSkgc2V0RW1haWwoZW1haWwpO1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKG5hbWUpKSBzZXRFbWFpbChuYW1lKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlQWxsVG9EYXRhYmFzZSgpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblxuXHRcdGRiLnVwbG9hZFVzZXJEYXRhKGN1cnJlbnRVc2VyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlYWRBbGxGcm9tRGF0YWJhc2UoKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRkYi5kb3dubG9hZFVzZXJEYXRhKClcblx0XHQudGhlbihmdW5jdGlvbih1c2VyRGF0YSkge1xuXHRcdFx0Y3VycmVudFVzZXIgPSB1c2VyRGF0YTtcblx0XHR9KVxuXHR9XG5cblx0ZnVuY3Rpb24gaXNBQmlvKCkge1xuXHRcdGlmKCBjdXJyZW50VXNlci51aWQgIT09ICcnICYmXG5cdFx0XHRjdXJyZW50VXNlci5uYW1lICE9PSAnJyAmJlxuXHRcdFx0Y3VycmVudFVzZXIuZW1haWwgIT09ICcnXG5cdFx0XHQpXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRlbHNlIHJldHVybiBmYWxzZTtcblx0fVxuXHRmdW5jdGlvbiBsb2FkQmlvKCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0Ly9taWdodCBuZWVkIHRvIGdvIG91dCB0byB0aGUgZGIgc28gcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vY2hlY2sgZm9yIGJpb1xuXHRcdFx0aWYoaXNBQmlvKCkpIHtcblx0XHRcdFx0cmVzb2x2ZSgge1xuXHRcdFx0XHRcdG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG5cdFx0XHRcdFx0ZW1haWw6IGN1cnJlbnRVc2VyLmVtYWlsLFxuXHRcdFx0XHRcdGNvbXBhbnk6IGN1cnJlbnRVc2VyLmNvbXBhbnksXG5cdFx0XHRcdFx0dGl0bGU6IGN1cnJlbnRVc2VyLnRpdGxlLFxuXHRcdFx0XHRcdGRvYjogY3VycmVudFVzZXIuZG9iXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9nbyBvdXQgdG8gdGhlIGRiIGJlZm9yZSByZXNvbHZpbmdcblx0XHRcdFx0ZGIuZ2V0VXNlckJpbygpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXJCaW8pIHtcblx0XHRcdFx0XHRyZXNvbHZlKHVzZXJCaW8pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdH0pO1xuXG5cdH1cblx0XG5cdHJldHVybiBhbGxVc2VyRGF0YTtcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ3ZhbGlkYXRpb24nLCB2YWxpZGF0aW9uKTtcblxudmFsaWRhdGlvbi4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdmFsaWRhdGlvbigkbG9nKSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIG1pbmltdW1OYW1lTGVuZ3RoID0gMztcblx0dmFyIG1pbmltdW1QYXNzTGVuZ3RoID0gMTY7XG5cdHZhciBtYXhpbXVtUGFzc0xlbmd0aCA9IDEwMDtcblxuXHR2YXIgYWxsVmFsaWRhdGlvbnMgPSB7XG5cdFx0cmVxdWlyZWQ6IHJlcXVpcmVkLFxuXHRcdG1pbk5hbWVMZW5ndGg6IG1pbk5hbWVMZW5ndGgsXG5cdFx0bWluUGFzc0xlbmd0aDogbWluUGFzc0xlbmd0aCxcblx0XHRtYXhQYXNzTGVuZ3RoOiBtYXhQYXNzTGVuZ3RoLFxuXHRcdGF0TGVhc3RPbmVTeW1ib2w6IGF0TGVhc3RPbmVTeW1ib2wsXG5cdFx0YXRMZWFzdE9uZU51bWJlcjogYXRMZWFzdE9uZU51bWJlcixcblx0XHRhdExlYXN0T25lTG93ZXJjYXNlOiBhdExlYXN0T25lTG93ZXJjYXNlLFxuXHRcdGF0TGVhc3RPbmVVcHBlcmNhc2U6IGF0TGVhc3RPbmVVcHBlcmNhc2UsXG5cdFx0aWxsZWdhbENoYXJhY3RlcjogaWxsZWdhbENoYXJhY3Rlcixcblx0XHRlbWFpbDogZW1haWwsXG5cdFx0ZGF0ZU9mQmlydGg6IGRhdGVPZkJpcnRoXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVxdWlyZWQodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuICdUaGlzIGlzIGEgcmVxdWlyZWQgZmllbGQnO1xuXHRcdH0gXG5cdH1cblxuXHRmdW5jdGlvbiBtaW5OYW1lTGVuZ3RoKHZhbHVlKSB7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHRpZih2YWx1ZS5sZW5ndGggPCBtaW5pbXVtTmFtZUxlbmd0aCkgcmV0dXJuICgnTmFtZSBzaG91bGQgYmUgYXQgbGVhc3QgJyArIG1pbmltdW1OYW1lTGVuZ3RoICsgJyBjaGFyYWN0ZXJzJyk7XG5cdFx0fSBcblx0fVxuXG5cdGZ1bmN0aW9uIG1pblBhc3NMZW5ndGgodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdGlmKCEodmFsdWUubGVuZ3RoIDwgbWluaW11bVBhc3NMZW5ndGgpKSByZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWF4UGFzc0xlbmd0aCh2YWx1ZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0aWYoISh2YWx1ZS5sZW5ndGggPiBtYXhpbXVtUGFzc0xlbmd0aCkpIHJldHVybiB0cnVlO1xuXHRcdH0gXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXRMZWFzdE9uZVN5bWJvbCh2YWx1ZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0Ly8gYnVpbGQgcmVnZXhcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIltcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9mYWlsdXJlOiBkaWRuJ3QgZmluZCBhbnkgc3BjaWFsIGNoYXJhY3RlcnNcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGF0TGVhc3RPbmVOdW1iZXIodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbMC05XVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuICAgIGZ1bmN0aW9uIGF0TGVhc3RPbmVMb3dlcmNhc2UodmFsdWUpIHtcbiAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0Ly8gYnVpbGQgcmVnZXhcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlthLXpdXCIsIFwiXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9mYWlsdXJlOiBkaWRuJ3QgZmluZCBhbnkgc3BjaWFsIGNoYXJhY3RlcnNcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdExlYXN0T25lVXBwZXJjYXNlKHZhbHVlKSB7XG4gICAgXHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbQS1aXVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaWxsZWdhbENoYXJhY3Rlcih2YWx1ZSkge1xuICAgIFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHQvLyBidWlsZCByZWdleFxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW15BLXowLTlcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdXCIsIFwiXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZW1haWwodmFsdWUpIHtcbiAgICBcdC8vZGVmaW5lIGNvbnN0cmFpbnRzXG4gICAgXHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG5cbiAgICBcdGlmKCFjb25zdHJhaW50LnRlc3QodmFsdWUpKSByZXR1cm4gJ05vdCBhIHZhbGlkIGUtbWFpbCBhZGRyZXNzJ1xuICAgIFx0XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF0ZU9mQmlydGgodmFsdWUpIHt9XG5cblx0cmV0dXJuIGFsbFZhbGlkYXRpb25zO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlcikgeyAgIFxuICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgLndoZW4oJy8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbGFuZGluZ1BhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ0xhbmRpbmdQYWdlQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9zaWdudXAnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbmV3VXNlclNpZ251cC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnTmV3VXNlclNpZ25VcENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcmVnaXN0ZXJlZFVzZXJMb2dpbi5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnUmVnVXNlckxvZ2luQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy91c2VySW5mb3JtYXRpb24vOnVpZD8vOnRva2VuPycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy91c2VySW5mb3JtYXRpb24uaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ1VzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlOiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC53aGVuKCcvdXNlckV2ZW50cy86dWlkPy86dG9rZW4/Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3VzZXJFdmVudHMuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ1VzZXJFdmVudHNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZTogdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZVxuICAgICAgICB9XG4gICAgfSlcbiAgICAud2hlbignL2V2ZW50LzpldmVudElkPy86aG9zdElkPy86dWlkPy86dG9rZW4/Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FuRXZlbnQuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ0FuRXZlbnRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZTogdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZVxuICAgICAgICB9XG4gICAgfSlcbiAgICAub3RoZXJ3aXNlKHtcbiAgICAgICAgcmVkaXJlY3RUbzogJy8nXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2UoYXV0aFNlcnZpY2UpIHtcbiAgICBhdXRoU2VydmljZS5pc0xvZ2dlZEluKCk7XG59XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG5cdC5kaXJlY3RpdmUoJ3Rvb2xCYXInLCB0b29sQmFyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0b29sQmFyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2RpcmVjdGl2ZXMvdG9vbEJhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBUb29sQmFyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIFRvb2xCYXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBUb29sQmFyQ29udHJvbGxlcigkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAkbG9nLmluZm8oJ2RpcmVjdGl2ZSBsb2FkaW5nJyk7XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuXHQuZGlyZWN0aXZlKCd0b29sQmFyJywgdG9vbEJhcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdG9vbEJhcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvZGlyZWN0aXZlcy90b29sQmFyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IFRvb2xCYXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgVG9vbEJhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFRvb2xCYXJDb250cm9sbGVyKCRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgICRsb2cuaW5mbygnZGlyZWN0aXZlIGxvYWRpbmcnKTtcblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCJhbmd1bGFyXG5cdC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJywgW1xuXHRcdCduZ1JvdXRlJyxcblx0XHQnbmdUb3VjaCcsXG5cdFx0J2ZpcmViYXNlJ1xuXHRdKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
