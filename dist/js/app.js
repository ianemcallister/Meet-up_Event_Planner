function AnEventController(e,t){function n(){v.tempDateTime={start:"",end:""},v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},v.showIfHost=!1,v.hideIfAttending=!0,v.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},u(),d(),v.showIfHost||f()}function o(e){return btoa(e)}function s(e){return atob(e)}function r(e){return Date.parse(e)}function a(){v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function l(n){e.info("adding them to the registered users list "+n),ref.child("Users").child(n).child("events").child("pending").child(t.uid).child(t.eventId).set({id:t.eventId,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name,host:t.uid},function(t){t&&e.info("there was an error"+t)}),ref.child("Users").child(n).child("events").child("pending").once("value",function(t){var i=t.val();e.info(t.val()),i.updated?(e.info("deleting updated"),ref.child("Users").child(n).child("events").child("pending").child("updated").remove(function(t){t&&e.info("Deleting failed: "+t.code)})):e.info("nothing to do")},function(t){t&&e.info("The read failed: "+t.code)})}function c(n){e.info("adding them to the UNREGISTERED users list "+n),ref.child("UnregisteredUsers").child(n).child("pending").child(t.uid).child(t.eventId).set({id:t.eventId,host:t.uid,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name},function(t){t&&e.info("there was an error"+t)})}function u(){var n=ref.getAuth();n.uid==t.hostId?(e.info("is the host"),v.showIfHost=!0):(e.info("not the host"),v.showIfHost=!1)}function d(){v.showIfHost||(e.info("check guest attendance"),userEvents.child("guestList").on("value",function(e){var n=e.val();v.hideIfAttending=!n[t.uid].attending}))}function f(){v.manageSections[1].active=!0,v.manageSections[2].active=!0,v.manageSections[3].active=!0}var v=this;v.tempTime={start:"",end:""},v.userIsHost=!1,v.setTempTime=function(e){"start"==e&&(v.tempDateTime.start=new Date),"end"==e&&(v.tempDateTime.end=new Date)},v.unixTimeToDateTime=function(e){return new Date(parseInt(e))},v.dateTimeToUnixTime=function(e){return Date.parse(e)},v.submit=function(){e.info("submitting the form now!")},v.backToUserEvents=function(){$location.path("/userEvents/"+t.uid+"/"+t.token)},v.eventRedirect=function(n,i){var o=n+"/"+t.uid+"/"+t.token;e.info("redirecting to: "+o),$location.path(o)},v.changeSection=function(t){for(e.info("are we here"),i=1;i<=3;i++)i==t?(v.manageSections[i].active=!0,v.manageSections[i].style["background-color"]="yellow",v.manageSections[i].style.color="black"):(v.manageSections[i].active=!1,v.manageSections[i].style["background-color"]="gray",v.manageSections[i].style.color="white")},v.saveEventTime=function(e,t){v.event.eventTimes||(v.event.eventTimes={start:"",end:""},v.event.eventTimes.start=v.dateTimeToUnixTime(v.tempDateTime.start),v.event.eventTimes.end=v.dateTimeToUnixTime(v.tempDateTime.end)),v.tempDateTime.end<v.tempDateTime.start&&"start"==t&&(v.tempDateTime.end=v.tempDateTime.start),"start"==t&&(v.event.eventTimes.start=v.dateTimeToUnixTime(e)),"end"==t&&(v.event.eventTimes.end=v.dateTimeToUnixTime(e))},v.guestsAreInvited=function(){return!!v.event.guestList},v.validateGuestEmail=function(){if(v.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(v.newGuest.email.address)?(v.newGuest.email.valid=!0,v.newGuest.email.style={color:"green"}):(v.newGuest.email.valid=!1,v.newGuest.email.style={color:""})}},v.isSectionComplete=function(){for(i=0;i<8;i++)e.info(v.requiredInputs[i])},v.saveAndAdvance=function(){v.event.$save().then(function(){e.info("event saved")})["catch"](function(t){e.info("error! "+t)}),v.isSectionComplete(),1==v.manageSections[1].complete&&1==v.manageSections[2].complete&&1==v.manageSections[3].complete?v.eventRedirect("/userEvents",t.uid):v.manageSections[1].active?v.changeSection(2):v.manageSections[2].active?v.changeSection(3):v.manageSections[3].active&&v.changeSection(1)},v.addGuestToHostsList=function(){var n=o(v.newGuest.email.address);if(v.newGuest.name&&v.newGuest.email.valid){if(v.event.guestList)for(var i=0;v.event.guestList[i];){if(v.event.guestList[i].email==s(n))return e.info("This guest is already on the list"),void a();i++}else v.event.guestList={};if(registeredUsers[n]){if(registeredUsers[n]==t.uid)return e.info("tried to register the host"),void a();l(registeredUsers[n]),v.event.guestList[registeredUsers[n]]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address}}else c(n),v.event.guestList[n]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address};v.saveEvent(),a()}else e.info("you didn't enter a name and or email")},v.guestWillAttend=function(n){var i=ref.child("Users").child(t.uid).child("events"),o=0,s=!1;if(v.event.guestList[t.uid].attending=n,v.event.guestList[t.uid].status="attending",i.child("pending").on("value",function(s){var r=s.val();e.info(r),e.info(r[t.hostId]),e.info(r[t.hostId][t.eventId]);var a=r[t.hostId][t.eventId];e.info(a);for(invitation in r)o++;e.info("total attending: "+o),n&&i.child("attending").child(t.hostId).child(t.eventId).set(a,function(t){t&&e.info(t)})}),i.child("attending").on("value",function(t){var n=t.val();e.info("this is the attending list"),e.info(n),n.updated&&(s=!0)},function(t){t&&e.info(t)}),2>o){var a=new Date;i.child("pending").update({updated:r(a)},function(t){t&&e.info(t)})}i.child("pending").child(t.hostId).remove(),s&&e.info("removing the updated placeholder"),v.event.$save()},v.updateUpdatedParam=function(){var n=ref.child("Users").child(t.uid).child("events");e.info("updating the param"),n.child("attending").on("value",function(t){e.info(t.val())}),n.child("attending").child("updated").remove()},v.addInvitationToAttending=function(n){var i=ref.child("Users").child(t.uid).child("events"),o=0;i.child("pending").on("value",function(s){var r=s.val(),a=r[t.hostId][t.eventId];e.info(r),e.info(r[t.hostId]),e.info(r[t.hostId][t.eventId]);for(invitation in r)o++;e.info("total pending invitations: "+o),e.info(n),n&&i.child("attending").child(t.hostId).child(t.eventId).set(a,function(t){t&&e.info(t)})})},n()}function GuestEventController(e){e.info("into the GuestEventController")}function HostEventController(e,t,n,i,o,s){function r(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function l(e,t){return(a(t)-a(e))/6e4}function c(e){"open"==e?(m.actionBtn.btn["class"]["btn-success"]=!0,m.actionBtn.btn["class"]["btn-warning"]=!1,m.actionBtn.btn.message="Save Event"):"close"==e&&(m.actionBtn.btn["class"]["btn-success"]=!1,m.actionBtn.btn["class"]["btn-warning"]=!0,m.actionBtn.btn.message="Add Info")}function u(e){w+=e,m.progressBar.complete=w,m.progressBar.style.width=w+"%",m.progressBar.message=w+"%",w>99&&c("open"),99>w&&c("close")}function d(){var e=new Date;e.setHours(e.getHours()+Math.round(e.getMinutes()/60)),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),m.tempTime.start=e,m.tempTime.end=e,m.tempTime.duration=l(m.tempTime.start,m.tempTime.end)}function f(){angular.isDefined(m.tempEvent.eventTimes.start)&&(m.tempTime.start=r(m.tempEvent.eventTimes.start),m.tempTime.end=r(m.tempEvent.eventTimes.end))}function v(){if(p.thereIsAnActiveEvent()){var e=p.getActiveEvent();m.progressBar=e.progressBar,w=e.percentComplete,m.tempEvent=e.event,m.requiredFieldComplete=e.requiredFields}else p.loadAnEventProgressively(n.uid,n.eventId).then(function(e){m.tempEvent=e,f()})["catch"](function(e){t("the error is: "+e)});m.activeSection=parseInt(n.section),d()}var m=this,g=o,p=i,h=s,w=0;m.activeSection=1,m.tempTime={start:"",end:"",duration:""},m.progressBar={complete:m.percentComplete,style:{width:m.percentComplete+"%"},message:m.percentComplete+"%"},m.actionBtn={div:{"class":{"col-xs-6":!0,"col-sm-6":!0}},btn:{"class":{btn:!0,"btn-success":!1,"btn-warning":!0,"pull-right":!0},message:"Add Info"}},m.tempEvent={},m.requiredFieldComplete=h.generateEventRequirnments(),m.formatDuration=function(){m.tempTime.duration=l(m.tempTime.start,m.tempTime.end);var e=Math.floor(m.tempTime.duration/60),t=m.tempTime.duration%60,n=Math.round(t/15)/4;return e+n+" h"},m.validateTime=function(e){m.tempTime.duration>24&&m.settingTempStart();var t={eventStart:m.tempTime.start,eventEnd:m.tempTime.end};angular.isDefined(t[e])&&""!=t[e]&&m.tempTime.duration>0?(0==m.requiredFieldComplete[e].completed&&u(10),m.tempEvent.eventTimes.start=a(m.tempTime.start),m.tempEvent.eventTimes.end=a(m.tempTime.end),m.requiredFieldComplete[e].completed=!0,m.requiredFieldComplete[e].row["class"]["has-success"]=!0,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,m.requiredFieldComplete[e].row["class"]["has-error"]=!1):(1==m.requiredFieldComplete[e].completed&&u(-10),m.requiredFieldComplete[e].completed=!1,m.requiredFieldComplete[e].row["class"]["has-success"]=!1,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,m.requiredFieldComplete[e].row["class"]["has-error"]=!0)},m.settingTempStart=function(){(a(m.tempTime.end)<=a(m.tempTime.start)||a(m.tempTime.end)-a(m.tempTime.start)>864e5)&&(oldStart=a(m.tempTime.start),oldEnd=a(m.tempTime.end),newEnd=oldStart+36e5,m.tempTime.end=r(newEnd))},m.settingTempEnd=function(){m.tempTime.start>m.tempTime.end&&(m.tempTime.start=m.tempTime.end),m.validateTime("eventEnd"),m.tempTime.duration=l(m.tempTime.start,m.tempTime.end)},m.backToUserEvents=function(){w>99&&(p.saveNewHostingEvent("hosting",m.tempEvent),p.setRemoteEventsFromLocal("hosting",m.tempEvent).then(function(e){t.info(e)})["catch"](function(e){t.info(e)})),g.redirectTo("/userEvents",n.uid)},m.sectionBack=function(){var e={event:m.tempEvent,progressBar:m.progressBar,percentComplete:w,requiredFields:m.requiredFieldComplete};t.info(e),p.setActiveEvent(e),targetSection=m.activeSection-1,g.redirectTo("/event/host",n.eventId,n.uid,targetSection)},m.sectionForward=function(){var e={event:m.tempEvent,progressBar:m.progressBar,percentComplete:w,requiredFields:m.requiredFieldComplete};t.info(e),p.setActiveEvent(e),targetSection=m.activeSection+1,g.redirectTo("/event/host",n.eventId,n.uid,targetSection)},m.verifyRequired=function(e,t){angular.isDefined(t)&&""!=t?(0==m.requiredFieldComplete[e].completed&&u(10),m.requiredFieldComplete[e].completed=!0,m.requiredFieldComplete[e].row["class"]["has-success"]=!0,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,m.requiredFieldComplete[e].row["class"]["has-error"]=!1):(1==m.requiredFieldComplete[e].completed&&u(-10),m.requiredFieldComplete[e].completed=!1,m.requiredFieldComplete[e].row["class"]["has-success"]=!1,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,m.requiredFieldComplete[e].row["class"]["has-error"]=!0)},m.saveEventToDB=function(){t.info(m.tempEvent),w>99&&(p.saveNewHostingEvent("hosting",m.tempEvent),p.setRemoteEventsFromLocal(n.uid,m.tempEvent).then(function(e){t.info(e),p.cleanDBEventsCategory("hosting").then(function(e){t.info(e)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)}),g.redirectTo("/userEvents",n.uid))},e.$watch("vm.tempEvent.guestList",function(e,t){angular.isObject(m.tempEvent.guestList)&&u(10)}),v()}function LandingPageController(e){var t=this,n=e;t.createAnAccount=function(){n.redirectTo("/signup")},t.loginUser=function(){n.redirectTo("/login")}}function MainController(e,t,n,i){function o(){angular.element(n);n.css("hight",i.outerHeight)}var s=this,r="https://meetupplanner.firebaseio.com/",a=new Firebase(r);s.logout=function(){alert("logging you out!"),a.unauth(),t.path("/")},angular.element(n).ready(function(){o()})}function NewUserSignUpController(e,t,n,o,s,r){function a(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var c=n;l.checkNewName=function(){var e=[],t=c.required(l.inputs.newName),n=c.minNameLength(l.inputs.newName);angular.isDefined(t)&&e.push(t),angular.isDefined(n)&&e.push(n),e.length>0?l.errors.name=e.join(", "):l.errors.name="",a()},l.checkNewEmail=function(){var e=[],t=c.required(l.inputs.newEmail),n=c.email(l.inputs.newEmail);angular.isDefined(t)&&e.push(t),angular.isDefined(n)&&e.push(n),e.length>0?l.errors.email=e.join(", "):l.errors.email="",a()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],t=c.required(l.inputs.newPassword),n=[c.minPassLength(l.inputs.newPassword),c.maxPassLength(l.inputs.newPassword),c.atLeastOneLowercase(l.inputs.newPassword),c.atLeastOneUppercase(l.inputs.newPassword),c.atLeastOneNumber(l.inputs.newPassword),c.atLeastOneSymbol(l.inputs.newPassword),c.illegalCharacter(l.inputs.newPassword)];angular.isDefined(t)&&e.push(t),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var o=!1;for(i=0;i<7;i++)n[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},o=!0);l.errors.password=o,a()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=s;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var n=o,i=r;n.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(o){i.setPrimariesLocally(l.inputs.newEmail,l.inputs.newName,o.uid),n.addNewUserToDatabase(o.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){t.info(i),n.addNewUserToRegUsersList(o.uid,l.inputs.newEmail).then(function(n){e.redirectTo("/userInformation",o.uid),t.info(n)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)})}}}function RegUserLoginController(e,t,n,i,o){function s(){angular.isDefined(r.inputs.email)&&""!==r.inputs.email&&angular.isDefined(r.inputs.password)&&""!==r.inputs.password?(r.inputs.requiredFieldsDefined=!0,r.unclockUserLoginBtn["class"]["btn-success"]=!0,r.unclockUserLoginBtn["class"]["btn-warning"]=!1,r.unclockUserLoginBtn.message="Login",r.unclockUserLoginBtn.usable=!0):(r.inputs.requiredFieldsDefined=!1,r.unclockUserLoginBtn["class"]["btn-success"]=!1,r.unclockUserLoginBtn["class"]["btn-warning"]=!0,r.unclockUserLoginBtn.message="Need Email & Pass",r.unclockUserLoginBtn.usable=!1)}var r=this;r.inputs={email:"",password:"",requiredFieldsDefined:!1},r.errors={message:"",passesAllTests:!0},r.unclockUserLoginBtn={usable:!1,"class":{btn:!0,"btn-warning":!0,"btn-success":!1,"col-xs-12":!0,"col-sm-12":!0},message:"Need Email & Pass"},r.update=function(){r.inputs.email=t.find("#userEmail")[0].value,r.inputs.password=t.find("#userPassword")[0].value,s()},r.loginRegisteredUser=function(){var t=i,s=n,a=o;s.LoginRegisteredUser(r.inputs.email,r.inputs.password).then(function(e){r.errors.passesAllTests=!0,a.setPrimariesLocally(r.inputs.email,r.inputs.name,e.uid)}).then(function(){e.info("uid is "+a.getUIDLocally()),s.getUserBio(a.getUIDLocally()).then(function(t){a.updateBioLocally(t),s.getUserEvents(a.getUIDLocally()).then(function(e){a.updateAllUserEventsLocally(e)})["catch"](function(t){e.info(t)})})["catch"](function(t){e.info(t)}),t.redirectTo("/userInformation",a.getUIDLocally())})["catch"](function(e){r.errors.message=e,r.errors.passesAllTests=!1})},r.clicked=function(){var e=n;e.logUserOut()}}function topMenuController(e,t,n,i,o){function s(e){e?(t.info("User "+e.uid+" is logged in with "+e.provider),a.loggedIn=!0):(t.info("User is logged out"),a.loggedIn=!1)}function r(e,i){var o=e+"/"+i.uid+"/"+i.token;t.info("redirecting to: "+o),n.path(o)}var a=this,l="https://meetupplanner.firebaseio.com/",c=new Firebase(l);a.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){t.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(o).bind("resize",function(){a.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){o.outerWidth<600&&(a.onResizeFunction(),e.$apply())}),a.logout=function(){t.info("logging out!"),a.loggedIn=!1,c.unauth(),r("/",{uid:"",token:""})},a.navBarLoginRegisteredUser=function(){t.info("launching login");var n=new Firebase(l);n.authWithPassword({email:a.navbarUserEmail,password:a.navbarUserPass},function(n,i){n?t.info("Error Logging In: "+n):(t.info("Logged In successfully: "+i.uid),t.info(i),r("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},a.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",o.outerWidth-26+"px")},c.onAuth(s)}function UserEventsController(e,t,n,i){function o(e){return Date.parse(e)}function s(){var e=0;for(event in c.events.hosting)e++;return e}function r(){var e=new Date,t=10*o(e)+s();return t}function a(){Object.keys(c.events).forEach(function(e){Object.keys(c.events[e]).forEach(function(t){var n=0;angular.isObject(c.events[e][t])&&n++,n>0?c.sectionAvailable[e]=!0:c.sectionAvailable[e]=!1})})}function l(){u.setUIDLocally(t.uid),u.loadBio(t.uid).then(function(e){c.userBio=e})["catch"](),c.events=u.getAllUserEventsLocally(),u.getRemoteEventsForLocal().then(function(t){e.info(t),c.events=u.getAllUserEventsLocally()}).then(function(){a()})}var c=this,u=n;c.showDecline=!1,c.userBio={},c.events={},c.sectionAvailable={pending:!1,attending:!1,hosting:!1,completed:!1},c.errors={},c.createNewEvent=function(){var e=r(),t=i;u.createNewEvent(e),t.redirectTo("/event",e,u.getUIDLocally(),u.getUIDLocally())},l()}function UserInformationController(e,t,n,i,o){function s(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(){var e=new Date;e.setHours(0),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),c.tempBirthday=e}function l(){a(),u.loadBio(n.uid).then(function(e){c.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(c.tempBirthday=s(e.dob))})}var c=this,u=i;c.user={},c.tempBirthday,c.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},c.checkValues=function(){c.view.isData=!0,!angular.isUndefined(c.user.company)&&""!==c.user.company||!angular.isUndefined(c.user.title)&&""!==c.user.title||!angular.isUndefined(c.user.dob)&&""!==c.user.dob?(c.view.dataToSave=!0,c.view.proceedBtn="btn btn-success",c.view.btnMssg="Save & Continue"):(c.view.dataToSave=!1,c.view.proceedBtn="btn btn-primary",c.view.btnMssg="Move On...")},c.updateDOB=function(){c.user.dob=r(c.tempBirthday),c.checkValues()},c.saveAndMoveOn=function(){var t=o,i=u.getUIDLocally();0!==c.tempBirthday&&c.updateDOB(),(""==i||angular.isUndefined(i))&&u.setUIDLocally(n.uid),c.view.isData&&(e.info("saving the new data"),u.updateBioLocally(c.user)),t.redirectTo("/userEvents",c.user.uid)},l()}function authService(e,t){function n(){var e=t;e.checkLoginStatus().then(function(e){return e})["catch"](function(e){return e})}var i={isLoggedIn:n};return i}function backendServices(e,t,n){function i(e){return btoa(e)}function o(e){return atob(e)}function s(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(e,n){var i=new Firebase(I);return t(function(t,o){i.createUser({email:e,password:n},function(e,n){e?o("Error creating user: "+e):t(n)})})}function l(e,n,i){var o=new Firebase(I),s=o.child("Users").child(e),a=new Date;return t(function(t,o){s.set({bio:{uid:e,name:n,email:i},events:{pending:{updated:r(a)},hosting:{updated:r(a)},attending:{updated:r(a)},completed:{updated:r(a)}}},function(e){e?o("Data could not be saved: "+e):t("Data saved successfully.")})})}function c(e,n){var o=new Firebase(I),s=i(n),r=o.child("Uids").child(s);return t(function(t,n){r.set(e,function(e){e?n("Data could not be saved. "+e):t("uid created sucessfully.")})})}function u(e,n){var i=new Firebase(I);return t(function(t,o){i.authWithPassword({email:e,password:n},function(e,n){e?o("Error Logging In: "+e):t(n)})})}function d(){var e=new Firebase(I);return t(function(t,n){e.onAuth(function(e){t(e?!0:!1)})})}function f(){var t=new Firebase(I);e.info("logging user out"),t.unauth()}function v(e){var n=new Firebase(I),i=e.uid,o=n.child("Users").child(i);return t(function(t,n){o.update(e,function(e){e?n("There was a problem updating that record: "+e):t("all user data uploaded successfully")})})}function m(e){var n=new Firebase(I),i=e.uid.toString(),o=n.child("Users").child(i).child("bio");return t(function(t,n){o.update(e,function(e){e?n("There was a problem updating that record: "+e):t("all user bio data uploaded successfully")})})}function g(){}function p(e){var n=new Firebase(I),i=n.child("Users").child(e).child("bio");return t(function(e,t){i.once("value",function(t){e(t.val())},function(e){e&&t(e)})})}function h(e,n){var i=new Firebase(I),o=n.id,s=i.child("Users").child(e).child("events").child("hosting").child(o);return t(function(e,t){s.set(n,function(n){n?t("There was an error: "+n):e("New event saved to DB successfully")})})}function w(e,n,i,o){var s=new Firebase(I),r=s.child("Users").child(o).child("events").child("hosting").child(i).child("guestList").child(n);return t(function(t,n){r.set({rsvpd:!1,status:"pending",name:e},function(e){e?n("There was an error: "+e):t("New event saved to DB successfully")})})}function b(e){var n=new Firebase(I),i=n.child("Users").child(e).child("events");return t(function(e,t){i.orderByKey().once("value",function(t){var n=t.val(),i={hosting:n.hosting,attending:n.attending,pending:n.pending,completed:n.completed};e(i)},function(e){e&&t(e)})})}function E(e,n){var i=new Firebase(I),o=i.child("Users").child(e).child("events").child("hosting").child(n);return t(function(e,t){o.once("value",function(t){var n=t.val();e(n)},function(e){e&&t(e)})})}function U(e){var n=new Firebase(I),i=n.child("Uids");return t(function(t,n){i.once("value",function(i){var o=i.val();Object.keys(o).forEach(function(i){i==e?t(o[i]):n("No user by that email")})})})}function L(e,n){var i=new Firebase(I),o=i.child("Users").child(e).child("events").child("hosting").child(n).child("guestList");return t(function(e,t){o.once("value",function(t){var n=t.val();e(n)},function(e){e&&t("There was an error getting the guest list: "+e)})})}function T(e,t,n){}function y(e,n){var i=new Firebase(I),o=i.child("Users").child(n).child("events").child(e).child("updated");return t(function(e,t){o.set(null,function(n){n?t("There was an error deleting update field: "+n):e("Deleted update successfully")})})}function D(e,n){var i=new Firebase(I),o=i.child("Users").child(e).child("events").child("hosting").child(n);return t(function(e,t){var n=function(n){n?t("Synchronization failed"):e("Synchronization succeeded")};o.remove(n)})}function A(e,n){var i=new Firebase(I),o=i.child("Users").child(n).child("events").child(e);return t(function(e,t){o.once("value",function(n){var i=n.val();angular.isDefined(i.updated)?e(!0):t(!1)},function(e){e&&t(e)})})}var I="https://meetupplanner.firebaseio.com/",C={utf8_to_b64:i,b64_to_utf8:o,unixTimeToDateTime:s,dateTimeToUnixTime:r,LoginRegisteredUser:u,checkLoginStatus:d,logUserOut:f,downloadUserData:g,getUserBio:p,getUserEvents:b,getAHostedEvent:E,getAnInvitedEvent:T,findGuestUID:U,getGuestListForEvent:L,createNewUser:a,addNewUserToDatabase:l,addNewUserToRegUsersList:c,uploadUserData:v,uploadUserBio:m,createHostedEvent:h,addGuestToHostGuestListonDB:w,deleteUpdateField:y,removeIncompleteEvent:D,thereWasAnUpdateField:A};return C}function trafficValet(e,t){function n(e,n,i,o){angular.isDefined(n)?(e=e+"/"+n,angular.isDefined(i)&&(e=e+"/"+i,angular.isDefined(o)&&(e=e+"/"+o,t.path(e)),t.path(e)),t.path(e)):t.path(e)}function i(e,n,i,o){if(angular.isUndefined(o)&&(o=1),n===i){var s="/event/host/"+e+"/"+i+"/"+o;t.path(s)}else{var s="/event/guest/"+e+"/"+i+"/"+n;t.path(s)}}var o={redirectTo:n,eventRoute:i};return o}function userData(e,t,n){function i(e){return btoa(e)}function o(e){return Date.parse(e)}function s(){return""!==ee.bio.uid&&""!==ee.bio.name&&""!==ee.bio.email}function r(e,t){return!!angular.isDefined(ee.events[e][t])}function a(e,t){return angular.isDefined(ee.bio.email)&&""!=ee.bio.email?e==ee.bio.email:ee.events.hosting[t].host.email==e}function l(t,n){return angular.isDefined(ee.events.hosting[n].guestList)?(refEmail=i(t),void Object.keys(ee.events.hosting[n].guestList).forEach(function(t){return refEmail==t?(e.info("an email match was found, this guest has been invited already"),!0):(e.info("no email match found, ok to invite guest"),!1)})):(e.info("no guestlist"),!1)}function c(){return!!angular.isDefined(te.event)}function u(e){Object.keys(ee.events[e]).forEach(function(t){angular.isObject(ee.events[e][t])||delete ee.events[e][t]})}function d(){return ee.bio.uid}function f(){return ee.bio.name}function v(){return ee.bio.email}function m(){return ee.bio.company}function g(){return ee.bio.title}function p(){return ee.bio.dob}function h(){return{uid:ee.bio.uid,name:ee.bio.name,email:ee.bio.email,company:ee.bio.company,title:ee.bio.title,dob:ee.bio.dob}}function w(e,t){return ee.events[e][t]}function b(e){return ee.events[e]}function E(){return ee.events}function U(){return te}function L(e){ee.bio.uid=e}function T(e){ee.bio.name=e}function y(e){ee.bio.email=e}function D(e){ee.bio.company=e}function A(e){ee.bio.title=e}function I(e){ee.bio.dob=e}function C(e,t,n){angular.isDefined(e)&&y(e),angular.isDefined(t)&&T(t),angular.isDefined(n)&&L(n)}function S(e,t){var n=t.id;u(e),ee.events[e][n]=t}function $(e){ee.events=e}function B(e){T(e.name),y(e.email),D(e.company),A(e.title),I(e.dob),M()}function F(e,o,s,r,a){var l=n;return t(function(t,n){angular.isDefined(o)&&(s=i(o)),l.addGuestToHostGuestListonDB(e,s,r,a).then(function(e){t(e)})["catch"](function(e){n(e)})})}function G(e){te=e}function k(e){var t=e.uid;angular.isObject(te.event.guestList)||(te.event.guestList={}),te.event.guestList[t]=e.guest}function q(e){var o=n;return t(function(t,n){guestEmail=i(e),o.findGuestUID(guestEmail).then(function(e){t(e)})["catch"](function(e){n(e)})})}function R(e,t){delete ee.events[e][t.id]}function N(){var e=n;e.downloadUserData().then(function(e){ee=e})}function P(e){var i=n;return t(function(t,n){i.getUserBio(e).then(function(e){t(e)})["catch"](function(e){n("There was an error reading the user bio: "+e)})})}function j(){var e=n;return t(function(t,n){e.getUserEvents(d()).then(function(e){Object.keys(e).forEach(function(t){Object.keys(e[t]).forEach(function(n){S(t,e[t][n])})}),t(e)})["catch"](function(e){n("There was an error reading the user events: "+e)})})}function x(e){var i=n;return t(function(t,n){i.getAHostedEvent(d(),e).then(function(e){t(e)})["catch"](function(e){n("There was an error reading the user event: "+e)})})}function O(){var e=n;e.uploadUserData(ee)}function M(){var e=n;e.uploadUserBio(ee.bio)}function H(){}function V(i,o){var s=n;return e.info("sending this to the server"),e.info(o),t(function(e,t){s.createHostedEvent(i,o).then(function(t){e(t)})["catch"](function(e){t(e)})})}function z(i){var o=n;return t(function(t,n){o.thereWasAnUpdateField(i,d()).then(function(t){o.deleteUpdateField(i,d()).then(function(t){e.info(t)})["catch"](function(t){e.info(t)})})["catch"](function(t){e.info(t)})})}function _(e,i){var o=n;return t(function(t,n){o.getGuestListForEvent(e,i).then(function(e){t(e)})["catch"](function(e){n(e)})})}function W(e){var i=n;return t(function(t,n){i.removeIncompleteEvent(ee.getUIDLocally,e).then(function(e){t(e)})["catch"](function(e){n(e)})})}function Z(e){return t(function(t,n){s()?t(h()):P(e).then(function(e){C(e.email,e.name,e.uid),t(e)})["catch"](function(e){n(e)})})}function K(e,n){return L(e),t(function(e,t){x(n).then(function(t){e(t)})["catch"](),r("hosting",n)&&e(w("hosting",n))})}function J(e){var n={};return t(function(e,t){j().then(function(t){e(t)}),n=b(type),e(n)})}function Q(e){var t={},n=new Date;n.setMinutes(0,0,0);var i=o(n);t={id:e,name:"",type:"",host:{name:ee.bio.name,uid:ee.bio.uid,email:ee.bio.email},message:"",eventTimes:{start:i,end:i+36e5},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0}},S("hosting",t),G(t)}function X(e){return t(function(e,t){})}function Y(t,n){e.info("saving this event locally"),e.info(n),S(t,n)}var ee={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{hosting:{},pending:{},attending:{},completed:{}}},te={},ne={bioPrimariesAreCompleteLocally:s,eventExistsLocally:r,thisIsTheHostEmail:a,guestInvitedAlready:l,thereIsAnActiveEvent:c,cleanEvents:u,getUIDLocally:d,getNameLocally:f,getEmailLocally:v,getCompanyLocally:m,getTitleLocally:g,getDOBLocally:p,getFullBioLocally:h,getOneUserEventLocally:w,getUserEventsLocally:b,getAllUserEventsLocally:E,getActiveEvent:U,setUIDLocally:L,setNameLocally:T,setEmailLocally:y,setCompanyLocally:D,setTitleLocally:A,setDOBLocally:I,setPrimariesLocally:C,updateUserEventsLocally:S,updateAllUserEventsLocally:$,updateBioLocally:B,addGuestToHostGuestList:F,setActiveEvent:G,addGuestToActiveEvent:k,saveNewHostingEvent:Y,removeUserEventsLocally:R,getFullRemoteDBforLocal:N,getRemoteBioForLocal:P,getRemoteEventsForLocal:j,getOneRemoteEventForLocal:x,setFullRemoteDBfromLocal:O,setRemoteBioFromLocal:M,setARemoteEventFromLocal:H,setRemoteEventsFromLocal:V,cleanDBEventsCategory:z,getUserIdForGuest:q,getEventGuestList:_,removeIncompleteEventFromDB:W,loadBio:Z,loadEventsProgressively:J,loadAnEventProgressively:K,createNewEvent:Q,updatePendingEventsListForGuest:X};return ne}function validation(e){function t(e){return angular.isUndefined(e)?"This is a required field":void 0}function n(e){return angular.isDefined(e)&&e.length<p?"Name should be at least "+p+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<h)}function o(e){return angular.isDefined(e)&&!(e.length>w)}function s(e){if(angular.isDefined(e)){var t=new RegExp("[!@#$%^&*]");return!!t.test(e)}return!1}function r(e){if(angular.isDefined(e)){var t=new RegExp("[0-9]","");return!!t.test(e)}return!1}function a(e){if(angular.isDefined(e)){var t=new RegExp("[a-z]","");return!!t.test(e)}return!1}function l(e){if(angular.isDefined(e)){var t=new RegExp("[A-Z]","");return!!t.test(e)}return!1}function c(e){if(angular.isDefined(e)){var t=new RegExp("[^A-z0-9!@#$%^&*]","");return!t.test(e)}return!1}function u(e){var t=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return angular.isDefined(e)&&!t.test(e)?"Not a valid email":void 0}function d(e){}function f(){var e={eventName:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventHost:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventType:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0
}}},eventStart:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventEnd:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventStreet01:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventCity:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventState:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventZip:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventGuest:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}}};return e}function v(){}function m(){}function g(){}var p=3,h=16,w=100,b={required:t,minNameLength:n,minPassLength:i,maxPassLength:o,atLeastOneSymbol:s,atLeastOneNumber:r,atLeastOneLowercase:a,atLeastOneUppercase:l,illegalCharacter:c,email:u,dateOfBirth:d,generateEventRequirnments:f,updateEventReqStatus:v,updateEventReqAddressed:m,updateEventReqClass:g};return b}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/host/:eventId/:uid/:section",{templateUrl:"views/hostEvent.htm",controller:"HostEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/guest/:eventId/:uid/:hostId",{templateUrl:"views/guestEvent.htm",controller:"GuestEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:section?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService,eventViewChanger:eventViewChanger}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function eventViewChanger(e,t){e.eventRoute(t.current.params.eventId,t.current.params.hostId,t.current.params.uid,t.current.params.section)}function addAGuest(){function e(e,t,n,i){}function t(e,t,n,i){function o(e){return btoa(e)}function s(){a.validations.name.valid&&a.validations.email.valid?(a.invitationValidForSubmission=!0,a.submissionButton["class"]["btn-warning"]=!1,a.submissionButton["class"]["btn-success"]=!0,a.submissionButton.message="Invite Guest"):(a.invitationValidForSubmission=!1,a.submissionButton["class"]["btn-warning"]=!0,a.submissionButton["class"]["btn-success"]=!1,a.submissionButton.message="Address Invitation...")}function r(){angular.isUndefined(c.getOneUserEventLocally("hosting",t.eventId))?c.getRemoteEventsForLocal().then(function(){u=c.getOneUserEventLocally("hosting",t.eventId)}):u=c.getOneUserEventLocally("hosting",t.eventId)}var a=this,l=n,c=i,u={};a.tempGuest={name:"",email:"",status:"pending"},a.validations={name:{addressed:!1,valid:!1,errorMessage:""},email:{addressed:!1,valid:!1,errorMessage:""},invitation:{isTheHost:!1,alreadyInvited:!1,errorMessage:""}},a.invitationValidForSubmission=!1,a.submissionButton={style:{color:"red"},"class":{"col-xs-12":!0,"col-sm-12":!0,btn:!0,"btn-warning":!0,"btn-success":!1},message:"Address Invitation..."},a.validateName=function(){a.validations.name.addressed=!0,angular.isDefined(a.tempGuest.name)&&""!=a.tempGuest.name?(a.validations.name.valid=!0,a.validations.name.errorMessage=""):(a.validations.name.valid=!1,a.validations.name.errorMessage="This guest needs a name"),s()},a.validateEmail=function(){a.validations.email.addressed=!0,angular.isDefined(a.tempGuest.email)&&""!=a.tempGuest.email?angular.isUndefined(l.email(a.tempGuest.email))?(a.validations.email.valid=!0,a.validations.email.errorMessage=""):(a.validations.email.valid=!1,a.validations.email.errorMessage=l.email(a.tempGuest.email),e.info(a.validations.email.errorMessage)):(a.validations.email.valid=!1,a.validations.email.errorMessage="Not a valid email"),s()},a.showNameError=function(){return!(a.validations.name.valid||!a.validations.name.addressed)},a.showEmailError=function(){return!(a.validations.email.valid||!a.validations.email.addressed)},a.showInvitationError=function(){return!(!a.validations.invitation.isTheHost&&!a.validations.invitation.alreadyInvited)},a.submitGuestInvitation=function(){if(a.invitationValidForSubmission){if(c.thisIsTheHostEmail(a.tempGuest.email,t.eventId))return a.validations.invitation.isTheHost=!0,a.validations.invitation.errorMessage="No need to invite the host",0;a.validations.invitation.isTheHost=!1,c.getUserIdForGuest(a.tempGuest.email).then(function(e){return e}).then(function(e){angular.isObject(a.guestList)||(a.guestList={});var t=a.tempGuest;a.guestList[e]=t,a.tempGuest={name:"",email:"",status:"pending"}}).then(function(){}).then(function(){})["catch"](function(t){e.info(t),idByEmail=o(a.tempGuest.email),angular.isObject(a.guestList)||(a.guestList={});var n=a.tempGuest;a.guestList[idByEmail]=n,a.tempGuest={name:"",email:"",status:"pending"}})}},r()}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/addAGuest.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","$routeParams","validation","userData"],n}function hostedEventsList(){function e(e,t,n,i){e.$watch("hostedEvents",function(e,t){})}function t(e,t){function n(e){return new Date(parseInt(e))}function i(e){var t=0;return o.guestsAreInvited=!0,Object.keys[e].forEach(function(e){t++}),t}var o=this,s=t;o.guestsAreInvited=!1,o.formatDate=function(e){return n(e)},o.guestsAttending=function(e){return angular.isDefined(e)&&angular.isDefined(e.attending)?i(e.attending):0},o.guestsInvited=function(e){function t(){return n.attending+n.pending+n.declined}if(angular.isDefined(e)){var n={attending:0,pending:0,declined:0};return angular.isDefined(e.attending)&&(n.attending=i(e.attending)),angular.isDefined(e.pending)&&(n.pending=i(e.pending)),angular.isDefined(e.declined)&&(n.declined=i(e.declined)),t()}return 0},o.percentageAttending=function(e){return angular.isDefined(e)?guestsAttending(guestlist)/guestsInvited(e):0},o.eventClicked=function(t){e.info("redirecting to: /event/"+t+"/"+o.hostedEvents[t].host.uid+"/"+o.userId),s.redirectTo("/event",t,o.hostedEvents[t].host.uid,o.userId)},o.inviteGuests=function(e){s.redirectTo("/event/host",e,o.hostedEvents[e].host.uid,"3")}}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/hostedEventsList.directive.htm",replace:!0,scope:{hostedEvents:"=",userId:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","trafficValet"],n}function progressBar(){return{restrict:"E",scope:{curVal:"@",maxVal:"@"},template:"<div class='progress-bar'><div class='progress-bar-bar'>testing</div></div>",link:function(e,t,n){function i(){var n=0;e.maxVal&&(n=Math.min(e.curVal,e.maxVal)/e.maxVal*t.find(".progress-bar").width()),t.find(".progress-bar-bar").css("width",n)}e.$watch("curVal",i),e.$watch("maxVal",i)}}}function hostedGuestList(){function e(e,t,n,i){e.$watch("guestList",function(){e.$apply})}function t(e,t,n){function i(){return angular.isDefined(s.guestList)&&""!=s.guestList?(s.isAGuestList=!0,!0):(s.isAGuestList=!1,!1)}function o(){var o=n;i()||(e.info("going after the list"),o.getEventGuestList(t.uid,t.eventId).then(function(t){e.info("got the list"),e.info(t),s.guestList=t,angular.isObject(t)&&(s.isAGuestList=!0)})["catch"](function(t){e.info("There was an error: "+t)}))}var s=this;s.isAGuestList=!1,o()}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/hostedGuestList.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","$routeParams","userData"],n}function toolBar(){function e(e,t,n,i){}function t(e,t,n,i){function o(){r.checkLoginStatus().then(function(e){s.loggedIn=e})["catch"]()}var s=this,r=n,a=i;s.login=function(){},s.logout=function(){t.info("logging out"),r.logUserOut(),a.redirectTo("/login")},s.loginRegisteredUser=function(){var e=i,o=n,r=userData;o.LoginRegisteredUser(s.email,s.password).then(function(e){return e.uid}).then(function(n){o.getUserBio(n).then(function(e){r.updateBioLocally(e),o.getUserEvents(n).then(function(e){r.updateAllUserEventsLocally(e)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)}),e.redirectTo("/userInformation",n)})["catch"](function(e){})},o(),e.$on("$routeChangeStart",function(e,t){o()})}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendServices","trafficValet"],n}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],eventViewChanger.$inject=["trafficValet","$route"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$log","$routeParams"],angular.module("meetUpEventApp").controller("GuestEventController",GuestEventController),GuestEventController.$inject=["$log"],angular.module("meetUpEventApp").controller("HostEventController",HostEventController),HostEventController.$inject=["$scope","$log","$routeParams","userData","trafficValet","validation"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["trafficValet"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","backendServices"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("addAGuest",addAGuest),angular.module("meetUpEventApp").directive("hostedEventsList",hostedEventsList),angular.module("meetUpEventApp").directive("progressBar",progressBar),angular.module("meetUpEventApp").directive("hostedGuestList",hostedGuestList),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
