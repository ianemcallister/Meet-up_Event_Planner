function AnEventController(e,n){function t(){m.tempDateTime={start:"",end:""},m.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},m.showIfHost=!1,m.hideIfAttending=!0,m.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},u(),d(),m.showIfHost||f()}function s(e){return btoa(e)}function o(e){return atob(e)}function r(e){return Date.parse(e)}function a(){m.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function l(t){e.info("adding them to the registered users list "+t),ref.child("Users").child(t).child("events").child("pending").child(n.uid).child(n.eventId).set({id:n.eventId,eventTimes:{start:m.event.eventTimes.start,end:m.event.eventTimes.end},name:m.event.name,host:n.uid},function(n){n&&e.info("there was an error"+n)}),ref.child("Users").child(t).child("events").child("pending").once("value",function(n){var i=n.val();e.info(n.val()),i.updated?(e.info("deleting updated"),ref.child("Users").child(t).child("events").child("pending").child("updated").remove(function(n){n&&e.info("Deleting failed: "+n.code)})):e.info("nothing to do")},function(n){n&&e.info("The read failed: "+n.code)})}function c(t){e.info("adding them to the UNREGISTERED users list "+t),ref.child("UnregisteredUsers").child(t).child("pending").child(n.uid).child(n.eventId).set({id:n.eventId,host:n.uid,eventTimes:{start:m.event.eventTimes.start,end:m.event.eventTimes.end},name:m.event.name},function(n){n&&e.info("there was an error"+n)})}function u(){var t=ref.getAuth();t.uid==n.hostId?(e.info("is the host"),m.showIfHost=!0):(e.info("not the host"),m.showIfHost=!1)}function d(){m.showIfHost||(e.info("check guest attendance"),userEvents.child("guestList").on("value",function(e){var t=e.val();m.hideIfAttending=!t[n.uid].attending}))}function f(){m.manageSections[1].active=!0,m.manageSections[2].active=!0,m.manageSections[3].active=!0}var m=this;m.tempTime={start:"",end:""},m.userIsHost=!1,m.setTempTime=function(e){"start"==e&&(m.tempDateTime.start=new Date),"end"==e&&(m.tempDateTime.end=new Date)},m.unixTimeToDateTime=function(e){return new Date(parseInt(e))},m.dateTimeToUnixTime=function(e){return Date.parse(e)},m.submit=function(){e.info("submitting the form now!")},m.backToUserEvents=function(){$location.path("/userEvents/"+n.uid+"/"+n.token)},m.eventRedirect=function(t,i){var s=t+"/"+n.uid+"/"+n.token;e.info("redirecting to: "+s),$location.path(s)},m.changeSection=function(n){for(e.info("are we here"),i=1;i<=3;i++)i==n?(m.manageSections[i].active=!0,m.manageSections[i].style["background-color"]="yellow",m.manageSections[i].style.color="black"):(m.manageSections[i].active=!1,m.manageSections[i].style["background-color"]="gray",m.manageSections[i].style.color="white")},m.saveEventTime=function(e,n){m.event.eventTimes||(m.event.eventTimes={start:"",end:""},m.event.eventTimes.start=m.dateTimeToUnixTime(m.tempDateTime.start),m.event.eventTimes.end=m.dateTimeToUnixTime(m.tempDateTime.end)),m.tempDateTime.end<m.tempDateTime.start&&"start"==n&&(m.tempDateTime.end=m.tempDateTime.start),"start"==n&&(m.event.eventTimes.start=m.dateTimeToUnixTime(e)),"end"==n&&(m.event.eventTimes.end=m.dateTimeToUnixTime(e))},m.guestsAreInvited=function(){return!!m.event.guestList},m.validateGuestEmail=function(){if(m.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(m.newGuest.email.address)?(m.newGuest.email.valid=!0,m.newGuest.email.style={color:"green"}):(m.newGuest.email.valid=!1,m.newGuest.email.style={color:""})}},m.isSectionComplete=function(){for(i=0;i<8;i++)e.info(m.requiredInputs[i])},m.saveAndAdvance=function(){m.event.$save().then(function(){e.info("event saved")})["catch"](function(n){e.info("error! "+n)}),m.isSectionComplete(),1==m.manageSections[1].complete&&1==m.manageSections[2].complete&&1==m.manageSections[3].complete?m.eventRedirect("/userEvents",n.uid):m.manageSections[1].active?m.changeSection(2):m.manageSections[2].active?m.changeSection(3):m.manageSections[3].active&&m.changeSection(1)},m.addGuestToHostsList=function(){var t=s(m.newGuest.email.address);if(m.newGuest.name&&m.newGuest.email.valid){if(m.event.guestList)for(var i=0;m.event.guestList[i];){if(m.event.guestList[i].email==o(t))return e.info("This guest is already on the list"),void a();i++}else m.event.guestList={};if(registeredUsers[t]){if(registeredUsers[t]==n.uid)return e.info("tried to register the host"),void a();l(registeredUsers[t]),m.event.guestList[registeredUsers[t]]={attending:!1,status:"pending",name:m.newGuest.name,email:m.newGuest.email.address}}else c(t),m.event.guestList[t]={attending:!1,status:"pending",name:m.newGuest.name,email:m.newGuest.email.address};m.saveEvent(),a()}else e.info("you didn't enter a name and or email")},m.guestWillAttend=function(t){var i=ref.child("Users").child(n.uid).child("events"),s=0,o=!1;if(m.event.guestList[n.uid].attending=t,m.event.guestList[n.uid].status="attending",i.child("pending").on("value",function(o){var r=o.val();e.info(r),e.info(r[n.hostId]),e.info(r[n.hostId][n.eventId]);var a=r[n.hostId][n.eventId];e.info(a);for(invitation in r)s++;e.info("total attending: "+s),t&&i.child("attending").child(n.hostId).child(n.eventId).set(a,function(n){n&&e.info(n)})}),i.child("attending").on("value",function(n){var t=n.val();e.info("this is the attending list"),e.info(t),t.updated&&(o=!0)},function(n){n&&e.info(n)}),2>s){var a=new Date;i.child("pending").update({updated:r(a)},function(n){n&&e.info(n)})}i.child("pending").child(n.hostId).remove(),o&&e.info("removing the updated placeholder"),m.event.$save()},m.updateUpdatedParam=function(){var t=ref.child("Users").child(n.uid).child("events");e.info("updating the param"),t.child("attending").on("value",function(n){e.info(n.val())}),t.child("attending").child("updated").remove()},m.addInvitationToAttending=function(t){var i=ref.child("Users").child(n.uid).child("events"),s=0;i.child("pending").on("value",function(o){var r=o.val(),a=r[n.hostId][n.eventId];e.info(r),e.info(r[n.hostId]),e.info(r[n.hostId][n.eventId]);for(invitation in r)s++;e.info("total pending invitations: "+s),e.info(t),t&&i.child("attending").child(n.hostId).child(n.eventId).set(a,function(n){n&&e.info(n)})})},t()}function GuestEventController(e){e.info("into the GuestEventController")}function HostEventController(e,n,t,i,s,o){function r(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function l(e,n){return(a(n)-a(e))/6e4}function c(e){h+=e,m.progressBar.complete=h,m.progressBar.style.width=h+"%",m.progressBar.message=h+"%"}function u(){var e=new Date;e.setHours(e.getHours()+Math.round(e.getMinutes()/60)),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),m.tempTime.start=e,m.tempTime.end=e,m.tempTime.duration=l(m.tempTime.start,m.tempTime.end)}function d(){angular.isDefined(m.tempEvent.eventTimes.start)&&(m.tempTime.start=r(m.tempEvent.eventTimes.start),m.tempTime.end=r(m.tempEvent.eventTimes.end))}function f(){g.loadAnEventProgressively(t.uid,t.eventId).then(function(e){m.tempEvent=e,d()})["catch"](function(e){n("the error is: "+e)}),m.activeSection=parseInt(t.section),u()}var m=this,v=s,g=i,p=o,h=0;m.activeSection=1,m.tempTime={start:"",end:"",duration:""},m.progressBar={complete:m.percentComplete,style:{width:m.percentComplete+"%"},message:m.percentComplete+"%"},m.tempEvent={},m.requiredFieldComplete=p.generateEventRequirnments(),m.formatDuration=function(){m.tempTime.duration=l(m.tempTime.start,m.tempTime.end);var e=Math.floor(m.tempTime.duration/60),n=m.tempTime.duration%60,t=Math.round(n/15)/4;return e+t+" h"},m.validateTime=function(e){n.info("validating "+e);var t={eventStart:m.tempTime.start,eventEnd:m.tempTime.end};angular.isDefined(t[e])&&""!=t[e]&&m.tempTime.duration>0?(m.requiredFieldComplete[e].completed=!0,m.requiredFieldComplete[e].row["class"]["has-success"]=!0,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,m.requiredFieldComplete[e].row["class"]["has-error"]=!1):(m.requiredFieldComplete[e].completed=!1,m.requiredFieldComplete[e].row["class"]["has-success"]=!1,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,m.requiredFieldComplete[e].row["class"]["has-error"]=!0)},m.settingTempStart=function(){m.tempTime.end=m.tempTime.start,m.validateTime("eventStart")},m.settingTempEnd=function(){m.tempTime.start>m.tempTime.end&&(m.tempTime.start=m.tempTime.end),m.validateTime("eventEnd"),m.tempTime.duration=l(m.tempTime.start,m.tempTime.end)},m.backToUserEvents=function(){v.redirectTo("/userEvents",t.uid)},m.sectionBack=function(){targetSection=m.activeSection-1,v.redirectTo("/event/host",t.eventId,t.uid,targetSection)},m.sectionForward=function(){targetSection=m.activeSection+1,v.redirectTo("/event/host",t.eventId,t.uid,targetSection)},m.verifyRequired=function(e,n){angular.isDefined(n)&&""!=n?(0==m.requiredFieldComplete[e].completed&&c(11),m.requiredFieldComplete[e].completed=!0,m.requiredFieldComplete[e].row["class"]["has-success"]=!0,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,m.requiredFieldComplete[e].row["class"]["has-error"]=!1):(1==m.requiredFieldComplete[e].completed&&c(-11),m.requiredFieldComplete[e].completed=!1,m.requiredFieldComplete[e].row["class"]["has-success"]=!1,m.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,m.requiredFieldComplete[e].row["class"]["has-error"]=!0)},f()}function LandingPageController(e,n,t,s,o){function r(e){return btoa(e)}function a(e){return Date.parse(e)}function l(i,s){var o=i+"/"+d.uid+"/"+d.token;n.info("redirecting to: "+o),t.path(o),e.$apply()}var c=this,u="https://meetupplanner.firebaseio.com/",d={};c.showRequirnments=!1,c.validNewName={valid:!1,style:{color:""}},c.validNewEmail={valid:!1,style:{color:""}},c.securePassword={secure:!1,style:{color:""}},c.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},c.message="testing",c.validUserEmail={valid:!1,style:{color:""}},c.validUserPassword={valid:!1,style:{color:""}},c.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},c.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},c.displayPassReqs=function(){c.newName&&c.newEmail?c.showRequirnments=!0:c.showRequirnments=!1},c.checkNewName=function(){c.newName&&(c.newName.length>0?(c.validNewName.valid=!0,c.validNewName.style={color:"green"}):(c.validNewName.valid=!1,c.validNewName.style={color:"red"})),c.openCreateUserButton()},c.checkNewEmail=function(){if(c.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(c.newEmail)?(c.validNewEmail.valid=!0,c.validNewEmail.style={color:"green"}):(c.validNewEmail.valid=!1,c.validNewEmail.style={color:"red"})}c.openCreateUserButton()},c.checkUserEmail=function(){if(c.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(c.userEmail)?(c.validUserEmail.valid=!0,c.validUserEmail.style={color:"green"}):(c.validUserEmail.valid=!1,c.validUserEmail.style={color:"red"})}c.openUserLoginBtn()},c.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(c.newPassword){for(c.newPassword.length>15?(c.passwordRequirnments[0].style={color:"green"},c.passwordRequirnments[0].met=!0):(c.passwordRequirnments[0].style={color:"red"},c.passwordRequirnments[0].met=!1),c.newPassword.length<=100?(c.passwordRequirnments[1].style={color:"green"},c.passwordRequirnments[1].met=!0):(c.passwordRequirnments[1].style={color:"red"},c.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(c.newPassword)?(c.passwordRequirnments[i].style={color:"green"},c.passwordRequirnments[i].met=!0):(c.passwordRequirnments[i].style={color:"red"},c.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(c.newPassword)?(c.passwordRequirnments[6].style={color:"green"},c.passwordRequirnments[6].met=!0):(c.passwordRequirnments[6].style={color:"red"},c.passwordRequirnments[6].met=!1),c.passwordRequirnments[0].met&&c.passwordRequirnments[1].met&&c.passwordRequirnments[2].met&&c.passwordRequirnments[3].met&&c.passwordRequirnments[4].met&&c.passwordRequirnments[5].met&&c.passwordRequirnments[6].met?c.securePassword.secure=!0:c.securePassword.secure=!1,c.securePassword.secure?c.securePassword.style={color:"green"}:c.securePassword.style={color:"red"}}c.openCreateUserButton()},c.checkUserPasswords=function(){c.userPassword&&(c.userPassword.length>15?(c.validUserPassword.style={color:"green"},c.validUserPassword.valid=!0):(c.validUserPassword.style={color:"red"},c.validUserPassword.valid=!1)),c.openUserLoginBtn()},c.openCreateUserButton=function(){c.validNewName.valid&&c.validNewEmail.valid&&c.securePassword.secure?(c.unlockCreateUserBtn["class"]="btn btn-success",c.unlockCreateUserBtn.usable=!0):(c.unlockCreateUserBtn["class"]="btn btn-warning",c.unlockCreateUserBtn.usable=!1)},c.openUserLoginBtn=function(){c.validUserEmail.valid&&c.validUserPassword.valid?(c.unclockUserLoginBtn["class"]="btn btn-success",c.unclockUserLoginBtn.usable=!0):(c.unclockUserLoginBtn["class"]="btn btn-warning",c.unclockUserLoginBtn.usable=!1)},c.update=function(){c.newName=s.find("#newName")[0].value,c.newEmail=s.find("#newEmail")[0].value,c.userEmail=s.find("#userEmail")[0].value,c.checkNewName(),c.checkNewEmail(),c.checkUserEmail()},c.createNewUser=function(){if(n.info("Creating a new user account now!"),c.unlockCreateUserBtn.usable){var e=new Firebase(u);e.createUser({email:c.newEmail,password:c.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),d=i;var s=e.child("Users/"+i.uid),o=new Date;s.set({bio:{name:c.newName,email:c.newEmail},events:{pending:{updated:a(o)},hosting:{updated:a(o)},attending:{updated:a(o)},completed:{updated:a(o)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(r(c.newEmail)).set(d.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",d)}})}},c.loginRegisteredUser=function(){if(c.unclockUserLoginBtn.usable){var t=new Firebase(u);t.authWithPassword({email:c.userEmail,password:c.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),d=i,l("/userInformation",d),e.$apply())})}},c.alertMe=function(){alert("this is working! an alert!")},c.onResizeFunction=function(){var e=angular.element(".inputText");o.outerWidth>o.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in s&&s.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(s.body)},!1),angular.element(o).bind("resize",function(){c.onResizeFunction()}),angular.element(s).ready(function(){o.outerWidth<600&&c.onResizeFunction()}),c.master={},c.update=function(e){c.master=angular.copy(e)},c.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),c.user=angular.copy(c.master)},c.reset()}function MainController(e,n,t,i){function s(){angular.element(t);t.css("hight",i.outerHeight)}var o=this,r="https://meetupplanner.firebaseio.com/",a=new Firebase(r);o.logout=function(){alert("logging you out!"),a.unauth(),n.path("/")},angular.element(t).ready(function(){s()})}function NewUserSignUpController(e,n,t,s,o,r){function a(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var c=t;l.checkNewName=function(){var e=[],n=c.required(l.inputs.newName),t=c.minNameLength(l.inputs.newName);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.name=e.join(", "):l.errors.name="",a()},l.checkNewEmail=function(){var e=[],n=c.required(l.inputs.newEmail),t=c.email(l.inputs.newEmail);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.email=e.join(", "):l.errors.email="",a()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],n=c.required(l.inputs.newPassword),t=[c.minPassLength(l.inputs.newPassword),c.maxPassLength(l.inputs.newPassword),c.atLeastOneLowercase(l.inputs.newPassword),c.atLeastOneUppercase(l.inputs.newPassword),c.atLeastOneNumber(l.inputs.newPassword),c.atLeastOneSymbol(l.inputs.newPassword),c.illegalCharacter(l.inputs.newPassword)];angular.isDefined(n)&&e.push(n),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var s=!1;for(i=0;i<7;i++)t[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},s=!0);l.errors.password=s,a()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=o;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var t=s,i=r;t.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(s){i.loadPrimaries(l.inputs.newEmail,l.inputs.newName,s.uid),t.addNewUserToDatabase(s.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){n.info(i),t.addNewUserToRegUsersList(s.uid,l.inputs.newEmail).then(function(t){e.redirectTo("/userInformation",s.uid),n.info(t)})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})}}}function RegUserLoginController(e,n,t,i,s){function o(){angular.isDefined(r.inputs.email)&&""!==r.inputs.email&&angular.isDefined(r.inputs.password)&&""!==r.inputs.password?(r.inputs.requiredFieldsDefined=!0,r.unclockUserLoginBtn["class"]="btn btn-success",r.unclockUserLoginBtn.message="Login",r.unclockUserLoginBtn.usable=!0):(r.inputs.requiredFieldsDefined=!1,r.unclockUserLoginBtn["class"]="btn btn-warning",r.unclockUserLoginBtn.message="Need Email & Pass",r.unclockUserLoginBtn.usable=!1)}var r=this;r.inputs={email:"",password:"",requiredFieldsDefined:!1},r.errors={message:"",passesAllTests:!0},r.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning",message:"Need Email & Pass"},r.update=function(){r.inputs.email=n.find("#userEmail")[0].value,r.inputs.password=n.find("#userPassword")[0].value,o()},r.loginRegisteredUser=function(){var n=i,o=t,a=s;o.LoginRegisteredUser(r.inputs.email,r.inputs.password).then(function(e){r.errors.passesAllTests=!0,a.setPrimariesLocally(r.inputs.email,r.inputs.name,e.uid)}).then(function(){e.info("uid is "+a.getUIDLocally()),o.getUserBio(a.getUIDLocally()).then(function(n){a.updateBioLocally(n),o.getUserEvents(a.getUIDLocally()).then(function(e){a.updateAllUserEventsLocally(e)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)}),n.redirectTo("/userInformation",a.getUIDLocally())})["catch"](function(e){r.errors.message=e,r.errors.passesAllTests=!1})},r.clicked=function(){var e=t;e.logUserOut()}}function topMenuController(e,n,t,i,s){function o(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),a.loggedIn=!0):(n.info("User is logged out"),a.loggedIn=!1)}function r(e,i){var s=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+s),t.path(s)}var a=this,l="https://meetupplanner.firebaseio.com/",c=new Firebase(l);a.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(s).bind("resize",function(){a.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){s.outerWidth<600&&(a.onResizeFunction(),e.$apply())}),a.logout=function(){n.info("logging out!"),a.loggedIn=!1,c.unauth(),r("/",{uid:"",token:""})},a.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:a.navbarUserEmail,password:a.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),r("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},a.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",s.outerWidth-26+"px")},c.onAuth(o)}function UserEventsController(e,n,t,i){function s(e){return Date.parse(e)}function o(){var e=0;for(event in c.events.hosting)e++;return e}function r(){var e=new Date,n=10*s(e)+o();return n}function a(){Object.keys(c.events).forEach(function(e){Object.keys(c.events[e]).forEach(function(n){var t=0;angular.isObject(c.events[e][n])&&t++,t>0?c.sectionAvailable[e]=!0:c.sectionAvailable[e]=!1})})}function l(){u.setUIDLocally(n.uid),u.loadBio(n.uid).then(function(e){c.userBio=e})["catch"](),c.events=u.getAllUserEventsLocally(),u.getRemoteEventsForLocal().then(function(e){c.events=u.getAllUserEventsLocally()}).then(function(){a()})}var c=this,u=t;c.showDecline=!1,c.userBio={},c.events={},c.sectionAvailable={pending:!1,attending:!1,hosting:!1,completed:!1},c.errors={},c.createNewEvent=function(){var n=r(),t=i;u.createNewEvent(n).then(function(n){e.info(n)}).then(function(){u.cleanDBEventsCategory("hosting")})["catch"](function(n){e.info(n)}),t.redirectTo("/event",n,u.getUIDLocally(),u.getUIDLocally())},l()}function UserInformationController(e,n,t,i,s){function o(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(){c.loadBio(t.uid).then(function(e){l.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(l.tempBirthday=o(e.dob))})}var l=this,c=i;l.user={},l.tempBirthday,l.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},l.checkValues=function(){l.view.isData=!0,!angular.isUndefined(l.user.company)&&""!==l.user.company||!angular.isUndefined(l.user.title)&&""!==l.user.title||!angular.isUndefined(l.user.dob)&&""!==l.user.dob?(l.view.dataToSave=!0,l.view.proceedBtn="btn btn-success",l.view.btnMssg="Save & Continue"):(l.view.dataToSave=!1,l.view.proceedBtn="btn btn-primary",l.view.btnMssg="Move On...")},l.updateDOB=function(){l.user.dob=r(l.tempBirthday),l.checkValues()},l.saveAndMoveOn=function(){var n=s,i=c.getUIDLocally();0!==l.tempBirthday&&l.updateDOB(),(""==i||angular.isUndefined(i))&&c.setUIDLocally(t.uid),l.view.isData&&(e.info("saving the new data"),c.updateBioLocally(l.user)),n.redirectTo("/userEvents",l.user.uid)},a()}function authService(e,n){function t(){var e=n;e.checkLoginStatus().then(function(e){return e})["catch"](function(e){return e})}var i={isLoggedIn:t};return i}function backendServices(e,n,t){function i(e){return btoa(e)}function s(e){return atob(e)}function o(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(e,t){var i=new Firebase(I);return n(function(n,s){i.createUser({email:e,password:t},function(e,t){e?s("Error creating user: "+e):n(t)})})}function l(e,t,i){var s=new Firebase(I),o=s.child("Users").child(e),a=new Date;return n(function(n,s){o.set({bio:{uid:e,name:t,email:i},events:{pending:{updated:r(a)},hosting:{updated:r(a)},attending:{updated:r(a)},completed:{updated:r(a)}}},function(e){e?s("Data could not be saved: "+e):n("Data saved successfully.")})})}function c(e,t){var s=new Firebase(I),o=i(t),r=s.child("Uids").child(o);return n(function(n,t){r.set(e,function(e){e?t("Data could not be saved. "+e):n("uid created sucessfully.")})})}function u(t,i){var s=new Firebase(I);return n(function(n,o){s.authWithPassword({email:t,password:i},function(t,i){t?o("Error Logging In: "+t):(e.info("Logged In successfully: "+i.uid),n(i))})})}function d(){var n=new Firebase(I);return new Promise(function(t,i){n.onAuth(function(n){n?(e.info("User "+n.uid+" is logged in with "+n.provider),t(!0)):(e.info("User is logged out"),t(!1))})})}function f(){var n=new Firebase(I);e.info("logging user out"),n.unauth()}function m(e){var t=new Firebase(I),i=e.uid,s=t.child("Users").child(i);return n(function(n,t){s.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user data uploaded successfully")})})}function v(e){var t=new Firebase(I),i=e.uid.toString(),s=t.child("Users").child(i).child("bio");return n(function(n,t){s.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user bio data uploaded successfully")})})}function g(){}function p(e){var t=new Firebase(I),i=t.child("Users").child(e).child("bio");return n(function(e,n){i.once("value",function(n){e(n.val())},function(e){e&&n(e)})})}function h(e,t){var i=new Firebase(I),s=t.id,o=i.child("Users").child(e).child("events").child("hosting").child(s);return n(function(e,n){o.set(t,function(t){t?n("There was an error: "+t):e("New event saved to DB successfully")})})}function w(e,t,i,s){var o=new Firebase(I),r=o.child("Users").child(s).child("events").child("hosting").child(i).child("guestList").child(t);return n(function(n,t){r.set({rsvpd:!1,status:"pending",name:e},function(e){e?t("There was an error: "+e):n("New event saved to DB successfully")})})}function b(e){var t=new Firebase(I),i=t.child("Users").child(e).child("events");return n(function(e,n){i.orderByKey().once("value",function(n){var t=n.val(),i={hosting:t.hosting,attending:t.attending,pending:t.pending,completed:t.completed};e(i)},function(e){e&&n(e)})})}function U(e,t){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(t);return n(function(e,n){s.once("value",function(n){var t=n.val();e(t)},function(e){e&&n(e)})})}function E(t){var i=new Firebase(I),s=i.child("Uids");return n(function(n,i){s.once("value",function(s){var o=s.val();Object.keys(o).forEach(function(s){e.info("from list: "+s+", matching to: "+t),s==t?n(o[s]):i("No user by that email")})})})}function y(e,t){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(t).child("guestList");return n(function(e,n){s.once("value",function(n){var t=n.val();e(t)},function(e){e&&n("There was an error getting the guest list: "+e)})})}function L(e,n,t){}function T(e,t){var i=new Firebase(I),s=i.child("Users").child(t).child("events").child(e).child("updated");return n(function(e,n){s.set(null,function(t){t?n("There was an error deleting update field: "+t):e("Deleted update successfully")})})}function D(e,t){var i=new Firebase(I),s=i.child("Users").child(t).child("events").child(e);return n(function(e,n){s.once("value",function(t){var i=t.val();angular.isDefined(i.updated)?e(!0):n(!1)},function(e){e&&n(e)})})}var I="https://meetupplanner.firebaseio.com/",C={utf8_to_b64:i,b64_to_utf8:s,unixTimeToDateTime:o,dateTimeToUnixTime:r,LoginRegisteredUser:u,checkLoginStatus:d,logUserOut:f,downloadUserData:g,getUserBio:p,getUserEvents:b,getAHostedEvent:U,getAnInvitedEvent:L,findGuestUID:E,getGuestListForEvent:y,createNewUser:a,addNewUserToDatabase:l,addNewUserToRegUsersList:c,uploadUserData:m,uploadUserBio:v,createHostedEvent:h,addGuestToHostGuestListonDB:w,deleteUpdateField:T,thereWasAnUpdateField:D};return C}function trafficValet(e,n){function t(t,i,s,o){angular.isDefined(i)?(t=t+"/"+i,angular.isDefined(s)&&(t=t+"/"+s,angular.isDefined(o)&&(t=t+"/"+o,e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)):(e.info("redirecting now to "+t),n.path(t))}function i(t,i,s,o){if(e.info("Traffic valet accessed"),e.info("eventId: "+t),e.info("hostId: "+i),e.info("userId: "+s),angular.isUndefined(o)&&(o=1),i===s){var r="/event/host/"+t+"/"+s+"/"+o;e.info(r),n.path(r)}else{var r="/event/guest/"+t+"/"+s+"/"+i;e.info(r),n.path(r)}}var s={redirectTo:t,eventRoute:i};return s}function userData(e,n,t){function i(e){return btoa(e)}function s(){return""!==_.bio.uid&&""!==_.bio.name&&""!==_.bio.email}function o(n,t){return e.info("checking if the event exits"),!!angular.isDefined(_.events[n][t])}function r(n,t){return e.info("current user bio is:"),e.info(_.bio),angular.isDefined(_.bio.email)&&(e.info("email is defined"),""!=_.bio.email)?n==_.bio.email?(e.info("email matches"),!0):(e.info("email does not match"),!1):(e.info("current event is:"),e.info(_.events.hosting[t]),_.events.hosting[t].host.email==n?(e.info("event host email matches"),!0):(e.info("event host email DOESN'T not match"),!1))}function a(n,t){return e.info(_.events.hosting[t]),angular.isDefined(_.events.hosting[t].guestList)?(e.info("there is a guest list"),refEmail=i(n),Object.keys(_.events.hosting[t].guestList).forEach(function(n){return refEmail==n?(e.info("an email match was found, this guest has been invited already"),!0):(e.info("no email match found, ok to invite guest"),!1)}),void 0):(e.info("no guestlist"),!1)}function l(e){Object.keys(_.events[e]).forEach(function(n){angular.isObject(_.events[e][n])||delete _.events[e][n]})}function c(){return _.bio.uid}function u(){return _.bio.name}function d(){return _.bio.email}function f(){return _.bio.company}function m(){return _.bio.title}function v(){return _.bio.dob}function g(){return{uid:_.bio.uid,name:_.bio.name,email:_.bio.email,company:_.bio.company,title:_.bio.title,dob:_.bio.dob}}function p(e,n){return _.events[e][n]}function h(e){return _.events[e]}function w(){return _.events}function b(e){_.bio.uid=e}function U(e){_.bio.name=e}function E(e){_.bio.email=e}function y(e){_.bio.company=e}function L(e){_.bio.title=e}function T(e){_.bio.dob=e}function D(e,n,t){angular.isDefined(e)&&E(e),angular.isDefined(n)&&u(n),angular.isDefined(t)&&b(t)}function I(e,n){var t=n.id;l(e),_.events[e][t]=n}function C(e){_.events=e}function A(e){U(e.name),E(e.email),y(e.company),L(e.title),T(e.dob),P()}function $(e,s,o,r,a){var l=t;return n(function(n,t){angular.isDefined(s)&&(o=i(s)),l.addGuestToHostGuestListonDB(e,o,r,a).then(function(e){n(e)})["catch"](function(e){t(e)})})}function k(e){var s=t;return n(function(n,t){guestEmail=i(e),s.findGuestUID(guestEmail).then(function(e){n(e)})["catch"](function(e){t(e)})})}function R(e,n){delete _.events[e][n.id]}function q(){var e=t;e.downloadUserData().then(function(e){_=e})}function B(e){var i=t;return n(function(n,t){i.getUserBio(e).then(function(e){n(e)})["catch"](function(e){t("There was an error reading the user bio: "+e)})})}function S(){var e=t;return n(function(n,t){e.getUserEvents(c()).then(function(e){Object.keys(e).forEach(function(n){Object.keys(e[n]).forEach(function(t){I(n,e[n][t])})}),n(e)})["catch"](function(e){t("There was an error reading the user events: "+e);
})})}function F(i){var s=t;return n(function(n,t){s.getAHostedEvent(c(),i).then(function(t){e.info(t),n(t)})["catch"](function(e){t("There was an error reading the user event: "+e)})})}function N(){var e=t;e.uploadUserData(_)}function P(){var e=t;e.uploadUserBio(_.bio)}function G(){}function z(i){var s=t;return n(function(n,t){s.thereWasAnUpdateField(i,c()).then(function(n){s.deleteUpdateField(i,c()).then(function(n){e.info(n)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)})})}function x(e,i){var s=t;return n(function(n,t){s.getGuestListForEvent(e,i).then(function(e){n(e)})["catch"](function(e){t(e)})})}function j(e){return n(function(n,t){s()?n(g()):B(e).then(function(e){n(e)})["catch"](function(e){t(e)})})}function M(e,t){return b(e),n(function(e,n){F(t).then(function(n){e(n)})["catch"](),o("hosting",t)&&e(p("hosting",t))})}function O(e){var t={};return n(function(e,n){S().then(function(n){e(n)}),t=h(type),e(t)})}function H(e){var i=t,s={};return s={id:e,name:"",type:"",host:{name:_.bio.name,uid:_.bio.uid,email:_.bio.email},message:"",eventTimes:{start:0,end:0},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0},guestList:{}},I("hosting",s),n(function(e,n){i.createHostedEvent(c(),s).then(function(n){e(n)})["catch"](function(e){n(e)})})}function V(e){return n(function(e,n){})}var _={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{hosting:{},pending:{},attending:{},completed:{}}},W={bioPrimariesAreCompleteLocally:s,eventExistsLocally:o,thisIsTheHostEmail:r,guestInvitedAlready:a,cleanEvents:l,getUIDLocally:c,getNameLocally:u,getEmailLocally:d,getCompanyLocally:f,getTitleLocally:m,getDOBLocally:v,getFullBioLocally:g,getOneUserEventLocally:p,getUserEventsLocally:h,getAllUserEventsLocally:w,setUIDLocally:b,setNameLocally:U,setEmailLocally:E,setCompanyLocally:y,setTitleLocally:L,setDOBLocally:T,setPrimariesLocally:D,updateUserEventsLocally:I,updateAllUserEventsLocally:C,updateBioLocally:A,addGuestToHostGuestList:$,removeUserEventsLocally:R,getFullRemoteDBforLocal:q,getRemoteBioForLocal:B,getRemoteEventsForLocal:S,getOneRemoteEventForLocal:F,setFullRemoteDBfromLocal:N,setRemoteBioFromLocal:P,setRemoteEventsFromLocal:G,cleanDBEventsCategory:z,getUserIdForGuest:k,getEventGuestList:x,loadBio:j,loadEventsProgressively:O,loadAnEventProgressively:M,createNewEvent:H,updatePendingEventsListForGuest:V};return W}function validation(e){function n(e){return angular.isUndefined(e)?"This is a required field":void 0}function t(e){return angular.isDefined(e)&&e.length<p?"Name should be at least "+p+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<h)}function s(e){return angular.isDefined(e)&&!(e.length>w)}function o(e){if(angular.isDefined(e)){var n=new RegExp("[!@#$%^&*]");return!!n.test(e)}return!1}function r(e){if(angular.isDefined(e)){var n=new RegExp("[0-9]","");return!!n.test(e)}return!1}function a(e){if(angular.isDefined(e)){var n=new RegExp("[a-z]","");return!!n.test(e)}return!1}function l(e){if(angular.isDefined(e)){var n=new RegExp("[A-Z]","");return!!n.test(e)}return!1}function c(e){if(angular.isDefined(e)){var n=new RegExp("[^A-z0-9!@#$%^&*]","");return!n.test(e)}return!1}function u(e){var n=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return angular.isDefined(e)&&!n.test(e)?"Not a valid email":void 0}function d(e){}function f(){var e={eventName:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventHost:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventStart:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventEnd:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventStreet01:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventCity:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventState:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventZip:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventGuest:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}}};return e}function m(){}function v(){}function g(){}var p=3,h=16,w=100,b={required:n,minNameLength:t,minPassLength:i,maxPassLength:s,atLeastOneSymbol:o,atLeastOneNumber:r,atLeastOneLowercase:a,atLeastOneUppercase:l,illegalCharacter:c,email:u,dateOfBirth:d,generateEventRequirnments:f,updateEventReqStatus:m,updateEventReqAddressed:v,updateEventReqClass:g};return b}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/host/:eventId/:uid/:section",{templateUrl:"views/hostEvent.htm",controller:"HostEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/guest/:eventId/:uid/:hostId",{templateUrl:"views/guestEvent.htm",controller:"GuestEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:section?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService,eventViewChanger:eventViewChanger}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function eventViewChanger(e,n){e.eventRoute(n.current.params.eventId,n.current.params.hostId,n.current.params.uid,n.current.params.section)}function addAGuest(){function e(e,n,t,i){}function n(e,n,t,i){function s(){r.validations.name.valid&&r.validations.email.valid?(e.info("ready to submit"),r.invitationValidForSubmission=!0,r.submissionButton["class"]["btn-warning"]=!1,r.submissionButton["class"]["btn-success"]=!0,r.submissionButton.message="Invite Guest"):(e.info("not ready to submit"),r.invitationValidForSubmission=!1,r.submissionButton["class"]["btn-warning"]=!0,r.submissionButton["class"]["btn-success"]=!1,r.submissionButton.message="Address Invitation...")}function o(){angular.isUndefined(l.getOneUserEventLocally("hosting",n.eventId))?l.getRemoteEventsForLocal().then(function(){c=l.getOneUserEventLocally("hosting",n.eventId)}):c=l.getOneUserEventLocally("hosting",n.eventId)}var r=this,a=t,l=i,c={};r.tempGuest={name:"",email:""},r.validations={name:{addressed:!1,valid:!1,errorMessage:""},email:{addressed:!1,valid:!1,errorMessage:""},invitation:{isTheHost:!1,alreadyInvited:!1,errorMessage:""}},r.invitationValidForSubmission=!1,r.submissionButton={style:{color:"red"},"class":{"col-xs-12":!0,"col-sm-12":!0,btn:!0,"btn-warning":!0,"btn-success":!1},message:"Address Invitation..."},r.validateName=function(){r.validations.name.addressed=!0,angular.isDefined(r.tempGuest.name)&&""!=r.tempGuest.name?(r.validations.name.valid=!0,r.validations.name.errorMessage=""):(r.validations.name.valid=!1,r.validations.name.errorMessage="This guest needs a name"),s()},r.validateEmail=function(){r.validations.email.addressed=!0,angular.isDefined(r.tempGuest.email)&&""!=r.tempGuest.email?angular.isUndefined(a.email(r.tempGuest.email))?(r.validations.email.valid=!0,r.validations.email.errorMessage=""):(r.validations.email.valid=!1,r.validations.email.errorMessage=a.email(r.tempGuest.email),e.info(r.validations.email.errorMessage)):(r.validations.email.valid=!1,r.validations.email.errorMessage="Not a valid email"),s()},r.showNameError=function(){return!(r.validations.name.valid||!r.validations.name.addressed)},r.showEmailError=function(){return!(r.validations.email.valid||!r.validations.email.addressed)},r.showInvitationError=function(){return!(!r.validations.invitation.isTheHost&&!r.validations.invitation.alreadyInvited)},r.submitGuestInvitation=function(){if(e.info("submitting the invitation"),r.invitationValidForSubmission){if(l.thisIsTheHostEmail(r.tempGuest.email,n.eventId))return r.validations.invitation.isTheHost=!0,r.validations.invitation.errorMessage="No need to invite the host",0;r.validations.invitation.isTheHost=!1,l.getUserIdForGuest(r.tempGuest.email).then(function(n){return e.info("found user with that email: "+n),n}).then(function(e){l.addGuestToHostGuestList(r.tempGuest.name,void 0,e,n.eventId,n.uid).then()["catch"]()}).then(function(){l.updatePendingEventsListForUser()}).then(function(){})["catch"](function(t){e.info(t),l.addGuestToHostGuestList(r.tempGuest.name,r.tempGuest.email,void 0,n.eventId,n.uid).then(function(n){e.info("got this result: "+n)}).then(function(){l.updatePendingEventsListForGuest(n.eventId)}).then(function(){})["catch"](function(n){e.info("got this result: "+positiveResult)})})}},o()}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/addAGuest.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","$routeParams","validation","userData"],t}function hostedEventsList(){function e(e,n,t,i){}function n(e,n){function t(e){return new Date(parseInt(e))}function i(e){var n=0;return s.guestsAreInvited=!0,Object.keys[e].forEach(function(e){n++}),n}var s=this,o=n;s.guestsAreInvited=!1,s.formatDate=function(n){return e.info("got thist time: "+n),t(n)},s.guestsAttending=function(e){return angular.isDefined(e)&&angular.isDefined(e.attending)?i(e.attending):0},s.guestsInvited=function(e){function n(){return t.attending+t.pending+t.declined}if(angular.isDefined(e)){var t={attending:0,pending:0,declined:0};return angular.isDefined(e.attending)&&(t.attending=i(e.attending)),angular.isDefined(e.pending)&&(t.pending=i(e.pending)),angular.isDefined(e.declined)&&(t.declined=i(e.declined)),n()}return 0},s.percentageAttending=function(e){return angular.isDefined(e)?guestsAttending(guestlist)/guestsInvited(e):0},s.eventClicked=function(n){e.info("redirecting to: /event/"+n+"/"+s.hostedEvents[n].host.uid+"/"+s.userId),o.redirectTo("/event",n,s.hostedEvents[n].host.uid,s.userId)}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/hostedEventsList.directive.htm",replace:!0,scope:{hostedEvents:"=",userId:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","trafficValet"],t}function progressBar(){return{restrict:"E",scope:{curVal:"@",maxVal:"@"},template:"<div class='progress-bar'><div class='progress-bar-bar'>testing</div></div>",link:function(e,n,t){function i(){var t=0;e.maxVal&&(t=Math.min(e.curVal,e.maxVal)/e.maxVal*n.find(".progress-bar").width()),n.find(".progress-bar-bar").css("width",t)}e.$watch("curVal",i),e.$watch("maxVal",i)}}}function hostedGuestList(){function e(e,n,t,i){e.$watch("guestList",function(){e.$apply})}function n(e,n,t){function i(){return angular.isDefined(o.guestList)&&""!=o.guestList?(o.isAGuestList=!0,!0):(o.isAGuestList=!1,!1)}function s(){var s=t;i()||(e.info("going after the list"),s.getEventGuestList(n.uid,n.eventId).then(function(n){e.info("got the list"),e.info(n),o.guestList=n,angular.isObject(n)&&(o.isAGuestList=!0)})["catch"](function(n){e.info("There was an error: "+n)}))}var o=this;o.isAGuestList=!1,s()}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/hostedGuestList.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","$routeParams","userData"],t}function toolBar(){function e(e,n,t,i){}function n(e,n){var t=this,i=n;i.checkLoginStatus().then(function(e){t.loggedIn=e})["catch"](),t.clicked=function(){e.info("button clicked")}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","backendServices"],t}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],eventViewChanger.$inject=["trafficValet","$route"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$log","$routeParams"],angular.module("meetUpEventApp").controller("GuestEventController",GuestEventController),GuestEventController.$inject=["$log"],angular.module("meetUpEventApp").controller("HostEventController",HostEventController),HostEventController.$inject=["$scope","$log","$routeParams","userData","trafficValet","validation"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","backendServices"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("addAGuest",addAGuest),angular.module("meetUpEventApp").directive("hostedEventsList",hostedEventsList),angular.module("meetUpEventApp").directive("progressBar",progressBar),angular.module("meetUpEventApp").directive("hostedGuestList",hostedGuestList),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
