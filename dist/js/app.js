function AnEventController(e,n){function t(){v.tempDateTime={start:"",end:""},v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},v.showIfHost=!1,v.hideIfAttending=!0,v.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},c(),d(),v.showIfHost||f()}function o(e){return btoa(e)}function a(e){return atob(e)}function r(e){return Date.parse(e)}function s(){v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function l(t){e.info("adding them to the registered users list "+t),ref.child("Users").child(t).child("events").child("pending").child(n.uid).child(n.eventId).set({id:n.eventId,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name,host:n.uid},function(n){n&&e.info("there was an error"+n)}),ref.child("Users").child(t).child("events").child("pending").once("value",function(n){var i=n.val();e.info(n.val()),i.updated?(e.info("deleting updated"),ref.child("Users").child(t).child("events").child("pending").child("updated").remove(function(n){n&&e.info("Deleting failed: "+n.code)})):e.info("nothing to do")},function(n){n&&e.info("The read failed: "+n.code)})}function u(t){e.info("adding them to the UNREGISTERED users list "+t),ref.child("UnregisteredUsers").child(t).child("pending").child(n.uid).child(n.eventId).set({id:n.eventId,host:n.uid,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name},function(n){n&&e.info("there was an error"+n)})}function c(){var t=ref.getAuth();t.uid==n.hostId?(e.info("is the host"),v.showIfHost=!0):(e.info("not the host"),v.showIfHost=!1)}function d(){v.showIfHost||(e.info("check guest attendance"),userEvents.child("guestList").on("value",function(e){var t=e.val();v.hideIfAttending=!t[n.uid].attending}))}function f(){v.manageSections[1].active=!0,v.manageSections[2].active=!0,v.manageSections[3].active=!0}var v=this;v.tempTime={start:"",end:""},v.userIsHost=!1,v.setTempTime=function(e){"start"==e&&(v.tempDateTime.start=new Date),"end"==e&&(v.tempDateTime.end=new Date)},v.unixTimeToDateTime=function(e){return new Date(parseInt(e))},v.dateTimeToUnixTime=function(e){return Date.parse(e)},v.submit=function(){e.info("submitting the form now!")},v.backToUserEvents=function(){$location.path("/userEvents/"+n.uid+"/"+n.token)},v.eventRedirect=function(t,i){var o=t+"/"+n.uid+"/"+n.token;e.info("redirecting to: "+o),$location.path(o)},v.changeSection=function(n){for(e.info("are we here"),i=1;i<=3;i++)i==n?(v.manageSections[i].active=!0,v.manageSections[i].style["background-color"]="yellow",v.manageSections[i].style.color="black"):(v.manageSections[i].active=!1,v.manageSections[i].style["background-color"]="gray",v.manageSections[i].style.color="white")},v.saveEventTime=function(e,n){v.event.eventTimes||(v.event.eventTimes={start:"",end:""},v.event.eventTimes.start=v.dateTimeToUnixTime(v.tempDateTime.start),v.event.eventTimes.end=v.dateTimeToUnixTime(v.tempDateTime.end)),v.tempDateTime.end<v.tempDateTime.start&&"start"==n&&(v.tempDateTime.end=v.tempDateTime.start),"start"==n&&(v.event.eventTimes.start=v.dateTimeToUnixTime(e)),"end"==n&&(v.event.eventTimes.end=v.dateTimeToUnixTime(e))},v.guestsAreInvited=function(){return!!v.event.guestList},v.validateGuestEmail=function(){if(v.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(v.newGuest.email.address)?(v.newGuest.email.valid=!0,v.newGuest.email.style={color:"green"}):(v.newGuest.email.valid=!1,v.newGuest.email.style={color:""})}},v.isSectionComplete=function(){for(i=0;i<8;i++)e.info(v.requiredInputs[i])},v.saveAndAdvance=function(){v.event.$save().then(function(){e.info("event saved")})["catch"](function(n){e.info("error! "+n)}),v.isSectionComplete(),1==v.manageSections[1].complete&&1==v.manageSections[2].complete&&1==v.manageSections[3].complete?v.eventRedirect("/userEvents",n.uid):v.manageSections[1].active?v.changeSection(2):v.manageSections[2].active?v.changeSection(3):v.manageSections[3].active&&v.changeSection(1)},v.addGuestToHostsList=function(){var t=o(v.newGuest.email.address);if(v.newGuest.name&&v.newGuest.email.valid){if(v.event.guestList)for(var i=0;v.event.guestList[i];){if(v.event.guestList[i].email==a(t))return e.info("This guest is already on the list"),void s();i++}else v.event.guestList={};if(registeredUsers[t]){if(registeredUsers[t]==n.uid)return e.info("tried to register the host"),void s();l(registeredUsers[t]),v.event.guestList[registeredUsers[t]]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address}}else u(t),v.event.guestList[t]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address};v.saveEvent(),s()}else e.info("you didn't enter a name and or email")},v.guestWillAttend=function(t){var i=ref.child("Users").child(n.uid).child("events"),o=0,a=!1;if(v.event.guestList[n.uid].attending=t,v.event.guestList[n.uid].status="attending",i.child("pending").on("value",function(a){var r=a.val();e.info(r),e.info(r[n.hostId]),e.info(r[n.hostId][n.eventId]);var s=r[n.hostId][n.eventId];e.info(s);for(invitation in r)o++;e.info("total attending: "+o),t&&i.child("attending").child(n.hostId).child(n.eventId).set(s,function(n){n&&e.info(n)})}),i.child("attending").on("value",function(n){var t=n.val();e.info("this is the attending list"),e.info(t),t.updated&&(a=!0)},function(n){n&&e.info(n)}),2>o){var s=new Date;i.child("pending").update({updated:r(s)},function(n){n&&e.info(n)})}i.child("pending").child(n.hostId).remove(),a&&e.info("removing the updated placeholder"),v.event.$save()},v.updateUpdatedParam=function(){var t=ref.child("Users").child(n.uid).child("events");e.info("updating the param"),t.child("attending").on("value",function(n){e.info(n.val())}),t.child("attending").child("updated").remove()},v.addInvitationToAttending=function(t){var i=ref.child("Users").child(n.uid).child("events"),o=0;i.child("pending").on("value",function(a){var r=a.val(),s=r[n.hostId][n.eventId];e.info(r),e.info(r[n.hostId]),e.info(r[n.hostId][n.eventId]);for(invitation in r)o++;e.info("total pending invitations: "+o),e.info(t),t&&i.child("attending").child(n.hostId).child(n.eventId).set(s,function(n){n&&e.info(n)})})},t()}function GuestEventController(e){e.info("into the GuestEventController")}function HostEventController(e,n,t,i){function o(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function r(e,n){return(a(n)-a(e))/6e4}function s(){var e=new Date;e.setHours(e.getHours()+Math.round(e.getMinutes()/60)),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),c.tempTime.start=e,c.tempTime.end=e,c.tempTime.duration=r(c.tempTime.start,c.tempTime.end)}function l(){angular.isDefined(c.tempEvent.eventTimes.start)&&(c.tempTime.start=o(c.tempEvent.eventTimes.start),c.tempTime.end=o(c.tempEvent.eventTimes.end))}function u(){f.loadAnEventProgressively(n.uid,n.eventId).then(function(e){c.tempEvent=e,l()})["catch"](function(n){e("the error is: "+n)}),c.activeSection=parseInt(n.section),s()}var c=this,d=i,f=t;c.activeSection=1,c.tempTime={start:"",end:"",duration:""},c.progressBar=39,c.tempEvent={},c.formatDuration=function(){c.tempTime.duration=r(c.tempTime.start,c.tempTime.end),e.info(c.tempTime.duration);var n=Math.floor(c.tempTime.duration/60),t=c.tempTime.duration%60,i=Math.round(t/15)/4;return e.info(n+" "+t+" "+i),n+i+" h"},c.settingTempStart=function(){c.tempTime.end=c.tempTime.start},c.settingTempEnd=function(){c.tempTime.start>c.tempTime.end&&(c.tempTime.start=c.tempTime.end),c.tempTime.duration=r(c.tempTime.start,c.tempTime.end)},c.backToUserEvents=function(){d.redirectTo("/userEvents",n.uid)},c.sectionBack=function(){targetSection=c.activeSection-1,d.redirectTo("/event/host",n.eventId,n.uid,targetSection)},c.sectionForward=function(){targetSection=c.activeSection+1,d.redirectTo("/event/host",n.eventId,n.uid,targetSection)},u()}function LandingPageController(e,n,t,o,a){function r(e){return btoa(e)}function s(e){return Date.parse(e)}function l(i,o){var a=i+"/"+d.uid+"/"+d.token;n.info("redirecting to: "+a),t.path(a),e.$apply()}var u=this,c="https://meetupplanner.firebaseio.com/",d={};u.showRequirnments=!1,u.validNewName={valid:!1,style:{color:""}},u.validNewEmail={valid:!1,style:{color:""}},u.securePassword={secure:!1,style:{color:""}},u.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},u.message="testing",u.validUserEmail={valid:!1,style:{color:""}},u.validUserPassword={valid:!1,style:{color:""}},u.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},u.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},u.displayPassReqs=function(){u.newName&&u.newEmail?u.showRequirnments=!0:u.showRequirnments=!1},u.checkNewName=function(){u.newName&&(u.newName.length>0?(u.validNewName.valid=!0,u.validNewName.style={color:"green"}):(u.validNewName.valid=!1,u.validNewName.style={color:"red"})),u.openCreateUserButton()},u.checkNewEmail=function(){if(u.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.newEmail)?(u.validNewEmail.valid=!0,u.validNewEmail.style={color:"green"}):(u.validNewEmail.valid=!1,u.validNewEmail.style={color:"red"})}u.openCreateUserButton()},u.checkUserEmail=function(){if(u.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.userEmail)?(u.validUserEmail.valid=!0,u.validUserEmail.style={color:"green"}):(u.validUserEmail.valid=!1,u.validUserEmail.style={color:"red"})}u.openUserLoginBtn()},u.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(u.newPassword){for(u.newPassword.length>15?(u.passwordRequirnments[0].style={color:"green"},u.passwordRequirnments[0].met=!0):(u.passwordRequirnments[0].style={color:"red"},u.passwordRequirnments[0].met=!1),u.newPassword.length<=100?(u.passwordRequirnments[1].style={color:"green"},u.passwordRequirnments[1].met=!0):(u.passwordRequirnments[1].style={color:"red"},u.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(u.newPassword)?(u.passwordRequirnments[i].style={color:"green"},u.passwordRequirnments[i].met=!0):(u.passwordRequirnments[i].style={color:"red"},u.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(u.newPassword)?(u.passwordRequirnments[6].style={color:"green"},u.passwordRequirnments[6].met=!0):(u.passwordRequirnments[6].style={color:"red"},u.passwordRequirnments[6].met=!1),u.passwordRequirnments[0].met&&u.passwordRequirnments[1].met&&u.passwordRequirnments[2].met&&u.passwordRequirnments[3].met&&u.passwordRequirnments[4].met&&u.passwordRequirnments[5].met&&u.passwordRequirnments[6].met?u.securePassword.secure=!0:u.securePassword.secure=!1,u.securePassword.secure?u.securePassword.style={color:"green"}:u.securePassword.style={color:"red"}}u.openCreateUserButton()},u.checkUserPasswords=function(){u.userPassword&&(u.userPassword.length>15?(u.validUserPassword.style={color:"green"},u.validUserPassword.valid=!0):(u.validUserPassword.style={color:"red"},u.validUserPassword.valid=!1)),u.openUserLoginBtn()},u.openCreateUserButton=function(){u.validNewName.valid&&u.validNewEmail.valid&&u.securePassword.secure?(u.unlockCreateUserBtn["class"]="btn btn-success",u.unlockCreateUserBtn.usable=!0):(u.unlockCreateUserBtn["class"]="btn btn-warning",u.unlockCreateUserBtn.usable=!1)},u.openUserLoginBtn=function(){u.validUserEmail.valid&&u.validUserPassword.valid?(u.unclockUserLoginBtn["class"]="btn btn-success",u.unclockUserLoginBtn.usable=!0):(u.unclockUserLoginBtn["class"]="btn btn-warning",u.unclockUserLoginBtn.usable=!1)},u.update=function(){u.newName=o.find("#newName")[0].value,u.newEmail=o.find("#newEmail")[0].value,u.userEmail=o.find("#userEmail")[0].value,u.checkNewName(),u.checkNewEmail(),u.checkUserEmail()},u.createNewUser=function(){if(n.info("Creating a new user account now!"),u.unlockCreateUserBtn.usable){var e=new Firebase(c);e.createUser({email:u.newEmail,password:u.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),d=i;var o=e.child("Users/"+i.uid),a=new Date;o.set({bio:{name:u.newName,email:u.newEmail},events:{pending:{updated:s(a)},hosting:{updated:s(a)},attending:{updated:s(a)},completed:{updated:s(a)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(r(u.newEmail)).set(d.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",d)}})}},u.loginRegisteredUser=function(){if(u.unclockUserLoginBtn.usable){var t=new Firebase(c);t.authWithPassword({email:u.userEmail,password:u.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),d=i,l("/userInformation",d),e.$apply())})}},u.alertMe=function(){alert("this is working! an alert!")},u.onResizeFunction=function(){var e=angular.element(".inputText");a.outerWidth>a.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in o&&o.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(o.body)},!1),angular.element(a).bind("resize",function(){u.onResizeFunction()}),angular.element(o).ready(function(){a.outerWidth<600&&u.onResizeFunction()}),u.master={},u.update=function(e){u.master=angular.copy(e)},u.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),u.user=angular.copy(u.master)},u.reset()}function MainController(e,n,t,i){function o(){angular.element(t);t.css("hight",i.outerHeight)}var a=this,r="https://meetupplanner.firebaseio.com/",s=new Firebase(r);a.logout=function(){alert("logging you out!"),s.unauth(),n.path("/")},angular.element(t).ready(function(){o()})}function NewUserSignUpController(e,n,t,o,a,r){function s(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var u=t;l.checkNewName=function(){var e=[],n=u.required(l.inputs.newName),t=u.minNameLength(l.inputs.newName);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.name=e.join(", "):l.errors.name="",s()},l.checkNewEmail=function(){var e=[],n=u.required(l.inputs.newEmail),t=u.email(l.inputs.newEmail);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.email=e.join(", "):l.errors.email="",s()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],n=u.required(l.inputs.newPassword),t=[u.minPassLength(l.inputs.newPassword),u.maxPassLength(l.inputs.newPassword),u.atLeastOneLowercase(l.inputs.newPassword),u.atLeastOneUppercase(l.inputs.newPassword),u.atLeastOneNumber(l.inputs.newPassword),u.atLeastOneSymbol(l.inputs.newPassword),u.illegalCharacter(l.inputs.newPassword)];angular.isDefined(n)&&e.push(n),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var o=!1;for(i=0;i<7;i++)t[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},o=!0);l.errors.password=o,s()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=a;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var t=o,i=r;t.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(o){i.loadPrimaries(l.inputs.newEmail,l.inputs.newName,o.uid),t.addNewUserToDatabase(o.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){n.info(i),t.addNewUserToRegUsersList(o.uid,l.inputs.newEmail).then(function(t){e.redirectTo("/userInformation",o.uid),n.info(t)})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})}}}function RegUserLoginController(e,n,t,i,o){function a(){angular.isDefined(r.inputs.email)&&""!==r.inputs.email&&angular.isDefined(r.inputs.password)&&""!==r.inputs.password?(r.inputs.requiredFieldsDefined=!0,r.unclockUserLoginBtn["class"]="btn btn-success",r.unclockUserLoginBtn.message="Login",r.unclockUserLoginBtn.usable=!0):(r.inputs.requiredFieldsDefined=!1,r.unclockUserLoginBtn["class"]="btn btn-warning",r.unclockUserLoginBtn.message="Need Email & Pass",r.unclockUserLoginBtn.usable=!1)}var r=this;r.inputs={email:"",password:"",requiredFieldsDefined:!1},r.errors={message:"",passesAllTests:!0},r.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning",message:"Need Email & Pass"},r.update=function(){r.inputs.email=n.find("#userEmail")[0].value,r.inputs.password=n.find("#userPassword")[0].value,a()},r.loginRegisteredUser=function(){var n=i,a=t,s=o;a.LoginRegisteredUser(r.inputs.email,r.inputs.password).then(function(e){r.errors.passesAllTests=!0,s.setPrimariesLocally(r.inputs.email,r.inputs.name,e.uid)}).then(function(){e.info("uid is "+s.getUIDLocally()),a.getUserBio(s.getUIDLocally()).then(function(n){s.updateBioLocally(n),a.getUserEvents(s.getUIDLocally()).then(function(e){s.updateAllUserEventsLocally(e)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)}),n.redirectTo("/userInformation",s.getUIDLocally())})["catch"](function(e){r.errors.message=e,r.errors.passesAllTests=!1})},r.clicked=function(){var e=t;e.logUserOut()}}function topMenuController(e,n,t,i,o){function a(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),s.loggedIn=!0):(n.info("User is logged out"),s.loggedIn=!1)}function r(e,i){var o=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+o),t.path(o)}var s=this,l="https://meetupplanner.firebaseio.com/",u=new Firebase(l);s.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(o).bind("resize",function(){s.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){o.outerWidth<600&&(s.onResizeFunction(),e.$apply())}),s.logout=function(){n.info("logging out!"),s.loggedIn=!1,u.unauth(),r("/",{uid:"",token:""})},s.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:s.navbarUserEmail,password:s.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),r("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},s.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",o.outerWidth-26+"px")},u.onAuth(a)}function UserEventsController(e,n,t,i){function o(e){return Date.parse(e)}function a(){var e=0;for(event in u.events.hosting)e++;return e}function r(){var e=new Date,n=10*o(e)+a();return n}function s(){Object.keys(u.events).forEach(function(e){Object.keys(u.events[e]).forEach(function(n){var t=0;angular.isObject(u.events[e][n])&&t++,t>0?u.sectionAvailable[e]=!0:u.sectionAvailable[e]=!1})})}function l(){c.setUIDLocally(n.uid),c.loadBio(n.uid).then(function(e){u.userBio=e})["catch"](),u.events=c.getAllUserEventsLocally(),c.getRemoteEventsForLocal().then(function(e){u.events=c.getAllUserEventsLocally()}).then(function(){s()})}var u=this,c=t;u.showDecline=!1,u.userBio={},u.events={},u.sectionAvailable={pending:!1,attending:!1,hosting:!1,completed:!1},u.errors={},u.createNewEvent=function(){var n=r(),t=i;c.createNewEvent(n).then(function(n){e.info(n)}).then(function(){c.cleanDBEventsCategory("hosting")})["catch"](function(n){e.info(n)}),t.redirectTo("/event",n,c.getUIDLocally(),c.getUIDLocally())},l()}function UserInformationController(e,n,t,i,o){function a(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function s(){u.loadBio(t.uid).then(function(e){l.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(l.tempBirthday=a(e.dob))})}var l=this,u=i;l.user={},l.tempBirthday,l.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},l.checkValues=function(){l.view.isData=!0,!angular.isUndefined(l.user.company)&&""!==l.user.company||!angular.isUndefined(l.user.title)&&""!==l.user.title||!angular.isUndefined(l.user.dob)&&""!==l.user.dob?(l.view.dataToSave=!0,l.view.proceedBtn="btn btn-success",l.view.btnMssg="Save & Continue"):(l.view.dataToSave=!1,l.view.proceedBtn="btn btn-primary",l.view.btnMssg="Move On...")},l.updateDOB=function(){l.user.dob=r(l.tempBirthday),l.checkValues()},l.saveAndMoveOn=function(){var n=o,i=u.getUIDLocally();0!==l.tempBirthday&&l.updateDOB(),(""==i||angular.isUndefined(i))&&u.setUIDLocally(t.uid),l.view.isData&&(e.info("saving the new data"),u.updateBioLocally(l.user)),n.redirectTo("/userEvents",l.user.uid)},s()}function authService(e,n){function t(){var e=n;e.checkLoginStatus().then(function(e){return e})["catch"](function(e){return e})}var i={isLoggedIn:t};return i}function backendServices(e,n,t){function i(e){return btoa(e)}function o(e){return atob(e)}function a(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function s(e,t){var i=new Firebase(L);return n(function(n,o){i.createUser({email:e,password:t},function(e,t){e?o("Error creating user: "+e):n(t)})})}function l(e,t,i){var o=new Firebase(L),a=o.child("Users").child(e),s=new Date;return n(function(n,o){a.set({bio:{uid:e,name:t,email:i},events:{pending:{updated:r(s)},hosting:{updated:r(s)},attending:{updated:r(s)},completed:{updated:r(s)}}},function(e){e?o("Data could not be saved: "+e):n("Data saved successfully.")})})}function u(e,t){var o=new Firebase(L),a=i(t),r=o.child("Uids").child(a);return n(function(n,t){r.set(e,function(e){e?t("Data could not be saved. "+e):n("uid created sucessfully.")})})}function c(t,i){var o=new Firebase(L);return n(function(n,a){o.authWithPassword({email:t,password:i},function(t,i){t?a("Error Logging In: "+t):(e.info("Logged In successfully: "+i.uid),n(i))})})}function d(){var n=new Firebase(L);return new Promise(function(t,i){n.onAuth(function(n){n?(e.info("User "+n.uid+" is logged in with "+n.provider),t(!0)):(e.info("User is logged out"),t(!1))})})}function f(){var n=new Firebase(L);e.info("logging user out"),n.unauth()}function v(e){var t=new Firebase(L),i=e.uid,o=t.child("Users").child(i);return n(function(n,t){o.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user data uploaded successfully")})})}function m(e){var t=new Firebase(L),i=e.uid.toString(),o=t.child("Users").child(i).child("bio");return n(function(n,t){o.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user bio data uploaded successfully")})})}function g(){}function p(e){var t=new Firebase(L),i=t.child("Users").child(e).child("bio");return n(function(e,n){i.once("value",function(n){e(n.val())},function(e){e&&n(e)})})}function h(e,t){var i=new Firebase(L),o=t.id,a=i.child("Users").child(e).child("events").child("hosting").child(o);return n(function(e,n){a.set(t,function(t){t?n("There was an error: "+t):e("New event saved to DB successfully")})})}function w(e){var t=new Firebase(L),i=t.child("Users").child(e).child("events");return n(function(e,n){i.orderByKey().once("value",function(n){var t=n.val(),i={hosting:t.hosting,attending:t.attending,pending:t.pending,completed:t.completed};e(i)},function(e){e&&n(e)})})}function b(e,t){var i=new Firebase(L),o=i.child("Users").child(e).child("events").child("hosting").child(t);return n(function(e,n){o.once("value",function(n){var t=n.val();e(t)},function(e){e&&n(e)})})}function U(e,n,t){}function E(e,t){var i=new Firebase(L),o=i.child("Users").child(t).child("events").child(e).child("updated");return n(function(e,n){o.set(null,function(t){t?n("There was an error deleting update field: "+t):e("Deleted update successfully")})})}function y(e,t){var i=new Firebase(L),o=i.child("Users").child(t).child("events").child(e);return n(function(e,n){o.once("value",function(t){var i=t.val();angular.isDefined(i.updated)?e(!0):n(!1)},function(e){e&&n(e)})})}var L="https://meetupplanner.firebaseio.com/",T={utf8_to_b64:i,b64_to_utf8:o,unixTimeToDateTime:a,dateTimeToUnixTime:r,LoginRegisteredUser:c,checkLoginStatus:d,logUserOut:f,downloadUserData:g,getUserBio:p,getUserEvents:w,getAHostedEvent:b,getAnInvitedEvent:U,createNewUser:s,addNewUserToDatabase:l,addNewUserToRegUsersList:u,uploadUserData:v,uploadUserBio:m,createHostedEvent:h,deleteUpdateField:E,thereWasAnUpdateField:y};return T}function trafficValet(e,n){function t(t,i,o,a){angular.isDefined(i)?(t=t+"/"+i,angular.isDefined(o)&&(t=t+"/"+o,angular.isDefined(a)&&(t=t+"/"+a,e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)):(e.info("redirecting now to "+t),n.path(t))}function i(t,i,o,a){if(e.info("Traffic valet accessed"),e.info("eventId: "+t),e.info("hostId: "+i),e.info("userId: "+o),angular.isUndefined(a)&&(a=1),i===o){var r="/event/host/"+t+"/"+o+"/"+a;e.info(r),n.path(r)}else{var r="/event/guest/"+t+"/"+o+"/"+i;e.info(r),n.path(r)}}var o={redirectTo:t,eventRoute:i};return o}function userData(e,n,t){function i(){return""!==M.bio.uid&&""!==M.bio.name&&""!==M.bio.email}function o(n,t){return e.info("checking if the event exits"),!!angular.isDefined(M.events[n][t])}function a(n,t,i){return e.info("current user bio is:"),e.info(M.bio),angular.isDefined(M.bio.email)&&(e.info("email is defined"),""!=M.bio.email)?n==M.bio.email?(e.info("email matches"),!0):(e.info("email does not match"),!1):(e.info("current event is:"),e.info(M.events.hosting[i]),M.events.hosting[i].host.email==n?(e.info("event host email matches"),!0):(e.info("event host email DOESN'T not match"),!1))}function r(e){Object.keys(M.events[e]).forEach(function(n){angular.isObject(M.events[e][n])||delete M.events[e][n]})}function s(){return M.bio.uid}function l(){return M.bio.name}function u(){return M.bio.email}function c(){return M.bio.company}function d(){return M.bio.title}function f(){return M.bio.dob}function v(){return{uid:M.bio.uid,name:M.bio.name,email:M.bio.email,company:M.bio.company,title:M.bio.title,dob:M.bio.dob}}function m(e,n){return M.events[e][n]}function g(e){return M.events[e]}function p(){return M.events}function h(e){M.bio.uid=e}function w(e){M.bio.name=e}function b(e){M.bio.email=e}function U(e){M.bio.company=e}function E(e){M.bio.title=e}function y(e){M.bio.dob=e}function L(e,n,t){angular.isDefined(e)&&b(e),angular.isDefined(n)&&l(n),angular.isDefined(t)&&h(t)}function T(e,n){var t=n.id;r(e),M.events[e][t]=n}function D(e){M.events=e}function I(e){w(e.name),b(e.email),U(e.company),E(e.title),y(e.dob),S()}function A(e,n){delete M.events[e][n.id]}function C(){var e=t;e.downloadUserData().then(function(e){M=e})}function $(e){var i=t;return n(function(n,t){i.getUserBio(e).then(function(e){n(e)})["catch"](function(e){t("There was an error reading the user bio: "+e)})})}function k(){var e=t;return n(function(n,t){e.getUserEvents(s()).then(function(e){Object.keys(e).forEach(function(n){Object.keys(e[n]).forEach(function(t){T(n,e[n][t])})}),n(e)})["catch"](function(e){t("There was an error reading the user events: "+e)})})}function R(i){var o=t;return n(function(n,t){o.getAHostedEvent(s(),i).then(function(t){e.info(t),n(t)})["catch"](function(e){t("There was an error reading the user event: "+e)})})}function B(){var e=t;e.uploadUserData(M)}function S(){var e=t;e.uploadUserBio(M.bio)}function N(){}function P(i){var o=t;return n(function(n,t){o.thereWasAnUpdateField(i,s()).then(function(n){o.deleteUpdateField(i,s()).then(function(n){e.info(n)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)})})}function q(e){return n(function(n,t){i()?n(v()):$(e).then(function(e){n(e)})["catch"](function(e){t(e)})})}function F(e,t){return h(e),n(function(e,n){R(t).then(function(n){e(n)})["catch"](),o("hosting",t)&&e(m("hosting",t))})}function z(e){var t={};return n(function(e,n){k().then(function(n){e(n)}),t=g(type),e(t)})}function G(e){var i=t,o={};return o={id:e,name:"",type:"",host:{name:M.bio.name,uid:M.bio.uid,email:M.bio.email},message:"",eventTimes:{start:0,end:0},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0},guestList:{}},T("hosting",o),n(function(e,n){i.createHostedEvent(s(),o).then(function(n){e(n)})["catch"](function(e){n(e)})})}var M={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{hosting:{},pending:{},attending:{},completed:{}}},j={bioPrimariesAreCompleteLocally:i,eventExistsLocally:o,thisIsTheHostEmail:a,cleanEvents:r,getUIDLocally:s,getNameLocally:l,getEmailLocally:u,getCompanyLocally:c,getTitleLocally:d,getDOBLocally:f,getFullBioLocally:v,getOneUserEventLocally:m,getUserEventsLocally:g,getAllUserEventsLocally:p,setUIDLocally:h,setNameLocally:w,setEmailLocally:b,setCompanyLocally:U,setTitleLocally:E,setDOBLocally:y,setPrimariesLocally:L,updateUserEventsLocally:T,updateAllUserEventsLocally:D,updateBioLocally:I,removeUserEventsLocally:A,getFullRemoteDBforLocal:C,getRemoteBioForLocal:$,getRemoteEventsForLocal:k,getOneRemoteEventForLocal:R,setFullRemoteDBfromLocal:B,setRemoteBioFromLocal:S,setRemoteEventsFromLocal:N,cleanDBEventsCategory:P,loadBio:q,loadEventsProgressively:z,loadAnEventProgressively:F,createNewEvent:G};return j}function validation(e){function n(e){return angular.isUndefined(e)?"This is a required field":void 0}function t(e){return angular.isDefined(e)&&e.length<f?"Name should be at least "+f+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<v)}function o(e){return angular.isDefined(e)&&!(e.length>m)}function a(e){if(angular.isDefined(e)){var n=new RegExp("[!@#$%^&*]");return!!n.test(e)}return!1}function r(e){if(angular.isDefined(e)){var n=new RegExp("[0-9]","");return!!n.test(e)}return!1}function s(e){if(angular.isDefined(e)){var n=new RegExp("[a-z]","");return!!n.test(e)}return!1}function l(e){if(angular.isDefined(e)){var n=new RegExp("[A-Z]","");return!!n.test(e)}return!1}function u(e){if(angular.isDefined(e)){var n=new RegExp("[^A-z0-9!@#$%^&*]","");return!n.test(e)}return!1}function c(e){var n=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");
return angular.isDefined(e)&&!n.test(e)?"Not a valid email":void 0}function d(e){}var f=3,v=16,m=100,g={required:n,minNameLength:t,minPassLength:i,maxPassLength:o,atLeastOneSymbol:a,atLeastOneNumber:r,atLeastOneLowercase:s,atLeastOneUppercase:l,illegalCharacter:u,email:c,dateOfBirth:d};return g}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/host/:eventId/:uid/:section",{templateUrl:"views/hostEvent.htm",controller:"HostEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/guest/:eventId/:uid/:hostId",{templateUrl:"views/guestEvent.htm",controller:"GuestEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:section?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService,eventViewChanger:eventViewChanger}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function eventViewChanger(e,n){e.eventRoute(n.current.params.eventId,n.current.params.hostId,n.current.params.uid,n.current.params.section)}function addAGuest(){function e(e,n,t,i){}function n(e,n,t,i){function o(){r.validations.name.valid&&r.validations.email.valid?(e.info("ready to submit"),r.invitationValidForSubmission=!0,r.submissionButton["class"]["btn-warning"]=!1,r.submissionButton["class"]["btn-success"]=!0,r.submissionButton.message="Invite Guest"):(e.info("not ready to submit"),r.invitationValidForSubmission=!1,r.submissionButton["class"]["btn-warning"]=!0,r.submissionButton["class"]["btn-success"]=!1,r.submissionButton.message="Address Invitation...")}function a(){angular.isUndefined(l.getOneUserEventLocally("hosting",n.eventId))?l.getRemoteEventsForLocal().then(function(){u=l.getOneUserEventLocally("hosting",n.eventId)}):u=l.getOneUserEventLocally("hosting",n.eventId)}var r=this,s=t,l=i,u={};r.tempGuest={name:"",email:""},r.validations={name:{addressed:!1,valid:!1,errorMessage:""},email:{addressed:!1,valid:!1,errorMessage:""},invitation:{isTheHost:!1,alreadyInvited:!1,errorMessage:""}},r.invitationValidForSubmission=!1,r.submissionButton={style:{color:"red"},"class":{"col-xs-12":!0,"col-sm-12":!0,btn:!0,"btn-warning":!0,"btn-success":!1},message:"Address Invitation..."},r.validateName=function(){r.validations.name.addressed=!0,angular.isDefined(r.tempGuest.name)&&""!=r.tempGuest.name?(r.validations.name.valid=!0,r.validations.name.errorMessage=""):(r.validations.name.valid=!1,r.validations.name.errorMessage="This guest needs a name"),o()},r.validateEmail=function(){r.validations.email.addressed=!0,angular.isDefined(r.tempGuest.email)&&""!=r.tempGuest.email?angular.isUndefined(s.email(r.tempGuest.email))?(r.validations.email.valid=!0,r.validations.email.errorMessage=""):(r.validations.email.valid=!1,r.validations.email.errorMessage=s.email(r.tempGuest.email),e.info(r.validations.email.errorMessage)):(r.validations.email.valid=!1,r.validations.email.errorMessage="Not a valid email"),o()},r.showNameError=function(){return!(r.validations.name.valid||!r.validations.name.addressed)},r.showEmailError=function(){return!(r.validations.email.valid||!r.validations.email.addressed)},r.showInvitationError=function(){return!(!r.validations.invitation.isTheHost&&!r.validations.invitation.alreadyInvited)},r.submitGuestInvitation=function(){if(e.info("submitting the invitation"),r.invitationValidForSubmission){if(l.thisIsTheHostEmail(r.tempGuest.email,n.uid,n.eventId))return r.validations.invitation.isTheHost=!0,r.validations.invitation.errorMessage="No need to invite the host",0;r.validations.invitation.isTheHost=!1}},a()}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/addAGuest.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","$routeParams","validation","userData"],t}function hostedEventsList(){function e(e,n,t,i){}function n(e,n){function t(e){return new Date(parseInt(e))}function i(e){var n=0;return o.guestsAreInvited=!0,Object.keys[e].forEach(function(e){n++}),n}var o=this,a=n;o.guestsAreInvited=!1,o.formatDate=function(n){return e.info("got thist time: "+n),t(n)},o.guestsAttending=function(e){return angular.isDefined(e)&&angular.isDefined(e.attending)?i(e.attending):0},o.guestsInvited=function(e){function n(){return t.attending+t.pending+t.declined}if(angular.isDefined(e)){var t={attending:0,pending:0,declined:0};return angular.isDefined(e.attending)&&(t.attending=i(e.attending)),angular.isDefined(e.pending)&&(t.pending=i(e.pending)),angular.isDefined(e.declined)&&(t.declined=i(e.declined)),n()}return 0},o.percentageAttending=function(e){return angular.isDefined(e)?guestsAttending(guestlist)/guestsInvited(e):0},o.eventClicked=function(n){e.info("redirecting to: /event/"+n+"/"+o.hostedEvents[n].host.uid+"/"+o.userId),a.redirectTo("/event",n,o.hostedEvents[n].host.uid,o.userId)}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/hostedEventsList.directive.htm",replace:!0,scope:{hostedEvents:"=",userId:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","trafficValet"],t}function progressBar(){return{restrict:"E",scope:{curVal:"@",maxVal:"@"},template:"<div class='progress-bar'><div class='progress-bar-bar'>testing</div></div>",link:function(e,n,t){function i(){var t=0;e.maxVal&&(t=Math.min(e.curVal,e.maxVal)/e.maxVal*n.find(".progress-bar").width()),n.find(".progress-bar-bar").css("width",t)}e.$watch("curVal",i),e.$watch("maxVal",i)}}}function hostedGuestList(){function e(e,n,t,i){}function n(e){function n(){return angular.isDefined(i.guestList)?(i.isAGuestList=!0,!0):(i.isAGuestList=!1,!1)}function t(){n()&&(i.guestList={})}var i=this;i.isAGuestList=!1,t()}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/hostedGuestList.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log"],t}function toolBar(){function e(e,n,t,i){}function n(e,n){var t=this,i=n;i.checkLoginStatus().then(function(e){t.loggedIn=e})["catch"](),t.clicked=function(){e.info("button clicked")}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","backendServices"],t}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],eventViewChanger.$inject=["trafficValet","$route"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$log","$routeParams"],angular.module("meetUpEventApp").controller("GuestEventController",GuestEventController),GuestEventController.$inject=["$log"],angular.module("meetUpEventApp").controller("HostEventController",HostEventController),HostEventController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","backendServices"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("addAGuest",addAGuest),angular.module("meetUpEventApp").directive("hostedEventsList",hostedEventsList),angular.module("meetUpEventApp").directive("progressBar",progressBar),angular.module("meetUpEventApp").directive("hostedGuestList",hostedGuestList),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
