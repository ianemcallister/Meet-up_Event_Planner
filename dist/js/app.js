function AnEventController(e,n,t,o,r){function a(){p.tempDateTime={start:"",end:""},p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},p.showIfHost=!1,p.hideIfAttending=!0,p.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},g(),m(),p.showIfHost||v()}function s(e){return btoa(e)}function l(e){return atob(e)}function c(e){return Date.parse(e)}function u(){p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function d(e){n.info("adding them to the registered users list "+e),w.child("Users").child(e).child("events").child("pending").child(o.uid).child(o.eventId).set({id:o.eventId,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name,host:o.uid},function(e){e&&n.info("there was an error"+e)}),w.child("Users").child(e).child("events").child("pending").once("value",function(t){var i=t.val();n.info(t.val()),i.updated?(n.info("deleting updated"),w.child("Users").child(e).child("events").child("pending").child("updated").remove(function(e){e&&n.info("Deleting failed: "+e.code)})):n.info("nothing to do")},function(e){e&&n.info("The read failed: "+e.code)})}function f(e){n.info("adding them to the UNREGISTERED users list "+e),w.child("UnregisteredUsers").child(e).child("pending").child(o.uid).child(o.eventId).set({id:o.eventId,host:o.uid,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name},function(e){e&&n.info("there was an error"+e)})}function g(){var e=w.getAuth();e.uid==o.hostId?(n.info("is the host"),p.showIfHost=!0):(n.info("not the host"),p.showIfHost=!1)}function m(){p.showIfHost||(n.info("check guest attendance"),U.child("guestList").on("value",function(e){var n=e.val();p.hideIfAttending=!n[o.uid].attending}))}function v(){p.manageSections[1].active=!0,p.manageSections[2].active=!0,p.manageSections[3].active=!0}var p=this,h="https://meetupplanner.firebaseio.com/",w=new Firebase(h),U=w.child("Users").child(o.hostId).child("events").child("hosting").child(o.eventId);p.event=r(U);var b=r(w.child("Uids"));p.requiredInputs=["","","","","","","","",""],p.setTempTime=function(e){"start"==e&&(p.tempDateTime.start=new Date),"end"==e&&(p.tempDateTime.end=new Date)},p.unixTimeToDateTime=function(e){return new Date(parseInt(e))},p.dateTimeToUnixTime=function(e){return Date.parse(e)},p.submit=function(){n.info("submitting the form now!")},p.backToUserEvents=function(){t.path("/userEvents/"+o.uid+"/"+o.token)},p.eventRedirect=function(e,i){var r=e+"/"+o.uid+"/"+o.token;n.info("redirecting to: "+r),t.path(r)},p.changeSection=function(e){for(n.info("are we here"),i=1;i<=3;i++)i==e?(p.manageSections[i].active=!0,p.manageSections[i].style["background-color"]="yellow",p.manageSections[i].style.color="black"):(p.manageSections[i].active=!1,p.manageSections[i].style["background-color"]="gray",p.manageSections[i].style.color="white")},p.saveEventTime=function(e,n){p.event.eventTimes||(p.event.eventTimes={start:"",end:""},p.event.eventTimes.start=p.dateTimeToUnixTime(p.tempDateTime.start),p.event.eventTimes.end=p.dateTimeToUnixTime(p.tempDateTime.end)),p.tempDateTime.end<p.tempDateTime.start&&"start"==n&&(p.tempDateTime.end=p.tempDateTime.start),"start"==n&&(p.event.eventTimes.start=p.dateTimeToUnixTime(e)),"end"==n&&(p.event.eventTimes.end=p.dateTimeToUnixTime(e))},p.guestsAreInvited=function(){return!!p.event.guestList},p.validateGuestEmail=function(){if(p.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(p.newGuest.email.address)?(p.newGuest.email.valid=!0,p.newGuest.email.style={color:"green"}):(p.newGuest.email.valid=!1,p.newGuest.email.style={color:""})}},p.isSectionComplete=function(){for(i=0;i<8;i++)n.info(p.requiredInputs[i])},p.saveAndAdvance=function(){p.event.$save().then(function(){n.info("event saved")})["catch"](function(e){n.info("error! "+e)}),p.isSectionComplete(),1==p.manageSections[1].complete&&1==p.manageSections[2].complete&&1==p.manageSections[3].complete?p.eventRedirect("/userEvents",o.uid):p.manageSections[1].active?p.changeSection(2):p.manageSections[2].active?p.changeSection(3):p.manageSections[3].active&&p.changeSection(1)},p.addGuestToHostsList=function(){var e=s(p.newGuest.email.address);if(p.newGuest.name&&p.newGuest.email.valid){if(p.event.guestList)for(var t=0;p.event.guestList[t];){if(p.event.guestList[t].email==l(e))return n.info("This guest is already on the list"),void u();t++}else p.event.guestList={};if(b[e]){if(b[e]==o.uid)return n.info("tried to register the host"),void u();d(b[e]),p.event.guestList[b[e]]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address}}else f(e),p.event.guestList[e]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address};p.saveEvent(),u()}else n.info("you didn't enter a name and or email")},p.guestWillAttend=function(e){var t=w.child("Users").child(o.uid).child("events"),i=0,r=!1;if(p.event.guestList[o.uid].attending=e,p.event.guestList[o.uid].status="attending",t.child("pending").on("value",function(r){var a=r.val();n.info(a),n.info(a[o.hostId]),n.info(a[o.hostId][o.eventId]);var s=a[o.hostId][o.eventId];n.info(s);for(invitation in a)i++;n.info("total attending: "+i),e&&t.child("attending").child(o.hostId).child(o.eventId).set(s,function(e){e&&n.info(e)})}),t.child("attending").on("value",function(e){var t=e.val();n.info("this is the attending list"),n.info(t),t.updated&&(r=!0)},function(e){e&&n.info(e)}),2>i){var a=new Date;t.child("pending").update({updated:c(a)},function(e){e&&n.info(e)})}t.child("pending").child(o.hostId).remove(),r&&n.info("removing the updated placeholder"),p.event.$save()},p.updateUpdatedParam=function(){var e=w.child("Users").child(o.uid).child("events");n.info("updating the param"),e.child("attending").on("value",function(e){n.info(e.val())}),e.child("attending").child("updated").remove()},p.addInvitationToAttending=function(e){var t=w.child("Users").child(o.uid).child("events"),i=0;t.child("pending").on("value",function(r){var a=r.val(),s=a[o.hostId][o.eventId];n.info(a),n.info(a[o.hostId]),n.info(a[o.hostId][o.eventId]);for(invitation in a)i++;n.info("total pending invitations: "+i),n.info(e),e&&t.child("attending").child(o.hostId).child(o.eventId).set(s,function(e){e&&n.info(e)})})},a()}function LandingPageController(e,n,t,o,r){function a(e){return btoa(e)}function s(e){return Date.parse(e)}function l(i,o){var r=i+"/"+d.uid+"/"+d.token;n.info("redirecting to: "+r),t.path(r),e.$apply()}var c=this,u="https://meetupplanner.firebaseio.com/",d={};c.showRequirnments=!1,c.validNewName={valid:!1,style:{color:""}},c.validNewEmail={valid:!1,style:{color:""}},c.securePassword={secure:!1,style:{color:""}},c.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},c.message="testing",c.validUserEmail={valid:!1,style:{color:""}},c.validUserPassword={valid:!1,style:{color:""}},c.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},c.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},c.displayPassReqs=function(){c.newName&&c.newEmail?c.showRequirnments=!0:c.showRequirnments=!1},c.checkNewName=function(){c.newName&&(c.newName.length>0?(c.validNewName.valid=!0,c.validNewName.style={color:"green"}):(c.validNewName.valid=!1,c.validNewName.style={color:"red"})),c.openCreateUserButton()},c.checkNewEmail=function(){if(c.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(c.newEmail)?(c.validNewEmail.valid=!0,c.validNewEmail.style={color:"green"}):(c.validNewEmail.valid=!1,c.validNewEmail.style={color:"red"})}c.openCreateUserButton()},c.checkUserEmail=function(){if(c.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(c.userEmail)?(c.validUserEmail.valid=!0,c.validUserEmail.style={color:"green"}):(c.validUserEmail.valid=!1,c.validUserEmail.style={color:"red"})}c.openUserLoginBtn()},c.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(c.newPassword){for(c.newPassword.length>15?(c.passwordRequirnments[0].style={color:"green"},c.passwordRequirnments[0].met=!0):(c.passwordRequirnments[0].style={color:"red"},c.passwordRequirnments[0].met=!1),c.newPassword.length<=100?(c.passwordRequirnments[1].style={color:"green"},c.passwordRequirnments[1].met=!0):(c.passwordRequirnments[1].style={color:"red"},c.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(c.newPassword)?(c.passwordRequirnments[i].style={color:"green"},c.passwordRequirnments[i].met=!0):(c.passwordRequirnments[i].style={color:"red"},c.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(c.newPassword)?(c.passwordRequirnments[6].style={color:"green"},c.passwordRequirnments[6].met=!0):(c.passwordRequirnments[6].style={color:"red"},c.passwordRequirnments[6].met=!1),c.passwordRequirnments[0].met&&c.passwordRequirnments[1].met&&c.passwordRequirnments[2].met&&c.passwordRequirnments[3].met&&c.passwordRequirnments[4].met&&c.passwordRequirnments[5].met&&c.passwordRequirnments[6].met?c.securePassword.secure=!0:c.securePassword.secure=!1,c.securePassword.secure?c.securePassword.style={color:"green"}:c.securePassword.style={color:"red"}}c.openCreateUserButton()},c.checkUserPasswords=function(){c.userPassword&&(c.userPassword.length>15?(c.validUserPassword.style={color:"green"},c.validUserPassword.valid=!0):(c.validUserPassword.style={color:"red"},c.validUserPassword.valid=!1)),c.openUserLoginBtn()},c.openCreateUserButton=function(){c.validNewName.valid&&c.validNewEmail.valid&&c.securePassword.secure?(c.unlockCreateUserBtn["class"]="btn btn-success",c.unlockCreateUserBtn.usable=!0):(c.unlockCreateUserBtn["class"]="btn btn-warning",c.unlockCreateUserBtn.usable=!1)},c.openUserLoginBtn=function(){c.validUserEmail.valid&&c.validUserPassword.valid?(c.unclockUserLoginBtn["class"]="btn btn-success",c.unclockUserLoginBtn.usable=!0):(c.unclockUserLoginBtn["class"]="btn btn-warning",c.unclockUserLoginBtn.usable=!1)},c.update=function(){c.newName=o.find("#newName")[0].value,c.newEmail=o.find("#newEmail")[0].value,c.userEmail=o.find("#userEmail")[0].value,c.checkNewName(),c.checkNewEmail(),c.checkUserEmail()},c.createNewUser=function(){if(n.info("Creating a new user account now!"),c.unlockCreateUserBtn.usable){var e=new Firebase(u);e.createUser({email:c.newEmail,password:c.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),d=i;var o=e.child("Users/"+i.uid),r=new Date;o.set({bio:{name:c.newName,email:c.newEmail},events:{pending:{updated:s(r)},hosting:{updated:s(r)},attending:{updated:s(r)},completed:{updated:s(r)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(a(c.newEmail)).set(d.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",d)}})}},c.loginRegisteredUser=function(){if(c.unclockUserLoginBtn.usable){var t=new Firebase(u);t.authWithPassword({email:c.userEmail,password:c.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),d=i,l("/userInformation",d),e.$apply())})}},c.alertMe=function(){alert("this is working! an alert!")},c.onResizeFunction=function(){var e=angular.element(".inputText");r.outerWidth>r.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in o&&o.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(o.body)},!1),angular.element(r).bind("resize",function(){c.onResizeFunction()}),angular.element(o).ready(function(){r.outerWidth<600&&c.onResizeFunction()}),c.master={},c.update=function(e){c.master=angular.copy(e)},c.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),c.user=angular.copy(c.master)},c.reset()}function MainController(e,n,t,i){function o(){angular.element(t);t.css("hight",i.outerHeight)}var r=this,a="https://meetupplanner.firebaseio.com/",s=new Firebase(a);r.logout=function(){alert("logging you out!"),s.unauth(),n.path("/")},angular.element(t).ready(function(){o()})}function NewUserSignUpController(e,n,t,o,r,a){function s(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var c=t;l.checkNewName=function(){var e=[],n=c.required(l.inputs.newName),t=c.minNameLength(l.inputs.newName);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.name=e.join(", "):l.errors.name="",s()},l.checkNewEmail=function(){var e=[],n=c.required(l.inputs.newEmail),t=c.email(l.inputs.newEmail);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.email=e.join(", "):l.errors.email="",s()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],n=c.required(l.inputs.newPassword),t=[c.minPassLength(l.inputs.newPassword),c.maxPassLength(l.inputs.newPassword),c.atLeastOneLowercase(l.inputs.newPassword),c.atLeastOneUppercase(l.inputs.newPassword),c.atLeastOneNumber(l.inputs.newPassword),c.atLeastOneSymbol(l.inputs.newPassword),c.illegalCharacter(l.inputs.newPassword)];angular.isDefined(n)&&e.push(n),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var o=!1;for(i=0;i<7;i++)t[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},o=!0);l.errors.password=o,s()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=r;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var t=o,i=a;t.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(o){i.loadPrimaries(l.inputs.newEmail,l.inputs.newName,o.uid),t.addNewUserToDatabase(o.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){n.info(i),t.addNewUserToRegUsersList(o.uid,l.inputs.newEmail).then(function(t){e.redirectTo("/userInformation",o.uid),n.info(t)})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})}}}function RegUserLoginController(e,n,t,i,o){function r(){angular.isDefined(a.inputs.email)&&""!==a.inputs.email&&angular.isDefined(a.inputs.password)&&""!==a.inputs.password?(a.inputs.requiredFieldsDefined=!0,a.unclockUserLoginBtn["class"]="btn btn-success",a.unclockUserLoginBtn.message="Login",a.unclockUserLoginBtn.usable=!0):(a.inputs.requiredFieldsDefined=!1,a.unclockUserLoginBtn["class"]="btn btn-warning",a.unclockUserLoginBtn.message="Need Email & Pass",a.unclockUserLoginBtn.usable=!1)}var a=this;a.inputs={email:"",password:"",requiredFieldsDefined:!1},a.errors={message:"",passesAllTests:!0},a.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning",message:"Need Email & Pass"},a.update=function(){a.inputs.email=n.find("#userEmail")[0].value,a.inputs.password=n.find("#userPassword")[0].value,r()},a.loginRegisteredUser=function(){var n=i,r=t,s=o;r.LoginRegisteredUser(a.inputs.email,a.inputs.password).then(function(e){a.errors.passesAllTests=!0,s.setPrimariesLocally(a.inputs.email,a.inputs.name,e.uid)}).then(function(){e.info("uid is "+s.getUIDLocally()),r.getUserBio(s.getUIDLocally()).then(function(n){s.updateBioLocally(n),r.getUserEvents(s.getUIDLocally()).then(function(e){s.updateAllUserEventsLocally(e)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)}),n.redirectTo("/userInformation",s.getUIDLocally())})["catch"](function(e){a.errors.message=e,a.errors.passesAllTests=!1})},a.clicked=function(){var e=t;e.logUserOut()}}function topMenuController(e,n,t,i,o){function r(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),s.loggedIn=!0):(n.info("User is logged out"),s.loggedIn=!1)}function a(e,i){var o=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+o),t.path(o)}var s=this,l="https://meetupplanner.firebaseio.com/",c=new Firebase(l);s.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(o).bind("resize",function(){s.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){o.outerWidth<600&&(s.onResizeFunction(),e.$apply())}),s.logout=function(){n.info("logging out!"),s.loggedIn=!1,c.unauth(),a("/",{uid:"",token:""})},s.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:s.navbarUserEmail,password:s.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),a("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},s.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",o.outerWidth-26+"px")},c.onAuth(r)}function UserEventsController(e,n,t,i){function o(e){return Date.parse(e)}function r(){var e=0;for(event in c.events.hosting)e++;return e}function a(){var e=new Date,n=10*o(e)+r();return n}function s(){Object.keys(c.events).forEach(function(e){Object.keys(c.events[e]).forEach(function(n){var t=0;angular.isObject(c.events[e][n])&&t++,t>0?c.sectionAvailable[e]=!0:c.sectionAvailable[e]=!1})})}function l(){u.setUIDLocally(n.uid),u.loadBio(n.uid).then(function(e){c.userBio=e})["catch"](),c.events=u.getAllUserEventsLocally(),u.getRemoteEventsForLocal().then(function(e){c.events=u.getAllUserEventsLocally()}).then(function(){s()})}var c=this,u=t;c.showDecline=!1,c.userBio={},c.events={},c.sectionAvailable={pending:!1,attending:!1,hosting:!1,completed:!1},c.errors={},c.createNewEvent=function(){var n=a(),t=i;u.createNewEvent(n).then(function(n){e.info(n)}).then(function(){u.cleanDBEventsCategory("hosting")})["catch"](function(n){e.info(n)}),t.redirectTo("/event",n,u.getUIDLocally(),u.getUIDLocally())},l()}function UserInformationController(e,n,t,i,o){function r(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function s(){c.loadBio(t.uid).then(function(e){l.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(l.tempBirthday=r(e.dob))})}var l=this,c=i;l.user={},l.tempBirthday,l.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},l.checkValues=function(){l.view.isData=!0,!angular.isUndefined(l.user.company)&&""!==l.user.company||!angular.isUndefined(l.user.title)&&""!==l.user.title||!angular.isUndefined(l.user.dob)&&""!==l.user.dob?(l.view.dataToSave=!0,l.view.proceedBtn="btn btn-success",l.view.btnMssg="Save & Continue"):(l.view.dataToSave=!1,l.view.proceedBtn="btn btn-primary",l.view.btnMssg="Move On...")},l.updateDOB=function(){l.user.dob=a(l.tempBirthday),l.checkValues()},l.saveAndMoveOn=function(){var n=o,i=c.getUIDLocally();0!==l.tempBirthday&&l.updateDOB(),(""==i||angular.isUndefined(i))&&c.setUIDLocally(t.uid),l.view.isData&&(e.info("saving the new data"),c.updateBioLocally(l.user)),n.redirectTo("/userEvents",l.user.uid)},s()}function authService(e,n,t){function i(n){n?e.info("User "+n.uid+" is logged in with "+n.provider):(e.info("User is logged out...dumping them back to landing page"),t.path("/"))}function o(){return a.onAuth(i),!0}var r="https://meetupplanner.firebaseio.com/",a=new Firebase(r),s={isLoggedIn:o};return s}function backendServices(e,n,t){function i(e){return btoa(e)}function o(e){return atob(e)}function r(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function s(e,t){var i=new Firebase(y);return n(function(n,o){i.createUser({email:e,password:t},function(e,t){e?o("Error creating user: "+e):n(t)})})}function l(e,t,i){var o=new Firebase(y),r=o.child("Users").child(e),s=new Date;return n(function(n,o){r.set({bio:{uid:e,name:t,email:i},events:{pending:{updated:a(s)},hosting:{updated:a(s)},attending:{updated:a(s)},completed:{updated:a(s)}}},function(e){e?o("Data could not be saved: "+e):n("Data saved successfully.")})})}function c(e,t){var o=new Firebase(y),r=i(t),a=o.child("Uids").child(r);return n(function(n,t){a.set(e,function(e){e?t("Data could not be saved. "+e):n("uid created sucessfully.")})})}function u(t,i){var o=new Firebase(y);return n(function(n,r){o.authWithPassword({email:t,password:i},function(t,i){t?r("Error Logging In: "+t):(e.info("Logged In successfully: "+i.uid),n(i))})})}function d(){var n=new Firebase(y);return new Promise(function(t,i){n.onAuth(function(n){n?(e.info("User "+n.uid+" is logged in with "+n.provider),t(!0)):(e.info("User is logged out"),t(!1))})})}function f(){var n=new Firebase(y);e.info("logging user out"),n.unauth()}function g(e){var t=new Firebase(y),i=e.uid,o=t.child("Users").child(i);return n(function(n,t){o.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user data uploaded successfully")})})}function m(e){var t=new Firebase(y),i=e.uid.toString(),o=t.child("Users").child(i).child("bio");return n(function(n,t){o.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user bio data uploaded successfully")})})}function v(){}function p(e){var t=new Firebase(y),i=t.child("Users").child(e).child("bio");return n(function(e,n){i.once("value",function(n){e(n.val())},function(e){e&&n(e)})})}function h(e,t){var i=new Firebase(y),o=t.id,r=i.child("Users").child(e).child("events").child("hosting").child(o);return n(function(e,n){r.set(t,function(t){t?n("There was an error: "+t):e("New event saved to DB successfully")})})}function w(e){var t=new Firebase(y),i=t.child("Users").child(e).child("events");return n(function(e,n){i.once("value",function(n){var t=n.val(),i={hosting:t.hosting,attending:t.attending,pending:t.pending,completed:t.completed};e(i)},function(e){e&&n(e)})})}function U(e,t){var i=new Firebase(y),o=i.child("Users").child(t).child("events").child(e).child("updated");return n(function(e,n){o.set(null,function(t){t?n("There was an error deleting update field: "+t):e("Deleted update successfully")})})}function b(e,t){var i=new Firebase(y),o=i.child("Users").child(t).child("events").child(e);return n(function(e,n){o.once("value",function(t){var i=t.val();angular.isDefined(i.updated)?e(!0):n(!1)},function(e){e&&n(e)})})}var y="https://meetupplanner.firebaseio.com/",E={utf8_to_b64:i,b64_to_utf8:o,unixTimeToDateTime:r,dateTimeToUnixTime:a,LoginRegisteredUser:u,checkLoginStatus:d,logUserOut:f,downloadUserData:v,getUserBio:p,getUserEvents:w,createNewUser:s,addNewUserToDatabase:l,addNewUserToRegUsersList:c,uploadUserData:g,uploadUserBio:m,createHostedEvent:h,deleteUpdateField:U,thereWasAnUpdateField:b};return E}function trafficValet(e,n){function t(t,i,o,r){angular.isDefined(i)?(t=t+"/"+i,angular.isDefined(o)&&(t=t+"/"+o,angular.isDefined(r)&&(t=t+"/"+r,e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)):(e.info("redirecting now to "+t),n.path(t))}var i={redirectTo:t};return i}function userData(e,n,t){function i(){return""!==q.bio.uid&&""!==q.bio.name&&""!==q.bio.email}function o(e){Object.keys(q.events[e]).forEach(function(n){angular.isObject(q.events[e][n])||delete q.events[e][n]})}function r(){return q.bio.uid}function a(){return q.bio.name}function s(){return q.bio.email}function l(){return q.bio.company}function c(){return q.bio.title}function u(){return q.bio.dob}function d(){return{uid:q.bio.uid,name:q.bio.name,email:q.bio.email,company:q.bio.company,title:q.bio.title,dob:q.bio.dob}}function f(e){return q.events[e]}function g(){return q.events}function m(e){q.bio.uid=e}function v(e){q.bio.name=e}function p(e){q.bio.email=e}function h(e){q.bio.company=e}function w(e){q.bio.title=e}function U(e){q.bio.dob=e}function b(e,n,t){angular.isDefined(e)&&p(e),angular.isDefined(n)&&a(n),angular.isDefined(t)&&m(t)}function y(e,n){var t=n.id;o(e),q.events[e][t]=n}function E(e){q.events=e}function L(e){v(e.name),p(e.email),h(e.company),w(e.title),U(e.dob),C()}function D(e,n){delete q.events[e][n.id]}function T(){var e=t;e.downloadUserData().then(function(e){q=e})}function I(e){var i=t;return n(function(n,t){i.getUserBio(e).then(function(e){n(e)})["catch"](function(e){t("There was an error reading the user bio: "+e)})})}function $(){var e=t;return n(function(n,t){e.getUserEvents(r()).then(function(e){Object.keys(e).forEach(function(n){Object.keys(e[n]).forEach(function(t){y(n,e[n][t])})}),n(e)})["catch"](function(e){t("There was an error reading the user events: "+e)})})}function A(){var e=t;e.uploadUserData(q)}function C(){var e=t;e.uploadUserBio(q.bio)}function k(){}function R(i){var o=t;return n(function(n,t){o.thereWasAnUpdateField(i,r()).then(function(n){o.deleteUpdateField(i,r()).then(function(n){e.info(n)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)})})}function N(e){return n(function(n,t){i()?n(d()):I(e).then(function(e){n(e)})["catch"](function(e){t(e)})})}function P(e){var t={};return n(function(e,n){$().then(function(n){e(n)}),t=f(type),e(t)})}function B(e){var i=t,o={};return o={id:e,name:"",type:"",host:{name:"",uid:""},message:"",eventTimes:{start:0,end:0},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0},guestList:{}},y("hosting",o),n(function(e,n){i.createHostedEvent(r(),o).then(function(n){e(n)})["catch"](function(e){n(e)})})}var q={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{hosting:{},pending:{},attending:{},completed:{}}},S={bioPrimariesAreCompleteLocally:i,cleanEvents:o,getUIDLocally:r,getNameLocally:a,getEmailLocally:s,getCompanyLocally:l,getTitleLocally:c,getDOBLocally:u,getFullBioLocally:d,getUserEventsLocally:f,getAllUserEventsLocally:g,setUIDLocally:m,setNameLocally:v,setEmailLocally:p,setCompanyLocally:h,setTitleLocally:w,setDOBLocally:U,setPrimariesLocally:b,updateUserEventsLocally:y,updateAllUserEventsLocally:E,updateBioLocally:L,removeUserEventsLocally:D,getFullRemoteDBforLocal:T,getRemoteBioForLocal:I,getRemoteEventsForLocal:$,setFullRemoteDBfromLocal:A,setRemoteBioFromLocal:C,setRemoteEventsFromLocal:k,cleanDBEventsCategory:R,loadBio:N,loadEventsProgressively:P,createNewEvent:B};return S}function validation(e){function n(e){return angular.isUndefined(e)?"This is a required field":void 0}function t(e){return angular.isDefined(e)&&e.length<f?"Name should be at least "+f+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<g)}function o(e){return angular.isDefined(e)&&!(e.length>m)}function r(e){if(angular.isDefined(e)){var n=new RegExp("[!@#$%^&*]");return!!n.test(e)}return!1}function a(e){if(angular.isDefined(e)){var n=new RegExp("[0-9]","");return!!n.test(e)}return!1}function s(e){if(angular.isDefined(e)){var n=new RegExp("[a-z]","");return!!n.test(e)}return!1}function l(e){if(angular.isDefined(e)){var n=new RegExp("[A-Z]","");return!!n.test(e)}return!1}function c(e){if(angular.isDefined(e)){var n=new RegExp("[^A-z0-9!@#$%^&*]","");return!n.test(e)}return!1}function u(e){var n=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return n.test(e)?void 0:"Not a valid e-mail address"}function d(e){}var f=3,g=16,m=100,v={required:n,minNameLength:t,minPassLength:i,maxPassLength:o,atLeastOneSymbol:r,atLeastOneNumber:a,atLeastOneLowercase:s,atLeastOneUppercase:l,illegalCharacter:c,email:u,dateOfBirth:d};return v}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function hostedEventsList(){function e(e,n,t,i){}function n(e,n){function t(e){return new Date(parseInt(e))}function i(e){var n=0;return o.guestsAreInvited=!0,Object.keys[e].forEach(function(e){n++}),n}var o=this,r=n;o.guestsAreInvited=!1,o.formatDate=function(n){return e.info("got thist time: "+n),t(n)},o.guestsAttending=function(e){return angular.isDefined(e)&&angular.isDefined(e.attending)?i(e.attending):0},o.guestsInvited=function(e){function n(){return t.attending+t.pending+t.declined}if(angular.isDefined(e)){var t={attending:0,pending:0,declined:0};return angular.isDefined(e.attending)&&(t.attending=i(e.attending)),angular.isDefined(e.pending)&&(t.pending=i(e.pending)),angular.isDefined(e.declined)&&(t.declined=i(e.declined)),n()}return 0},o.percentageAttending=function(e){return angular.isDefined(e)?guestsAttending(guestlist)/guestsInvited(e):0},o.eventClicked=function(n){e.info("redirecting to: /event/"+n+"/"+o.hostedEvents[n].host.uid+"/"+o.userId),r.redirectTo("/event",n,o.hostedEvents[n].host.uid,o.userId)}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/hostedEventsList.directive.htm",replace:!0,scope:{hostedEvents:"=",userId:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","trafficValet"],t}function toolBar(){function e(e,n,t,i){}function n(e,n){var t=this,i=n;i.checkLoginStatus().then(function(e){t.loggedIn=e})["catch"](),t.clicked=function(){e.info("button clicked")}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",
bindToController:!0};return n.$inject=["$log","backendServices"],t}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","$q","$location"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("hostedEventsList",hostedEventsList),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
