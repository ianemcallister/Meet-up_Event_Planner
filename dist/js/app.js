function AnEventController(e,t){function n(){v.tempDateTime={start:"",end:""},v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},v.showIfHost=!1,v.hideIfAttending=!0,v.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},u(),d(),v.showIfHost||f()}function s(e){return btoa(e)}function o(e){return atob(e)}function r(e){return Date.parse(e)}function a(){v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function l(n){e.info("adding them to the registered users list "+n),ref.child("Users").child(n).child("events").child("pending").child(t.uid).child(t.eventId).set({id:t.eventId,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name,host:t.uid},function(t){t&&e.info("there was an error"+t)}),ref.child("Users").child(n).child("events").child("pending").once("value",function(t){var i=t.val();e.info(t.val()),i.updated?(e.info("deleting updated"),ref.child("Users").child(n).child("events").child("pending").child("updated").remove(function(t){t&&e.info("Deleting failed: "+t.code)})):e.info("nothing to do")},function(t){t&&e.info("The read failed: "+t.code)})}function c(n){e.info("adding them to the UNREGISTERED users list "+n),ref.child("UnregisteredUsers").child(n).child("pending").child(t.uid).child(t.eventId).set({id:t.eventId,host:t.uid,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name},function(t){t&&e.info("there was an error"+t)})}function u(){var n=ref.getAuth();n.uid==t.hostId?(e.info("is the host"),v.showIfHost=!0):(e.info("not the host"),v.showIfHost=!1)}function d(){v.showIfHost||(e.info("check guest attendance"),userEvents.child("guestList").on("value",function(e){var n=e.val();v.hideIfAttending=!n[t.uid].attending}))}function f(){v.manageSections[1].active=!0,v.manageSections[2].active=!0,v.manageSections[3].active=!0}var v=this;v.tempTime={start:"",end:""},v.userIsHost=!1,v.setTempTime=function(e){"start"==e&&(v.tempDateTime.start=new Date),"end"==e&&(v.tempDateTime.end=new Date)},v.unixTimeToDateTime=function(e){return new Date(parseInt(e))},v.dateTimeToUnixTime=function(e){return Date.parse(e)},v.submit=function(){e.info("submitting the form now!")},v.backToUserEvents=function(){$location.path("/userEvents/"+t.uid+"/"+t.token)},v.eventRedirect=function(n,i){var s=n+"/"+t.uid+"/"+t.token;e.info("redirecting to: "+s),$location.path(s)},v.changeSection=function(t){for(e.info("are we here"),i=1;i<=3;i++)i==t?(v.manageSections[i].active=!0,v.manageSections[i].style["background-color"]="yellow",v.manageSections[i].style.color="black"):(v.manageSections[i].active=!1,v.manageSections[i].style["background-color"]="gray",v.manageSections[i].style.color="white")},v.saveEventTime=function(e,t){v.event.eventTimes||(v.event.eventTimes={start:"",end:""},v.event.eventTimes.start=v.dateTimeToUnixTime(v.tempDateTime.start),v.event.eventTimes.end=v.dateTimeToUnixTime(v.tempDateTime.end)),v.tempDateTime.end<v.tempDateTime.start&&"start"==t&&(v.tempDateTime.end=v.tempDateTime.start),"start"==t&&(v.event.eventTimes.start=v.dateTimeToUnixTime(e)),"end"==t&&(v.event.eventTimes.end=v.dateTimeToUnixTime(e))},v.guestsAreInvited=function(){return!!v.event.guestList},v.validateGuestEmail=function(){if(v.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(v.newGuest.email.address)?(v.newGuest.email.valid=!0,v.newGuest.email.style={color:"green"}):(v.newGuest.email.valid=!1,v.newGuest.email.style={color:""})}},v.isSectionComplete=function(){for(i=0;i<8;i++)e.info(v.requiredInputs[i])},v.saveAndAdvance=function(){v.event.$save().then(function(){e.info("event saved")})["catch"](function(t){e.info("error! "+t)}),v.isSectionComplete(),1==v.manageSections[1].complete&&1==v.manageSections[2].complete&&1==v.manageSections[3].complete?v.eventRedirect("/userEvents",t.uid):v.manageSections[1].active?v.changeSection(2):v.manageSections[2].active?v.changeSection(3):v.manageSections[3].active&&v.changeSection(1)},v.addGuestToHostsList=function(){var n=s(v.newGuest.email.address);if(v.newGuest.name&&v.newGuest.email.valid){if(v.event.guestList)for(var i=0;v.event.guestList[i];){if(v.event.guestList[i].email==o(n))return e.info("This guest is already on the list"),void a();i++}else v.event.guestList={};if(registeredUsers[n]){if(registeredUsers[n]==t.uid)return e.info("tried to register the host"),void a();l(registeredUsers[n]),v.event.guestList[registeredUsers[n]]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address}}else c(n),v.event.guestList[n]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address};v.saveEvent(),a()}else e.info("you didn't enter a name and or email")},v.guestWillAttend=function(n){var i=ref.child("Users").child(t.uid).child("events"),s=0,o=!1;if(v.event.guestList[t.uid].attending=n,v.event.guestList[t.uid].status="attending",i.child("pending").on("value",function(o){var r=o.val();e.info(r),e.info(r[t.hostId]),e.info(r[t.hostId][t.eventId]);var a=r[t.hostId][t.eventId];e.info(a);for(invitation in r)s++;e.info("total attending: "+s),n&&i.child("attending").child(t.hostId).child(t.eventId).set(a,function(t){t&&e.info(t)})}),i.child("attending").on("value",function(t){var n=t.val();e.info("this is the attending list"),e.info(n),n.updated&&(o=!0)},function(t){t&&e.info(t)}),2>s){var a=new Date;i.child("pending").update({updated:r(a)},function(t){t&&e.info(t)})}i.child("pending").child(t.hostId).remove(),o&&e.info("removing the updated placeholder"),v.event.$save()},v.updateUpdatedParam=function(){var n=ref.child("Users").child(t.uid).child("events");e.info("updating the param"),n.child("attending").on("value",function(t){e.info(t.val())}),n.child("attending").child("updated").remove()},v.addInvitationToAttending=function(n){var i=ref.child("Users").child(t.uid).child("events"),s=0;i.child("pending").on("value",function(o){var r=o.val(),a=r[t.hostId][t.eventId];e.info(r),e.info(r[t.hostId]),e.info(r[t.hostId][t.eventId]);for(invitation in r)s++;e.info("total pending invitations: "+s),e.info(n),n&&i.child("attending").child(t.hostId).child(t.eventId).set(a,function(t){t&&e.info(t)})})},n()}function GuestEventController(e){e.info("into the GuestEventController")}function HostEventController(e,t,n,i,s,o,r){function a(e){return new Date(parseInt(e))}function l(e){return Date.parse(e)}function c(e,t){return(l(t)-l(e))/6e4}function u(e){"open"==e?(h.actionBtn.btn["class"]["btn-success"]=!0,h.actionBtn.btn["class"]["btn-warning"]=!1,h.actionBtn.btn.message="Save Event"):"close"==e&&(h.actionBtn.btn["class"]["btn-success"]=!1,h.actionBtn.btn["class"]["btn-warning"]=!0,h.actionBtn.btn.message="Add Info")}function d(e){w+=e,h.progressBar.complete=w,h.progressBar.style.width=w+"%",h.progressBar.message=w+"%",w>99&&u("open"),99>w&&u("close")}function f(){var e=new Date;e.setHours(e.getHours()+Math.round(e.getMinutes()/60)),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),h.tempTime.start=e,h.tempTime.end=e,h.tempTime.duration=c(h.tempTime.start,h.tempTime.end)}function v(){angular.isDefined(h.tempEvent.eventTimes.start)&&(h.tempTime.start=a(h.tempEvent.eventTimes.start),h.tempTime.end=a(h.tempEvent.eventTimes.end))}function m(){Object.keys(h.tempEvent).forEach(function(e){t.info(h.tempEvent[e])})}function g(){if(b.thereIsAnActiveEvent()){var e=b.getActiveEvent();h.progressBar=e.progressBar,w=e.percentComplete,h.tempEvent=e.event,h.requiredFieldComplete=e.requiredFields}else b.loadAnEventProgressively(n.uid,n.eventId).then(function(e){h.tempEvent=e,v()})["catch"](function(e){t("the error is: "+e)});h.activeSection=parseInt(n.section),f(),m()}var h=this,p=o,b=s,E=r,w=0;h.activeSection=1,h.tempTime={start:"",end:"",duration:""},h.progressBar={complete:h.percentComplete,style:{width:h.percentComplete+"%"},message:h.percentComplete+"%"},h.actionBtn={div:{"class":{"col-xs-6":!0,"col-sm-6":!0}},btn:{"class":{btn:!0,"btn-success":!1,"btn-warning":!0,"pull-right":!0},message:"Add Info"}},h.tempEvent={},h.requiredFieldComplete=E.generateEventRequirnments(),h.formatDuration=function(){h.tempTime.duration=c(h.tempTime.start,h.tempTime.end);var e=Math.floor(h.tempTime.duration/60),t=h.tempTime.duration%60,n=Math.round(t/15)/4;return e+n+" h"},h.validateTime=function(e){h.tempTime.duration>24&&h.settingTempStart();var t={eventStart:h.tempTime.start,eventEnd:h.tempTime.end};angular.isDefined(t[e])&&""!=t[e]&&h.tempTime.duration>0?(0==h.requiredFieldComplete[e].completed&&d(10),h.tempEvent.eventTimes.start=l(h.tempTime.start),h.tempEvent.eventTimes.end=l(h.tempTime.end),h.requiredFieldComplete[e].completed=!0,h.requiredFieldComplete[e].row["class"]["has-success"]=!0,h.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,h.requiredFieldComplete[e].row["class"]["has-error"]=!1):(1==h.requiredFieldComplete[e].completed&&d(-10),h.requiredFieldComplete[e].completed=!1,h.requiredFieldComplete[e].row["class"]["has-success"]=!1,h.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,h.requiredFieldComplete[e].row["class"]["has-error"]=!0)},h.settingTempStart=function(){(l(h.tempTime.end)<=l(h.tempTime.start)||l(h.tempTime.end)-l(h.tempTime.start)>864e5)&&(oldStart=l(h.tempTime.start),oldEnd=l(h.tempTime.end),newEnd=oldStart+36e5,h.tempTime.end=a(newEnd))},h.settingTempEnd=function(){h.tempTime.start>h.tempTime.end&&(h.tempTime.start=h.tempTime.end),h.validateTime("eventEnd"),h.tempTime.duration=c(h.tempTime.start,h.tempTime.end)},h.backToUserEvents=function(){w>99&&(b.saveNewHostingEvent("hosting",h.tempEvent),b.setRemoteEventsFromLocal("hosting",h.tempEvent).then(function(e){t.info(e)})["catch"](function(e){t.info(e)})),p.redirectTo("/userEvents",n.uid)},h.sectionBack=function(){var e={event:h.tempEvent,progressBar:h.progressBar,percentComplete:w,requiredFields:h.requiredFieldComplete};t.info(e),b.setActiveEvent(e),targetSection=h.activeSection-1,p.redirectTo("/event/host",n.eventId,n.uid,targetSection)},h.sectionForward=function(){var e={event:h.tempEvent,progressBar:h.progressBar,percentComplete:w,requiredFields:h.requiredFieldComplete};t.info(e),b.setActiveEvent(e),targetSection=h.activeSection+1,p.redirectTo("/event/host",n.eventId,n.uid,targetSection)},h.verifyRequired=function(e,t){angular.isDefined(t)&&""!=t?(0==h.requiredFieldComplete[e].completed&&d(10),h.requiredFieldComplete[e].completed=!0,h.requiredFieldComplete[e].row["class"]["has-success"]=!0,h.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,h.requiredFieldComplete[e].row["class"]["has-error"]=!1):(1==h.requiredFieldComplete[e].completed&&d(-10),h.requiredFieldComplete[e].completed=!1,h.requiredFieldComplete[e].row["class"]["has-success"]=!1,h.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,h.requiredFieldComplete[e].row["class"]["has-error"]=!0)},h.saveEventToDB=function(){t.info(h.tempEvent),w>99&&(b.saveNewHostingEvent("hosting",h.tempEvent),b.setRemoteEventsFromLocal(n.uid,h.tempEvent).then(function(e){t.info(e),b.cleanDBEventsCategory("hosting").then(function(e){t.info(e)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)}),p.redirectTo("/userEvents",n.uid))},e.$watch("vm.tempEvent.guestList",function(e,t){angular.isObject(h.tempEvent.guestList)&&d(10)}),angular.element(i).ready(function(){1==parseInt(n.section)&&angular.element(i.querySelector("#eventName")).focus(),2==parseInt(n.section)&&angular.element(i.querySelector("#eventStreet01")).focus(),3==parseInt(n.section)&&angular.element(i.querySelector("#inviteeName")).focus()}),g()}function LandingPageController(e){var t=this,n=e;t.createAnAccount=function(){n.redirectTo("/signup")},t.loginUser=function(){n.redirectTo("/login")}}function MainController(e,t,n,i){function s(){angular.element(n);n.css("hight",i.outerHeight)}var o=this,r="https://meetupplanner.firebaseio.com/",a=new Firebase(r);o.logout=function(){alert("logging you out!"),a.unauth(),t.path("/")},angular.element(n).ready(function(){s()})}function NewUserSignUpController(e,t,n,i,s,o){var r=this,a=n;r.name=a.generateTestableObject("name"),r.email=a.generateTestableObject("email"),r.pass=a.generateTestableObject("pass"),r.createNewUser=function(){var e=s;if(r.name.passesAllReqs&&r.email.passesAllReqs&&r.pass.passesAllReqs){var n=i,a=o;n.createNewUser(r.email.value,r.pass.value).then(function(i){a.setPrimariesLocally(r.email.value,r.name.value,i.uid),n.addNewUserToDatabase(i.uid,r.name.value,r.email.value).then(function(s){t.info(s),n.addNewUserToRegUsersList(i.uid,r.email.value).then(function(n){e.redirectTo("/userInformation",i.uid),t.info(n)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)})}}}function RegUserLoginController(e,t,n,i,s){function o(){angular.isDefined(r.inputs.email)&&""!==r.inputs.email&&angular.isDefined(r.inputs.password)&&""!==r.inputs.password?(r.inputs.requiredFieldsDefined=!0,r.unclockUserLoginBtn["class"]["btn-success"]=!0,r.unclockUserLoginBtn["class"]["btn-warning"]=!1,r.unclockUserLoginBtn.message="Login",r.unclockUserLoginBtn.usable=!0):(r.inputs.requiredFieldsDefined=!1,r.unclockUserLoginBtn["class"]["btn-success"]=!1,r.unclockUserLoginBtn["class"]["btn-warning"]=!0,r.unclockUserLoginBtn.message="Need Email & Pass",r.unclockUserLoginBtn.usable=!1)}var r=this;r.inputs={email:"",password:"",requiredFieldsDefined:!1},r.errors={message:"",passesAllTests:!0},r.unclockUserLoginBtn={usable:!1,"class":{btn:!0,"btn-warning":!0,"btn-success":!1,"col-xs-12":!0,"col-sm-12":!0},message:"Need Email & Pass"},r.update=function(){r.inputs.email=t.find("#userEmail")[0].value,r.inputs.password=t.find("#userPassword")[0].value,o()},r.loginRegisteredUser=function(){var t=i,o=n,a=s;o.LoginRegisteredUser(r.inputs.email,r.inputs.password).then(function(e){r.errors.passesAllTests=!0,a.setPrimariesLocally(r.inputs.email,r.inputs.name,e.uid)}).then(function(){e.info("uid is "+a.getUIDLocally()),o.getUserBio(a.getUIDLocally()).then(function(t){a.updateBioLocally(t),o.getUserEvents(a.getUIDLocally()).then(function(e){a.updateAllUserEventsLocally(e)})["catch"](function(t){e.info(t)})})["catch"](function(t){e.info(t)}),t.redirectTo("/userInformation",a.getUIDLocally())})["catch"](function(e){r.errors.message=e,r.errors.passesAllTests=!1})},r.clicked=function(){var e=n;e.logUserOut()}}function topMenuController(e,t,n,i,s){function o(e){e?(t.info("User "+e.uid+" is logged in with "+e.provider),a.loggedIn=!0):(t.info("User is logged out"),a.loggedIn=!1)}function r(e,i){var s=e+"/"+i.uid+"/"+i.token;t.info("redirecting to: "+s),n.path(s)}var a=this,l="https://meetupplanner.firebaseio.com/",c=new Firebase(l);a.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){t.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(s).bind("resize",function(){a.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){s.outerWidth<600&&(a.onResizeFunction(),e.$apply())}),a.logout=function(){t.info("logging out!"),a.loggedIn=!1,c.unauth(),r("/",{uid:"",token:""})},a.navBarLoginRegisteredUser=function(){t.info("launching login");var n=new Firebase(l);n.authWithPassword({email:a.navbarUserEmail,password:a.navbarUserPass},function(n,i){n?t.info("Error Logging In: "+n):(t.info("Logged In successfully: "+i.uid),t.info(i),r("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},a.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",s.outerWidth-26+"px")},c.onAuth(o)}function UserEventsController(e,t,n,i){function s(e){return Date.parse(e)}function o(){var e=0;for(event in c.events.hosting)e++;return e}function r(){var e=new Date,t=10*s(e)+o();return t}function a(){Object.keys(c.events).forEach(function(e){Object.keys(c.events[e]).forEach(function(t){var n=0;angular.isObject(c.events[e][t])&&n++,n>0?c.sectionAvailable[e]=!0:c.sectionAvailable[e]=!1})})}function l(){u.setUIDLocally(t.uid),u.loadBio(t.uid).then(function(e){c.userBio=e})["catch"](),c.events=u.getAllUserEventsLocally(),u.getRemoteEventsForLocal().then(function(t){e.info(t),c.events=u.getAllUserEventsLocally()}).then(function(){a()})}var c=this,u=n;c.showDecline=!1,c.userBio={},c.events={},c.sectionAvailable={pending:!1,attending:!1,hosting:!1,completed:!1},c.errors={},c.createNewEvent=function(){var e=r(),t=i;u.createNewEvent(e),t.redirectTo("/event",e,u.getUIDLocally(),u.getUIDLocally())},l()}function UserInformationController(e,t,n,i,s){function o(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(){var e=new Date;e.setHours(0),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),c.tempBirthday=e}function l(){a(),u.loadBio(n.uid).then(function(e){c.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(c.tempBirthday=o(e.dob))})}var c=this,u=i;c.user={},c.tempBirthday,c.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},c.checkValues=function(){c.view.isData=!0,!angular.isUndefined(c.user.company)&&""!==c.user.company||!angular.isUndefined(c.user.title)&&""!==c.user.title||!angular.isUndefined(c.user.dob)&&""!==c.user.dob?(c.view.dataToSave=!0,c.view.proceedBtn="btn btn-success",c.view.btnMssg="Save & Continue"):(c.view.dataToSave=!1,c.view.proceedBtn="btn btn-primary",c.view.btnMssg="Move On...")},c.updateDOB=function(){c.user.dob=r(c.tempBirthday),c.checkValues()},c.saveAndMoveOn=function(){var t=s,i=u.getUIDLocally();0!==c.tempBirthday&&c.updateDOB(),(""==i||angular.isUndefined(i))&&u.setUIDLocally(n.uid),c.view.isData&&(e.info("saving the new data"),u.updateBioLocally(c.user)),t.redirectTo("/userEvents",c.user.uid)},l()}function authService(e,t){function n(){var e=t;e.checkLoginStatus().then(function(e){return e})["catch"](function(e){return e})}var i={isLoggedIn:n};return i}function backendServices(e,t,n){function i(e){return btoa(e)}function s(e){return atob(e)}function o(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(e,n){var i=new Firebase(I);return t(function(t,s){i.createUser({email:e,password:n},function(e,n){e?s("Error creating user: "+e):t(n)})})}function l(e,n,i){var s=new Firebase(I),o=s.child("Users").child(e),a=new Date;return t(function(t,s){o.set({bio:{uid:e,name:n,email:i},events:{pending:{updated:r(a)},hosting:{updated:r(a)},attending:{updated:r(a)},completed:{updated:r(a)}}},function(e){e?s("Data could not be saved: "+e):t("Data saved successfully.")})})}function c(e,n){var s=new Firebase(I),o=i(n),r=s.child("Uids").child(o);return t(function(t,n){r.set(e,function(e){e?n("Data could not be saved. "+e):t("uid created sucessfully.")})})}function u(e,n){var i=new Firebase(I);return t(function(t,s){i.authWithPassword({email:e,password:n},function(e,n){e?s("Error Logging In: "+e):t(n)})})}function d(){var e=new Firebase(I);return t(function(t,n){e.onAuth(function(e){t(e?!0:!1)})})}function f(){var t=new Firebase(I);e.info("logging user out"),t.unauth()}function v(e){var n=new Firebase(I),i=e.uid,s=n.child("Users").child(i);return t(function(t,n){s.update(e,function(e){e?n("There was a problem updating that record: "+e):t("all user data uploaded successfully")})})}function m(e){var n=new Firebase(I),i=e.uid.toString(),s=n.child("Users").child(i).child("bio");return t(function(t,n){s.update(e,function(e){e?n("There was a problem updating that record: "+e):t("all user bio data uploaded successfully")})})}function g(){}function h(e){var n=new Firebase(I),i=n.child("Users").child(e).child("bio");return t(function(e,t){i.once("value",function(t){e(t.val())},function(e){e&&t(e)})})}function p(e,n){var i=new Firebase(I),s=n.id,o=i.child("Users").child(e).child("events").child("hosting").child(s);return t(function(e,t){o.set(n,function(n){n?t("There was an error: "+n):e("New event saved to DB successfully")})})}function b(e,n,i,s){var o=new Firebase(I),r=o.child("Users").child(s).child("events").child("hosting").child(i).child("guestList").child(n);return t(function(t,n){r.set({rsvpd:!1,status:"pending",name:e},function(e){e?n("There was an error: "+e):t("New event saved to DB successfully")})})}function E(e){var n=new Firebase(I),i=n.child("Users").child(e).child("events");return t(function(e,t){i.orderByKey().once("value",function(t){var n=t.val(),i={hosting:n.hosting,attending:n.attending,pending:n.pending,completed:n.completed};e(i)},function(e){e&&t(e)})})}function w(e,n){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(n);return t(function(e,t){s.once("value",function(t){var n=t.val();e(n)},function(e){e&&t(e)})})}function U(e){var n=new Firebase(I),i=n.child("Uids");return t(function(t,n){i.once("value",function(i){var s=i.val();Object.keys(s).forEach(function(i){i==e?t(s[i]):n("No user by that email")})})})}function T(e,n){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(n).child("guestList");return t(function(e,t){s.once("value",function(t){var n=t.val();e(n)},function(e){e&&t("There was an error getting the guest list: "+e)})})}function y(e,t,n){}function L(e,n){var i=new Firebase(I),s=i.child("Users").child(n).child("events").child(e).child("updated");return t(function(e,t){s.set(null,function(n){n?t("There was an error deleting update field: "+n):e("Deleted update successfully")})})}function A(e,n){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(n);return t(function(e,t){var n=function(n){n?t("Synchronization failed"):e("Synchronization succeeded")};s.remove(n)})}function D(e,n){var i=new Firebase(I),s=i.child("Users").child(n).child("events").child(e);return t(function(e,t){s.once("value",function(n){var i=n.val();angular.isDefined(i.updated)?e(!0):t(!1)},function(e){e&&t(e)})})}var I="https://meetupplanner.firebaseio.com/",C={utf8_to_b64:i,b64_to_utf8:s,unixTimeToDateTime:o,dateTimeToUnixTime:r,LoginRegisteredUser:u,checkLoginStatus:d,logUserOut:f,downloadUserData:g,getUserBio:h,getUserEvents:E,getAHostedEvent:w,getAnInvitedEvent:y,findGuestUID:U,getGuestListForEvent:T,createNewUser:a,addNewUserToDatabase:l,addNewUserToRegUsersList:c,uploadUserData:v,uploadUserBio:m,createHostedEvent:p,addGuestToHostGuestListonDB:b,deleteUpdateField:L,removeIncompleteEvent:A,thereWasAnUpdateField:D};return C}function trafficValet(e,t){function n(e,n,i,s){angular.isDefined(n)?(e=e+"/"+n,angular.isDefined(i)&&(e=e+"/"+i,angular.isDefined(s)&&(e=e+"/"+s,t.path(e)),t.path(e)),t.path(e)):t.path(e)}function i(e,n,i,s){if(angular.isUndefined(s)&&(s=1),n===i){var o="/event/host/"+e+"/"+i+"/"+s;t.path(o)}else{var o="/event/guest/"+e+"/"+i+"/"+n;t.path(o)}}var s={redirectTo:n,eventRoute:i};return s}function userData(e,t,n){function i(e){return btoa(e)}function s(e){return Date.parse(e)}function o(){return""!==ee.bio.uid&&""!==ee.bio.name&&""!==ee.bio.email}function r(e,t){return!!angular.isDefined(ee.events[e][t])}function a(e,t){return angular.isDefined(ee.bio.email)&&""!=ee.bio.email?e==ee.bio.email:ee.events.hosting[t].host.email==e}function l(t,n){return angular.isDefined(ee.events.hosting[n].guestList)?(refEmail=i(t),void Object.keys(ee.events.hosting[n].guestList).forEach(function(t){return refEmail==t?(e.info("an email match was found, this guest has been invited already"),!0):(e.info("no email match found, ok to invite guest"),!1)})):(e.info("no guestlist"),!1)}function c(){return!!angular.isDefined(te.event)}function u(e){Object.keys(ee.events[e]).forEach(function(t){angular.isObject(ee.events[e][t])||delete ee.events[e][t]})}function d(){return ee.bio.uid}function f(){return ee.bio.name}function v(){return ee.bio.email}function m(){return ee.bio.company}function g(){return ee.bio.title}function h(){return ee.bio.dob}function p(){return{uid:ee.bio.uid,name:ee.bio.name,email:ee.bio.email,company:ee.bio.company,title:ee.bio.title,dob:ee.bio.dob}}function b(e,t){return ee.events[e][t]}function E(e){return ee.events[e]}function w(){return ee.events}function U(){return te}function T(e){ee.bio.uid=e}function y(e){ee.bio.name=e}function L(e){ee.bio.email=e}function A(e){ee.bio.company=e}function D(e){ee.bio.title=e}function I(e){ee.bio.dob=e}function C(e,t,n){angular.isDefined(e)&&L(e),angular.isDefined(t)&&y(t),angular.isDefined(n)&&T(n)}function S(e,t){var n=t.id;u(e),ee.events[e][n]=t}function q(e){ee.events=e}function F(e){y(e.name),L(e.email),A(e.company),D(e.title),I(e.dob),z()}function $(e,s,o,r,a){var l=n;return t(function(t,n){angular.isDefined(s)&&(o=i(s)),l.addGuestToHostGuestListonDB(e,o,r,a).then(function(e){t(e)})["catch"](function(e){n(e)})})}function B(e){te=e}function R(e){var t=e.uid;angular.isObject(te.event.guestList)||(te.event.guestList={}),te.event.guestList[t]=e.guest}function k(e){var s=n;return t(function(t,n){guestEmail=i(e),s.findGuestUID(guestEmail).then(function(e){t(e)})["catch"](function(e){n(e)})})}function G(e,t){delete ee.events[e][t.id]}function M(){var e=n;e.downloadUserData().then(function(e){ee=e})}function j(e){var i=n;return t(function(t,n){i.getUserBio(e).then(function(e){t(e)})["catch"](function(e){n("There was an error reading the user bio: "+e)})})}function O(){var e=n;return t(function(t,n){e.getUserEvents(d()).then(function(e){Object.keys(e).forEach(function(t){Object.keys(e[t]).forEach(function(n){S(t,e[t][n])})}),t(e)})["catch"](function(e){n("There was an error reading the user events: "+e)})})}function x(e){var i=n;return t(function(t,n){i.getAHostedEvent(d(),e).then(function(e){t(e)})["catch"](function(e){n("There was an error reading the user event: "+e)})})}function N(){var e=n;e.uploadUserData(ee)}function z(){var e=n;e.uploadUserBio(ee.bio)}function H(){}function P(i,s){var o=n;return e.info("sending this to the server"),e.info(s),t(function(e,t){o.createHostedEvent(i,s).then(function(t){e(t)})["catch"](function(e){t(e)})})}function V(i){var s=n;return t(function(t,n){s.thereWasAnUpdateField(i,d()).then(function(t){s.deleteUpdateField(i,d()).then(function(t){e.info(t)})["catch"](function(t){e.info(t)})})["catch"](function(t){e.info(t)})})}function _(e,i){var s=n;return t(function(t,n){s.getGuestListForEvent(e,i).then(function(e){t(e)})["catch"](function(e){n(e)})})}function W(e){var i=n;return t(function(t,n){i.removeIncompleteEvent(ee.getUIDLocally,e).then(function(e){t(e)})["catch"](function(e){n(e)})})}function Z(e){return t(function(t,n){o()?t(p()):j(e).then(function(e){C(e.email,e.name,e.uid),t(e)})["catch"](function(e){n(e)})})}function K(e,n){return T(e),t(function(e,t){x(n).then(function(t){e(t)})["catch"](),r("hosting",n)&&e(b("hosting",n))})}function J(e){var n={};return t(function(e,t){O().then(function(t){e(t)}),n=E(type),e(n)})}function Q(e){var t={},n=new Date;n.setMinutes(0,0,0);var i=s(n);t={id:e,name:"",type:"",host:{name:ee.bio.name,uid:ee.bio.uid,email:ee.bio.email},message:"",eventTimes:{start:i,end:i+36e5},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0}},S("hosting",t),B(t)}function X(e){return t(function(e,t){})}function Y(t,n){e.info("saving this event locally"),e.info(n),S(t,n)}var ee={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{hosting:{},pending:{},attending:{},completed:{}}},te={},ne={bioPrimariesAreCompleteLocally:o,eventExistsLocally:r,thisIsTheHostEmail:a,guestInvitedAlready:l,thereIsAnActiveEvent:c,cleanEvents:u,getUIDLocally:d,getNameLocally:f,getEmailLocally:v,getCompanyLocally:m,getTitleLocally:g,getDOBLocally:h,getFullBioLocally:p,getOneUserEventLocally:b,getUserEventsLocally:E,getAllUserEventsLocally:w,getActiveEvent:U,setUIDLocally:T,setNameLocally:y,setEmailLocally:L,setCompanyLocally:A,setTitleLocally:D,setDOBLocally:I,setPrimariesLocally:C,updateUserEventsLocally:S,updateAllUserEventsLocally:q,updateBioLocally:F,addGuestToHostGuestList:$,setActiveEvent:B,addGuestToActiveEvent:R,saveNewHostingEvent:Y,removeUserEventsLocally:G,getFullRemoteDBforLocal:M,getRemoteBioForLocal:j,getRemoteEventsForLocal:O,getOneRemoteEventForLocal:x,setFullRemoteDBfromLocal:N,setRemoteBioFromLocal:z,setARemoteEventFromLocal:H,setRemoteEventsFromLocal:P,cleanDBEventsCategory:V,getUserIdForGuest:k,getEventGuestList:_,removeIncompleteEventFromDB:W,loadBio:Z,loadEventsProgressively:J,loadAnEventProgressively:K,createNewEvent:Q,updatePendingEventsListForGuest:X};return ne}function validation(e){function t(e){return angular.isUndefined(e)?"This is a required field":void 0}function n(e){return angular.isDefined(e)&&e.length<I?"Name should be at least "+I+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<C)}function s(e){return angular.isDefined(e)&&!(e.length>S)}function o(e){if(angular.isDefined(e)){var t=new RegExp("[!@#$%^&*]");return!!t.test(e)}return!1}function r(e){if(angular.isDefined(e)){var t=new RegExp("[0-9]","");return!!t.test(e)}return!1}function a(e){if(angular.isDefined(e)){var t=new RegExp("[a-z]","");return!!t.test(e)}return!1}function l(e){if(angular.isDefined(e)){var t=new RegExp("[A-Z]","");return!!t.test(e)}return!1}function c(e){if(angular.isDefined(e)){var t=new RegExp("[^A-z0-9!@#$%^&*]","");return!t.test(e)}return!1}function u(e){var t=/[a-z0-9!#$%&'*+=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,n=new RegExp(t);return angular.isDefined(e)&&!n.test(e)?"Not a valid email":void 0}function d(e){}function f(){var e={name:{name:{status:!1,message:"A name is required"},validLength:{status:!1,message:"Name must be at least 3 characters long"}},email:{email:{status:!1,message:"An email is required"},validEmail:{status:!1,message:"This is not a valid email"}},pass:{pass:{status:!1,message:"A password is required"},tooShort:{status:!1,message:"There should be at least 6 characters"},tooLong:{status:!1,message:"There should be no more than 100 characters"},noLowercase:{status:!1,message:"There should be at least one lowercase letter"},noUppercase:{status:!1,message:"There should be at least one uppercase letter"},noNumber:{status:!1,message:"There should be at least one number"},noSymbol:{status:!1,message:"There should be at least one symbol"},hasInvalidChar:{status:!1,message:"There shouldn't be any invalid characters"}},changeStatus:function(e,t,n){this[e][t].status=n},getErrorMessage:function(e,t){return this[e][t].message},allReqsFulfilled:function(e){Object.keys(e).forEach(function(t){return e[t].status?void 0:!1})},allInputsPass:function(){Object.keys(this).forEach(function(e){return this.allReqsFulfilled(e)?void 0:!1})},getAllErrors:function(){var e={};return Object.keys(this).forEach(function(t){angular.isObject(this[t])&&Object.keys(t).forEach(function(n){this[t][n].status&&(e[t]={},e[t][n]={message:this[t][n].message})})}),e}};return e}function v(){var e={eventName:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventHost:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventType:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventStart:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventEnd:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventStreet01:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,
"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventCity:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventState:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventZip:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventGuest:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}}};return e}function m(){this.passesAllReqs?(this["class"].row["has-success"]=!0,this["class"].row["has-error"]=!1,this.style["background-color"]="#78FA89",this.style.color="black"):(this["class"].row["has-success"]=!1,this["class"].row["has-error"]=!0,this.style["background-color"]="#FA787E",this.style.color="white")}function g(){var e=this.reqs,t=this.reqBox;Object.keys(e).forEach(function(n){e[n].met?t[n].style.color="green":t[n].style.color="red"})}function h(){var e=this.reqs,t=[];Object.keys(e).forEach(function(n){e[n].met||t.push(e[n].errorMessage)}),this.errorMessage=t.join(", ")}function p(){angular.isDefined(this.value)&&""!=this.value?this.hasValue=!0:this.hasValue=!1}function b(){this.allReqsTested&&(angular.isDefined(this.errorMessage)&&""!=this.errorMessage?this.hasAnErrorMessage=!0:this.hasAnErrorMessage=!1)}function E(){var e=this.reqs,t=this.value,n=!0;Object.keys(e).forEach(function(i){e[i].test(t)?e[i].met=!0:(e[i].met=!1,n=!1)}),this.passesAllReqs=n,n?this.hasAnErrorMessage=!1:(this.buildErrorMessage(),this.hasAnErrorMessage=!0),this.updateClasses(),angular.isDefined(this.updateReqStyles)&&this.updateReqStyles(),this.allReqsTested=!0}function w(){this.allReqsTested&&this.checkAllRequirnments()}function U(){this.showReqsBox=!0}function T(){this.showReqsBox=!1}function y(e){var n={name:{value:"",reqs:{hasOne:t,longEnough:q},errorMessage:"",hasValue:!1,passesAllReqs:!1,allReqsTested:!1,hasAnErrorMessage:!1,buildErrorMessage:h,checkForValue:p,checkForErrorMessage:b,checkAllRequirnments:E,postFailReqsTest:w,updateClasses:m,"class":{row:{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1},label:{"control-label":!0},input:{"col-xs-12":!0,"col-sm-12":!0,"col-md-12":!0,"form-control":!0}},style:{color:"black"}},email:{value:"",reqs:{hasOne:t,isAnEmail:F},errorMessage:"",hasValue:!1,passesAllReqs:!1,allReqsTested:!1,hasAnErrorMessage:!1,buildErrorMessage:h,checkForValue:p,checkForErrorMessage:b,checkAllRequirnments:E,postFailReqsTest:w,updateClasses:m,"class":{row:{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1},label:{"control-label":!0},input:{"col-xs-12":!0,"col-sm-12":!0,"col-md-12":!0,"form-control":!0}},style:{color:"black"}},pass:{value:"",reqs:{hasOne:t,longEnough:$,shortEnough:B,hasLowercase:R,hasUppercase:k,hasANumber:G,hasASymbol:M,noIllegalChars:j},errorMessage:"",hasValue:!1,passesAllReqs:!1,allReqsTested:!1,hasAnErrorMessage:!1,showReqsBox:!1,buildErrorMessage:h,checkForValue:p,checkForErrorMessage:b,checkAllRequirnments:E,postFailReqsTest:w,updateClasses:m,updateReqStyles:g,openReqBox:U,closeReqBox:T,"class":{row:{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1},label:{"control-label":!0},input:{"col-xs-12":!0,"col-sm-12":!0,"col-md-12":!0,"form-control":!0}},style:{color:"black"},reqBox:{hasOne:{req:"Need to set a password",style:{color:"red"}},longEnough:{req:"Is at least 6 characters long",style:{color:"red"}},shortEnough:{req:"Is no longer than 100 characters",style:{color:"red"}},hasLowercase:{req:"Contains at least one lowercase letter",style:{color:"red"}},hasUppercase:{req:"Contains at least one uppercase letter",style:{color:"red"}},hasANumber:{req:"Contains at least one number",style:{color:"red"}},hasASymbol:{req:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"}},noIllegalChars:{req:"Doesn't have any illegal characters",style:{color:"red"}}}}};return n[e]}function L(){}function A(){}function D(){}var I=3,C=6,S=100,t={met:!1,errorMessage:"This field is required",test:function(e){return this.tested=!0,angular.isUndefined(e)?!1:""!=e}},q={met:!1,errorMessage:"Too short (3 chars minimum)",test:function(e){return this.tested=!0,angular.isDefined(e)?e.length>=3:void 0}},F={met:!1,errorMessage:"This is not a valid email",test:function(e){var t=/[a-z0-9!#$%&'*+=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,n=new RegExp(t);return angular.isDefined(e)?!!n.test(e):!1}},$={met:!1,errorMessage:"Should be at least 6 characters long",test:function(e){return this.tested=!0,angular.isDefined(e)?e.length>=6:!1}},B={met:!1,errorMessage:"Should be no more than 100 characters",test:function(e){return this.tested=!0,angular.isDefined(e)?e.length<=100:!1}},R={met:!1,errorMessage:"Should have at least one lowercase letter",test:function(e){var t=new RegExp("[a-z]");return angular.isDefined(e)?!!t.test(e):!1}},k={met:!1,errorMessage:"Should have at least one uppercase letter",test:function(e){var t=new RegExp("[A-Z]");return angular.isDefined(e)?!!t.test(e):!1}},G={met:!1,errorMessage:"Should have at least one number letter",test:function(e){var t=new RegExp("[0-9]");return angular.isDefined(e)?!!t.test(e):!1}},M={met:!1,errorMessage:"Should have at least one symbol letter",test:function(e){var t=new RegExp("[!@#$%^&*]");return angular.isDefined(e)?!!t.test(e):!1}},j={met:!1,errorMessage:"Should be at least 6 characters long",test:function(e){var t=new RegExp("[^A-z0-9!@#$%^&*]");return angular.isDefined(e)?!t.test(e):!0}},O={required:t,minNameLength:n,minPassLength:i,maxPassLength:s,atLeastOneSymbol:o,atLeastOneNumber:r,atLeastOneLowercase:a,atLeastOneUppercase:l,illegalCharacter:c,email:u,dateOfBirth:d,generateEventRequirnments:v,generateNewUserRequirnemnts:f,updateEventReqStatus:L,updateEventReqAddressed:A,updateEventReqClass:D,generateTestableObject:y};return O}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/host/:eventId/:uid/:section",{templateUrl:"views/hostEvent.htm",controller:"HostEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/guest/:eventId/:uid/:hostId",{templateUrl:"views/guestEvent.htm",controller:"GuestEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:section?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService,eventViewChanger:eventViewChanger}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function eventViewChanger(e,t){e.eventRoute(t.current.params.eventId,t.current.params.hostId,t.current.params.uid,t.current.params.section)}function addAGuest(){function e(e,t,n,i){}function t(e,t,n,i){function s(e){return btoa(e)}function o(){a.validations.name.valid&&a.validations.email.valid?(a.invitationValidForSubmission=!0,a.submissionButton["class"]["btn-warning"]=!1,a.submissionButton["class"]["btn-success"]=!0,a.submissionButton.message="Invite Guest"):(a.invitationValidForSubmission=!1,a.submissionButton["class"]["btn-warning"]=!0,a.submissionButton["class"]["btn-success"]=!1,a.submissionButton.message="Address Invitation...")}function r(){angular.isUndefined(c.getOneUserEventLocally("hosting",t.eventId))?c.getRemoteEventsForLocal().then(function(){u=c.getOneUserEventLocally("hosting",t.eventId)}):u=c.getOneUserEventLocally("hosting",t.eventId)}var a=this,l=n,c=i,u={};a.tempGuest={name:"",email:"",status:"pending"},a.validations={name:{addressed:!1,valid:!1,errorMessage:""},email:{addressed:!1,valid:!1,errorMessage:""},invitation:{isTheHost:!1,alreadyInvited:!1,errorMessage:""}},a.invitationValidForSubmission=!1,a.submissionButton={style:{color:"red"},"class":{"col-xs-12":!0,"col-sm-12":!0,btn:!0,"btn-warning":!0,"btn-success":!1},message:"Address Invitation..."},a.validateName=function(){a.validations.name.addressed=!0,angular.isDefined(a.tempGuest.name)&&""!=a.tempGuest.name?(a.validations.name.valid=!0,a.validations.name.errorMessage=""):(a.validations.name.valid=!1,a.validations.name.errorMessage="This guest needs a name"),o()},a.validateEmail=function(){a.validations.email.addressed=!0,angular.isDefined(a.tempGuest.email)&&""!=a.tempGuest.email?angular.isUndefined(l.email(a.tempGuest.email))?(a.validations.email.valid=!0,a.validations.email.errorMessage=""):(a.validations.email.valid=!1,a.validations.email.errorMessage=l.email(a.tempGuest.email),e.info(a.validations.email.errorMessage)):(a.validations.email.valid=!1,a.validations.email.errorMessage="Not a valid email"),o()},a.showNameError=function(){return!(a.validations.name.valid||!a.validations.name.addressed)},a.showEmailError=function(){return!(a.validations.email.valid||!a.validations.email.addressed)},a.showInvitationError=function(){return!(!a.validations.invitation.isTheHost&&!a.validations.invitation.alreadyInvited)},a.submitGuestInvitation=function(){if(a.invitationValidForSubmission){if(c.thisIsTheHostEmail(a.tempGuest.email,t.eventId))return a.validations.invitation.isTheHost=!0,a.validations.invitation.errorMessage="No need to invite the host",0;a.validations.invitation.isTheHost=!1,c.getUserIdForGuest(a.tempGuest.email).then(function(e){return e}).then(function(e){angular.isObject(a.guestList)||(a.guestList={});var t=a.tempGuest;a.guestList[e]=t,a.tempGuest={name:"",email:"",status:"pending"}}).then(function(){}).then(function(){})["catch"](function(t){e.info(t),idByEmail=s(a.tempGuest.email),angular.isObject(a.guestList)||(a.guestList={});var n=a.tempGuest;a.guestList[idByEmail]=n,a.tempGuest={name:"",email:"",status:"pending"}})}},r()}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/addAGuest.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","$routeParams","validation","userData"],n}function hostedEventsList(){function e(e,t,n,i){e.$watch("hostedEvents",function(e,t){})}function t(e,t){function n(e){return new Date(parseInt(e))}function i(e){var t=0;return s.guestsAreInvited=!0,Object.keys[e].forEach(function(e){t++}),t}var s=this,o=t;s.guestsAreInvited=!1,s.formatDate=function(e){return n(e)},s.guestsAttending=function(e){return angular.isDefined(e)&&angular.isDefined(e.attending)?i(e.attending):0},s.guestsInvited=function(e){function t(){return n.attending+n.pending+n.declined}if(angular.isDefined(e)){var n={attending:0,pending:0,declined:0};return angular.isDefined(e.attending)&&(n.attending=i(e.attending)),angular.isDefined(e.pending)&&(n.pending=i(e.pending)),angular.isDefined(e.declined)&&(n.declined=i(e.declined)),t()}return 0},s.percentageAttending=function(e){return angular.isDefined(e)?guestsAttending(guestlist)/guestsInvited(e):0},s.eventClicked=function(t){e.info("redirecting to: /event/"+t+"/"+s.hostedEvents[t].host.uid+"/"+s.userId),o.redirectTo("/event",t,s.hostedEvents[t].host.uid,s.userId)},s.inviteGuests=function(e){o.redirectTo("/event/host",e,s.hostedEvents[e].host.uid,"3")}}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/hostedEventsList.directive.htm",replace:!0,scope:{hostedEvents:"=",userId:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","trafficValet"],n}function hostedGuestList(){function e(e,t,n,i){e.$watch("guestList",function(){e.$apply})}function t(e,t,n){function i(){return angular.isDefined(o.guestList)&&""!=o.guestList?(o.isAGuestList=!0,!0):(o.isAGuestList=!1,!1)}function s(){var s=n;i()||(e.info("going after the list"),s.getEventGuestList(t.uid,t.eventId).then(function(t){e.info("got the list"),e.info(t),o.guestList=t,angular.isObject(t)&&(o.isAGuestList=!0)})["catch"](function(t){e.info("There was an error: "+t)}))}var o=this;o.isAGuestList=!1,s()}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/hostedGuestList.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","$routeParams","userData"],n}function toolBar(){function e(e,t,n,i){}function t(e,t,n,i){function s(){r.checkLoginStatus().then(function(e){o.loggedIn=e})["catch"]()}var o=this,r=n,a=i;o.login=function(){},o.logout=function(){t.info("logging out"),r.logUserOut(),a.redirectTo("/login")},o.loginRegisteredUser=function(){var e=i,s=n,r=userData;s.LoginRegisteredUser(o.email,o.password).then(function(e){return e.uid}).then(function(n){s.getUserBio(n).then(function(e){r.updateBioLocally(e),s.getUserEvents(n).then(function(e){r.updateAllUserEventsLocally(e)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)}),e.redirectTo("/userInformation",n)})["catch"](function(e){})},s(),e.$on("$routeChangeStart",function(e,t){s()})}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendServices","trafficValet"],n}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],eventViewChanger.$inject=["trafficValet","$route"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$log","$routeParams"],angular.module("meetUpEventApp").controller("GuestEventController",GuestEventController),GuestEventController.$inject=["$log"],angular.module("meetUpEventApp").controller("HostEventController",HostEventController),HostEventController.$inject=["$scope","$log","$routeParams","$document","userData","trafficValet","validation"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["trafficValet"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","backendServices"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("addAGuest",addAGuest),angular.module("meetUpEventApp").directive("hostedEventsList",hostedEventsList),angular.module("meetUpEventApp").directive("hostedGuestList",hostedGuestList),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
