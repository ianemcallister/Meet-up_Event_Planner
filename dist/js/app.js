function AnEventController(e,n,t,o,r){function a(){p.tempDateTime={start:"",end:""},p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},p.showIfHost=!1,p.hideIfAttending=!0,p.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},m(),g(),p.showIfHost||v()}function s(e){return btoa(e)}function l(e){return atob(e)}function u(e){return Date.parse(e)}function c(){p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function d(e){n.info("adding them to the registered users list "+e),w.child("Users").child(e).child("events").child("pending").child(o.uid).child(o.eventId).set({id:o.eventId,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name,host:o.uid},function(e){e&&n.info("there was an error"+e)}),w.child("Users").child(e).child("events").child("pending").once("value",function(t){var i=t.val();n.info(t.val()),i.updated?(n.info("deleting updated"),w.child("Users").child(e).child("events").child("pending").child("updated").remove(function(e){e&&n.info("Deleting failed: "+e.code)})):n.info("nothing to do")},function(e){e&&n.info("The read failed: "+e.code)})}function f(e){n.info("adding them to the UNREGISTERED users list "+e),w.child("UnregisteredUsers").child(e).child("pending").child(o.uid).child(o.eventId).set({id:o.eventId,host:o.uid,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name},function(e){e&&n.info("there was an error"+e)})}function m(){var e=w.getAuth();e.uid==o.hostId?(n.info("is the host"),p.showIfHost=!0):(n.info("not the host"),p.showIfHost=!1)}function g(){p.showIfHost||(n.info("check guest attendance"),U.child("guestList").on("value",function(e){var n=e.val();p.hideIfAttending=!n[o.uid].attending}))}function v(){p.manageSections[1].active=!0,p.manageSections[2].active=!0,p.manageSections[3].active=!0}var p=this,h="https://meetupplanner.firebaseio.com/",w=new Firebase(h),U=w.child("Users").child(o.hostId).child("events").child("hosting").child(o.eventId);p.event=r(U);var b=r(w.child("Uids"));p.requiredInputs=["","","","","","","","",""],p.setTempTime=function(e){"start"==e&&(p.tempDateTime.start=new Date),"end"==e&&(p.tempDateTime.end=new Date)},p.unixTimeToDateTime=function(e){return new Date(parseInt(e))},p.dateTimeToUnixTime=function(e){return Date.parse(e)},p.submit=function(){n.info("submitting the form now!")},p.backToUserEvents=function(){t.path("/userEvents/"+o.uid+"/"+o.token)},p.eventRedirect=function(e,i){var r=e+"/"+o.uid+"/"+o.token;n.info("redirecting to: "+r),t.path(r)},p.changeSection=function(e){for(n.info("are we here"),i=1;i<=3;i++)i==e?(p.manageSections[i].active=!0,p.manageSections[i].style["background-color"]="yellow",p.manageSections[i].style.color="black"):(p.manageSections[i].active=!1,p.manageSections[i].style["background-color"]="gray",p.manageSections[i].style.color="white")},p.saveEventTime=function(e,n){p.event.eventTimes||(p.event.eventTimes={start:"",end:""},p.event.eventTimes.start=p.dateTimeToUnixTime(p.tempDateTime.start),p.event.eventTimes.end=p.dateTimeToUnixTime(p.tempDateTime.end)),p.tempDateTime.end<p.tempDateTime.start&&"start"==n&&(p.tempDateTime.end=p.tempDateTime.start),"start"==n&&(p.event.eventTimes.start=p.dateTimeToUnixTime(e)),"end"==n&&(p.event.eventTimes.end=p.dateTimeToUnixTime(e))},p.guestsAreInvited=function(){return!!p.event.guestList},p.validateGuestEmail=function(){if(p.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(p.newGuest.email.address)?(p.newGuest.email.valid=!0,p.newGuest.email.style={color:"green"}):(p.newGuest.email.valid=!1,p.newGuest.email.style={color:""})}},p.isSectionComplete=function(){for(i=0;i<8;i++)n.info(p.requiredInputs[i])},p.saveAndAdvance=function(){p.event.$save().then(function(){n.info("event saved")})["catch"](function(e){n.info("error! "+e)}),p.isSectionComplete(),1==p.manageSections[1].complete&&1==p.manageSections[2].complete&&1==p.manageSections[3].complete?p.eventRedirect("/userEvents",o.uid):p.manageSections[1].active?p.changeSection(2):p.manageSections[2].active?p.changeSection(3):p.manageSections[3].active&&p.changeSection(1)},p.addGuestToHostsList=function(){var e=s(p.newGuest.email.address);if(p.newGuest.name&&p.newGuest.email.valid){if(p.event.guestList)for(var t=0;p.event.guestList[t];){if(p.event.guestList[t].email==l(e))return n.info("This guest is already on the list"),void c();t++}else p.event.guestList={};if(b[e]){if(b[e]==o.uid)return n.info("tried to register the host"),void c();d(b[e]),p.event.guestList[b[e]]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address}}else f(e),p.event.guestList[e]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address};p.saveEvent(),c()}else n.info("you didn't enter a name and or email")},p.guestWillAttend=function(e){var t=w.child("Users").child(o.uid).child("events"),i=0,r=!1;if(p.event.guestList[o.uid].attending=e,p.event.guestList[o.uid].status="attending",t.child("pending").on("value",function(r){var a=r.val();n.info(a),n.info(a[o.hostId]),n.info(a[o.hostId][o.eventId]);var s=a[o.hostId][o.eventId];n.info(s);for(invitation in a)i++;n.info("total attending: "+i),e&&t.child("attending").child(o.hostId).child(o.eventId).set(s,function(e){e&&n.info(e)})}),t.child("attending").on("value",function(e){var t=e.val();n.info("this is the attending list"),n.info(t),t.updated&&(r=!0)},function(e){e&&n.info(e)}),2>i){var a=new Date;t.child("pending").update({updated:u(a)},function(e){e&&n.info(e)})}t.child("pending").child(o.hostId).remove(),r&&n.info("removing the updated placeholder"),p.event.$save()},p.updateUpdatedParam=function(){var e=w.child("Users").child(o.uid).child("events");n.info("updating the param"),e.child("attending").on("value",function(e){n.info(e.val())}),e.child("attending").child("updated").remove()},p.addInvitationToAttending=function(e){var t=w.child("Users").child(o.uid).child("events"),i=0;t.child("pending").on("value",function(r){var a=r.val(),s=a[o.hostId][o.eventId];n.info(a),n.info(a[o.hostId]),n.info(a[o.hostId][o.eventId]);for(invitation in a)i++;n.info("total pending invitations: "+i),n.info(e),e&&t.child("attending").child(o.hostId).child(o.eventId).set(s,function(e){e&&n.info(e)})})},a()}function LandingPageController(e,n,t,o,r){function a(e){return btoa(e)}function s(e){return Date.parse(e)}function l(i,o){var r=i+"/"+d.uid+"/"+d.token;n.info("redirecting to: "+r),t.path(r),e.$apply()}var u=this,c="https://meetupplanner.firebaseio.com/",d={};u.showRequirnments=!1,u.validNewName={valid:!1,style:{color:""}},u.validNewEmail={valid:!1,style:{color:""}},u.securePassword={secure:!1,style:{color:""}},u.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},u.message="testing",u.validUserEmail={valid:!1,style:{color:""}},u.validUserPassword={valid:!1,style:{color:""}},u.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},u.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},u.displayPassReqs=function(){u.newName&&u.newEmail?u.showRequirnments=!0:u.showRequirnments=!1},u.checkNewName=function(){u.newName&&(u.newName.length>0?(u.validNewName.valid=!0,u.validNewName.style={color:"green"}):(u.validNewName.valid=!1,u.validNewName.style={color:"red"})),u.openCreateUserButton()},u.checkNewEmail=function(){if(u.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.newEmail)?(u.validNewEmail.valid=!0,u.validNewEmail.style={color:"green"}):(u.validNewEmail.valid=!1,u.validNewEmail.style={color:"red"})}u.openCreateUserButton()},u.checkUserEmail=function(){if(u.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.userEmail)?(u.validUserEmail.valid=!0,u.validUserEmail.style={color:"green"}):(u.validUserEmail.valid=!1,u.validUserEmail.style={color:"red"})}u.openUserLoginBtn()},u.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(u.newPassword){for(u.newPassword.length>15?(u.passwordRequirnments[0].style={color:"green"},u.passwordRequirnments[0].met=!0):(u.passwordRequirnments[0].style={color:"red"},u.passwordRequirnments[0].met=!1),u.newPassword.length<=100?(u.passwordRequirnments[1].style={color:"green"},u.passwordRequirnments[1].met=!0):(u.passwordRequirnments[1].style={color:"red"},u.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(u.newPassword)?(u.passwordRequirnments[i].style={color:"green"},u.passwordRequirnments[i].met=!0):(u.passwordRequirnments[i].style={color:"red"},u.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(u.newPassword)?(u.passwordRequirnments[6].style={color:"green"},u.passwordRequirnments[6].met=!0):(u.passwordRequirnments[6].style={color:"red"},u.passwordRequirnments[6].met=!1),u.passwordRequirnments[0].met&&u.passwordRequirnments[1].met&&u.passwordRequirnments[2].met&&u.passwordRequirnments[3].met&&u.passwordRequirnments[4].met&&u.passwordRequirnments[5].met&&u.passwordRequirnments[6].met?u.securePassword.secure=!0:u.securePassword.secure=!1,u.securePassword.secure?u.securePassword.style={color:"green"}:u.securePassword.style={color:"red"}}u.openCreateUserButton()},u.checkUserPasswords=function(){u.userPassword&&(u.userPassword.length>15?(u.validUserPassword.style={color:"green"},u.validUserPassword.valid=!0):(u.validUserPassword.style={color:"red"},u.validUserPassword.valid=!1)),u.openUserLoginBtn()},u.openCreateUserButton=function(){u.validNewName.valid&&u.validNewEmail.valid&&u.securePassword.secure?(u.unlockCreateUserBtn["class"]="btn btn-success",u.unlockCreateUserBtn.usable=!0):(u.unlockCreateUserBtn["class"]="btn btn-warning",u.unlockCreateUserBtn.usable=!1)},u.openUserLoginBtn=function(){u.validUserEmail.valid&&u.validUserPassword.valid?(u.unclockUserLoginBtn["class"]="btn btn-success",u.unclockUserLoginBtn.usable=!0):(u.unclockUserLoginBtn["class"]="btn btn-warning",u.unclockUserLoginBtn.usable=!1)},u.update=function(){u.newName=o.find("#newName")[0].value,u.newEmail=o.find("#newEmail")[0].value,u.userEmail=o.find("#userEmail")[0].value,u.checkNewName(),u.checkNewEmail(),u.checkUserEmail()},u.createNewUser=function(){if(n.info("Creating a new user account now!"),u.unlockCreateUserBtn.usable){var e=new Firebase(c);e.createUser({email:u.newEmail,password:u.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),d=i;var o=e.child("Users/"+i.uid),r=new Date;o.set({bio:{name:u.newName,email:u.newEmail},events:{pending:{updated:s(r)},hosting:{updated:s(r)},attending:{updated:s(r)},completed:{updated:s(r)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(a(u.newEmail)).set(d.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",d)}})}},u.loginRegisteredUser=function(){if(u.unclockUserLoginBtn.usable){var t=new Firebase(c);t.authWithPassword({email:u.userEmail,password:u.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),d=i,l("/userInformation",d),e.$apply())})}},u.alertMe=function(){alert("this is working! an alert!")},u.onResizeFunction=function(){var e=angular.element(".inputText");r.outerWidth>r.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in o&&o.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(o.body)},!1),angular.element(r).bind("resize",function(){u.onResizeFunction()}),angular.element(o).ready(function(){r.outerWidth<600&&u.onResizeFunction()}),u.master={},u.update=function(e){u.master=angular.copy(e)},u.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),u.user=angular.copy(u.master)},u.reset()}function MainController(e,n,t,i){function o(){angular.element(t);t.css("hight",i.outerHeight)}var r=this,a="https://meetupplanner.firebaseio.com/",s=new Firebase(a);r.logout=function(){alert("logging you out!"),s.unauth(),n.path("/")},angular.element(t).ready(function(){o()})}function NewUserSignUpController(e,n,t,o,r,a){function s(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var u=t;l.checkNewName=function(){var e=[],n=u.required(l.inputs.newName),t=u.minNameLength(l.inputs.newName);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.name=e.join(", "):l.errors.name="",s()},l.checkNewEmail=function(){var e=[],n=u.required(l.inputs.newEmail),t=u.email(l.inputs.newEmail);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.email=e.join(", "):l.errors.email="",s()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],n=u.required(l.inputs.newPassword),t=[u.minPassLength(l.inputs.newPassword),u.maxPassLength(l.inputs.newPassword),u.atLeastOneLowercase(l.inputs.newPassword),u.atLeastOneUppercase(l.inputs.newPassword),u.atLeastOneNumber(l.inputs.newPassword),u.atLeastOneSymbol(l.inputs.newPassword),u.illegalCharacter(l.inputs.newPassword)];angular.isDefined(n)&&e.push(n),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var o=!1;for(i=0;i<7;i++)t[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},o=!0);l.errors.password=o,s()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=r;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var t=o,i=a;t.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(o){i.loadPrimaries(l.inputs.newEmail,l.inputs.newName,o.uid),t.addNewUserToDatabase(o.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){n.info(i),t.addNewUserToRegUsersList(o.uid,l.inputs.newEmail).then(function(t){e.redirectTo("/userInformation",o.uid),n.info(t)})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})}}}function RegUserLoginController(e,n,t,i,o){function r(){angular.isDefined(a.inputs.email)&&""!==a.inputs.email&&angular.isDefined(a.inputs.password)&&""!==a.inputs.password?(a.inputs.requiredFieldsDefined=!0,a.unclockUserLoginBtn["class"]="btn btn-success",a.unclockUserLoginBtn.message="Login",a.unclockUserLoginBtn.usable=!0):(a.inputs.requiredFieldsDefined=!1,a.unclockUserLoginBtn["class"]="btn btn-warning",a.unclockUserLoginBtn.message="Need Email & Pass",a.unclockUserLoginBtn.usable=!1)}var a=this;a.inputs={email:"",password:"",requiredFieldsDefined:!1},a.errors={message:"",passesAllTests:!0},a.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning",message:"Need Email & Pass"},a.update=function(){a.inputs.email=n.find("#userEmail")[0].value,a.inputs.password=n.find("#userPassword")[0].value,r()},a.loginRegisteredUser=function(){var n=i,r=t,s=o;r.LoginRegisteredUser(a.inputs.email,a.inputs.password).then(function(e){a.errors.passesAllTests=!0,s.setPrimariesLocally(a.inputs.email,a.inputs.name,e.uid)}).then(function(){e.info("uid is "+s.getUIDLocally()),r.getUserBio(s.getUIDLocally()).then(function(n){s.updateBioLocally(n),r.getUserEvents(s.getUIDLocally()).then(function(e){s.updateAllUserEventsLocally(e)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)}),n.redirectTo("/userInformation",s.getUIDLocally())})["catch"](function(e){a.errors.message=e,a.errors.passesAllTests=!1})},a.clicked=function(){var e=t;e.logUserOut()}}function topMenuController(e,n,t,i,o){function r(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),s.loggedIn=!0):(n.info("User is logged out"),s.loggedIn=!1)}function a(e,i){var o=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+o),t.path(o)}var s=this,l="https://meetupplanner.firebaseio.com/",u=new Firebase(l);s.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(o).bind("resize",function(){s.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){o.outerWidth<600&&(s.onResizeFunction(),e.$apply())}),s.logout=function(){n.info("logging out!"),s.loggedIn=!1,u.unauth(),a("/",{uid:"",token:""})},s.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:s.navbarUserEmail,password:s.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),a("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},s.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",o.outerWidth-26+"px")},u.onAuth(r)}function UserEventsController(e,n,t){function i(e){return Date.parse(e)}function o(){var e=0;for(event in s.events.hosting)e++;return e}function r(){var e=new Date,n=10*i(e)+o();return n}function a(){l.setUIDLocally(n.uid),l.loadBio(n.uid).then(function(e){s.userBio=e})["catch"](),s.events=l.getAllUserEventsLocally(),l.getRemoteEventsForLocal().then(function(n){e.info("got this from the db"),e.info(n),s.events=l.getAllUserEventsLocally()})}var s=this,l=t;s.showDecline=!1,s.userBio={},s.events={},s.errors={},s.createNewEvent=function(){var n=r();e.info("you're creating a new event! "+n),l.createNewEvent(n).then()["catch"]()},a()}function UserInformationController(e,n,t,i,o){function r(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function s(){u.loadBio(t.uid).then(function(e){l.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(l.tempBirthday=r(e.dob))})}var l=this,u=i;l.user={},l.tempBirthday,l.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},l.checkValues=function(){l.view.isData=!0,!angular.isUndefined(l.user.company)&&""!==l.user.company||!angular.isUndefined(l.user.title)&&""!==l.user.title||!angular.isUndefined(l.user.dob)&&""!==l.user.dob?(l.view.dataToSave=!0,l.view.proceedBtn="btn btn-success",l.view.btnMssg="Save & Continue"):(l.view.dataToSave=!1,l.view.proceedBtn="btn btn-primary",l.view.btnMssg="Move On...")},l.updateDOB=function(){l.user.dob=a(l.tempBirthday),l.checkValues()},l.saveAndMoveOn=function(){var n=o,i=u.getUIDLocally();0!==l.tempBirthday&&l.updateDOB(),(""==i||angular.isUndefined(i))&&u.setUIDLocally(t.uid),l.view.isData&&(e.info("saving the new data"),u.updateBioLocally(l.user)),n.redirectTo("/userEvents",l.user.uid)},s()}function authService(e,n,t){function i(){return e.info("logging from the isLoggedIn Method"),!0}var o="https://meetupplanner.firebaseio.com/",r=(new Firebase(o),{isLoggedIn:i});return r}function backendServices(e,n,t){function i(e){return btoa(e)}function o(e){return atob(e)}function r(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function s(e,t){var i=new Firebase(U);return n(function(n,o){i.createUser({email:e,password:t},function(e,t){e?o("Error creating user: "+e):n(t)})})}function l(e,t,i){var o=new Firebase(U),r=o.child("Users").child(e),s=new Date;return n(function(n,o){r.set({bio:{uid:e,name:t,email:i},events:{pending:{updated:a(s)},hosting:{updated:a(s)},attending:{updated:a(s)},completed:{updated:a(s)}}},function(e){e?o("Data could not be saved: "+e):n("Data saved successfully.")})})}function u(e,t){var o=new Firebase(U),r=i(t),a=o.child("Uids").child(r);return n(function(n,t){a.set(e,function(e){e?t("Data could not be saved. "+e):n("uid created sucessfully.")})})}function c(t,i){var o=new Firebase(U);return n(function(n,r){o.authWithPassword({email:t,password:i},function(t,i){t?r("Error Logging In: "+t):(e.info("Logged In successfully: "+i.uid),n(i))})})}function d(){var n=new Firebase(U);return new Promise(function(t,i){n.onAuth(function(n){n?(e.info("User "+n.uid+" is logged in with "+n.provider),t(!0)):(e.info("User is logged out"),t(!1))})})}function f(){var n=new Firebase(U);e.info("logging user out"),n.unauth()}function m(e){var t=new Firebase(U),i=e.uid,o=t.child("Users").child(i);return n(function(n,t){o.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user data uploaded successfully")})})}function g(t){e.info(t);var i=new Firebase(U),o=t.uid.toString(),r=i.child("Users").child(o).child("bio");return n(function(n,i){e.info("uploading this"),e.info(t),r.update(t,function(e){e?i("There was a problem updating that record: "+e):n("all user bio data uploaded successfully")})})}function v(){}function p(e){var t=new Firebase(U),i=t.child("Users").child(e).child("bio");return n(function(e,n){i.once("value",function(n){e(n.val())},function(e){e&&n(e)})})}function h(t,i){var o=new Firebase(U),r=i.id,a=o.child("Users").child(t).child("events").child("hosting").child(r);return e.info(a),n(function(n,t){e.info("uploading this event:"),e.info(i),a.set(i,function(e){e?t("There was an error: "+e):n("New event saved to DB successfully")})})}function w(e){var t=new Firebase(U),i=t.child("Users").child(e);return n(function(e,n){i.once("value",function(n){var t=n.val(),i={hosting:t.hosting,attending:t.attending,pending:t.pending,completed:t.completed};e(i)},function(e){e&&n(e)})})}var U="https://meetupplanner.firebaseio.com/",b={utf8_to_b64:i,b64_to_utf8:o,unixTimeToDateTime:r,dateTimeToUnixTime:a,LoginRegisteredUser:c,checkLoginStatus:d,logUserOut:f,downloadUserData:v,getUserBio:p,getUserEvents:w,createNewUser:s,addNewUserToDatabase:l,addNewUserToRegUsersList:u,uploadUserData:m,uploadUserBio:g,createHostedEvent:h};return b}function trafficValet(e,n){function t(t,i,o){angular.isDefined(i)?(t=t+"/"+i,angular.isDefined(o)&&(t=t+"/"+o,e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)):(e.info("redirecting now to "+t),n.path(t))}var i={redirectTo:t};return i}function userData(e,n,t){function i(){return""!==A.bio.uid&&""!==A.bio.name&&""!==A.bio.email}function o(e){Object.keys(A.events[e]).forEach(function(n){angular.isObject(A.events[e][n])||delete A.events[e][n]})}function r(){return A.bio.uid}function a(){return A.bio.name}function s(){return A.bio.email}function l(){return A.bio.company}function u(){return A.bio.title}function c(){return A.bio.dob}function d(){return{uid:A.bio.uid,name:A.bio.name,email:A.bio.email,company:A.bio.company,title:A.bio.title,dob:A.bio.dob}}function f(e){return A.events[e]}function m(){return A.events}function g(e){A.bio.uid=e}function v(e){A.bio.name=e}function p(e){A.bio.email=e}function h(e){A.bio.company=e}function w(e){A.bio.title=e}function U(e){A.bio.dob=e}function b(e,n,t){angular.isDefined(e)&&p(e),angular.isDefined(n)&&a(n),angular.isDefined(t)&&g(t)}function y(e,n){o(e),A.events[e][n.id]=n}function E(e){A.events=allEvents}function L(e){v(e.name),p(e.email),h(e.company),w(e.title),U(e.dob),C()}function D(e,n){delete A.events[e][n.id]}function T(){var e=t;e.downloadUserData().then(function(e){A=e})}function $(i){var o=t;return e.info("going out to the db for bio"),n(function(n,t){o.getUserBio(i).then(function(t){e.info("found the bio remotly"),e.info(t),n(t)})["catch"](function(e){t("There was an error reading the user bio: "+e)})})}function I(){var i=t;return e.info("going out to the db for events"),n(function(n,t){e.info(r()),i.getUserEvents(r()).then(function(t){e.info("LOOK HERE"),e.info(t);for(eventType in t)if(angular.isDefined(eventType))for(event in eventType)y(eventType,event);n(t)})["catch"](function(e){t("There was an error reading the user events: "+e)})})}function R(){var e=t;e.uploadUserData(A)}function C(){var n=t;e.info("from setRemoteBioFromLocal"),e.info(A),n.uploadUserBio(A.bio)}function N(){}function k(t){return n(function(n,o){i()?(e.info("returning a local bio"),e.info(d()),n(d())):$(t).then(function(e){n(e)})["catch"](function(e){o(e)})})}function P(t){var i={};return n(function(n,t){I().then(function(e){n(e)}),i=f(type),e.info(i),n(i)})}function B(i){var o=t,a={};return a={id:i,name:"",type:"",host:{name:"",uid:""},message:"",eventTimes:{start:0,end:0},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0},guestList:{}},y("hosting",a),n(function(n,t){e.info("jumping into the promise here"),o.createHostedEvent(r(),a).then(function(n){e.info(n)})["catch"](function(n){e.info(n)})})}var A={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{hosting:{},pending:{},attending:{},completed:{}}},q={bioPrimariesAreCompleteLocally:i,cleanEvents:o,getUIDLocally:r,getNameLocally:a,getEmailLocally:s,getCompanyLocally:l,getTitleLocally:u,getDOBLocally:c,getFullBioLocally:d,getUserEventsLocally:f,getAllUserEventsLocally:m,setUIDLocally:g,setNameLocally:v,setEmailLocally:p,setCompanyLocally:h,setTitleLocally:w,setDOBLocally:U,setPrimariesLocally:b,updateUserEventsLocally:y,updateAllUserEventsLocally:E,updateBioLocally:L,removeUserEventsLocally:D,getFullRemoteDBforLocal:T,getRemoteBioForLocal:$,getRemoteEventsForLocal:I,setFullRemoteDBfromLocal:R,setRemoteBioFromLocal:C,setRemoteEventsFromLocal:N,loadBio:k,loadEventsProgressively:P,createNewEvent:B};return q}function validation(e){function n(e){return angular.isUndefined(e)?"This is a required field":void 0}function t(e){return angular.isDefined(e)&&e.length<f?"Name should be at least "+f+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<m)}function o(e){return angular.isDefined(e)&&!(e.length>g)}function r(e){if(angular.isDefined(e)){var n=new RegExp("[!@#$%^&*]");return!!n.test(e)}return!1}function a(e){if(angular.isDefined(e)){var n=new RegExp("[0-9]","");return!!n.test(e)}return!1}function s(e){if(angular.isDefined(e)){var n=new RegExp("[a-z]","");return!!n.test(e)}return!1}function l(e){if(angular.isDefined(e)){var n=new RegExp("[A-Z]","");return!!n.test(e)}return!1}function u(e){if(angular.isDefined(e)){var n=new RegExp("[^A-z0-9!@#$%^&*]","");return!n.test(e)}return!1}function c(e){var n=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return n.test(e)?void 0:"Not a valid e-mail address"}function d(e){}var f=3,m=16,g=100,v={required:n,minNameLength:t,minPassLength:i,maxPassLength:o,atLeastOneSymbol:r,atLeastOneNumber:a,atLeastOneLowercase:s,atLeastOneUppercase:l,illegalCharacter:u,email:c,dateOfBirth:d};return v}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function toolBar(){function e(e,n,t,i){}function n(e,n){var t=this,i=n;i.checkLoginStatus().then(function(e){t.loggedIn=e})["catch"](),t.clicked=function(){e.info("button clicked")}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","backendServices"],t}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","$q","$location"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
