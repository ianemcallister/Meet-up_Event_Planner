function AnEventController(e,n){function t(){v.tempDateTime={start:"",end:""},v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},v.showIfHost=!1,v.hideIfAttending=!0,v.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},c(),d(),v.showIfHost||f()}function o(e){return btoa(e)}function a(e){return atob(e)}function s(e){return Date.parse(e)}function r(){v.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function l(t){e.info("adding them to the registered users list "+t),ref.child("Users").child(t).child("events").child("pending").child(n.uid).child(n.eventId).set({id:n.eventId,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name,host:n.uid},function(n){n&&e.info("there was an error"+n)}),ref.child("Users").child(t).child("events").child("pending").once("value",function(n){var i=n.val();e.info(n.val()),i.updated?(e.info("deleting updated"),ref.child("Users").child(t).child("events").child("pending").child("updated").remove(function(n){n&&e.info("Deleting failed: "+n.code)})):e.info("nothing to do")},function(n){n&&e.info("The read failed: "+n.code)})}function u(t){e.info("adding them to the UNREGISTERED users list "+t),ref.child("UnregisteredUsers").child(t).child("pending").child(n.uid).child(n.eventId).set({id:n.eventId,host:n.uid,eventTimes:{start:v.event.eventTimes.start,end:v.event.eventTimes.end},name:v.event.name},function(n){n&&e.info("there was an error"+n)})}function c(){var t=ref.getAuth();t.uid==n.hostId?(e.info("is the host"),v.showIfHost=!0):(e.info("not the host"),v.showIfHost=!1)}function d(){v.showIfHost||(e.info("check guest attendance"),userEvents.child("guestList").on("value",function(e){var t=e.val();v.hideIfAttending=!t[n.uid].attending}))}function f(){v.manageSections[1].active=!0,v.manageSections[2].active=!0,v.manageSections[3].active=!0}var v=this;v.tempTime={start:"",end:""},v.userIsHost=!1,v.setTempTime=function(e){"start"==e&&(v.tempDateTime.start=new Date),"end"==e&&(v.tempDateTime.end=new Date)},v.unixTimeToDateTime=function(e){return new Date(parseInt(e))},v.dateTimeToUnixTime=function(e){return Date.parse(e)},v.submit=function(){e.info("submitting the form now!")},v.backToUserEvents=function(){$location.path("/userEvents/"+n.uid+"/"+n.token)},v.eventRedirect=function(t,i){var o=t+"/"+n.uid+"/"+n.token;e.info("redirecting to: "+o),$location.path(o)},v.changeSection=function(n){for(e.info("are we here"),i=1;i<=3;i++)i==n?(v.manageSections[i].active=!0,v.manageSections[i].style["background-color"]="yellow",v.manageSections[i].style.color="black"):(v.manageSections[i].active=!1,v.manageSections[i].style["background-color"]="gray",v.manageSections[i].style.color="white")},v.saveEventTime=function(e,n){v.event.eventTimes||(v.event.eventTimes={start:"",end:""},v.event.eventTimes.start=v.dateTimeToUnixTime(v.tempDateTime.start),v.event.eventTimes.end=v.dateTimeToUnixTime(v.tempDateTime.end)),v.tempDateTime.end<v.tempDateTime.start&&"start"==n&&(v.tempDateTime.end=v.tempDateTime.start),"start"==n&&(v.event.eventTimes.start=v.dateTimeToUnixTime(e)),"end"==n&&(v.event.eventTimes.end=v.dateTimeToUnixTime(e))},v.guestsAreInvited=function(){return!!v.event.guestList},v.validateGuestEmail=function(){if(v.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(v.newGuest.email.address)?(v.newGuest.email.valid=!0,v.newGuest.email.style={color:"green"}):(v.newGuest.email.valid=!1,v.newGuest.email.style={color:""})}},v.isSectionComplete=function(){for(i=0;i<8;i++)e.info(v.requiredInputs[i])},v.saveAndAdvance=function(){v.event.$save().then(function(){e.info("event saved")})["catch"](function(n){e.info("error! "+n)}),v.isSectionComplete(),1==v.manageSections[1].complete&&1==v.manageSections[2].complete&&1==v.manageSections[3].complete?v.eventRedirect("/userEvents",n.uid):v.manageSections[1].active?v.changeSection(2):v.manageSections[2].active?v.changeSection(3):v.manageSections[3].active&&v.changeSection(1)},v.addGuestToHostsList=function(){var t=o(v.newGuest.email.address);if(v.newGuest.name&&v.newGuest.email.valid){if(v.event.guestList)for(var i=0;v.event.guestList[i];){if(v.event.guestList[i].email==a(t))return e.info("This guest is already on the list"),void r();i++}else v.event.guestList={};if(registeredUsers[t]){if(registeredUsers[t]==n.uid)return e.info("tried to register the host"),void r();l(registeredUsers[t]),v.event.guestList[registeredUsers[t]]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address}}else u(t),v.event.guestList[t]={attending:!1,status:"pending",name:v.newGuest.name,email:v.newGuest.email.address};v.saveEvent(),r()}else e.info("you didn't enter a name and or email")},v.guestWillAttend=function(t){var i=ref.child("Users").child(n.uid).child("events"),o=0,a=!1;if(v.event.guestList[n.uid].attending=t,v.event.guestList[n.uid].status="attending",i.child("pending").on("value",function(a){var s=a.val();e.info(s),e.info(s[n.hostId]),e.info(s[n.hostId][n.eventId]);var r=s[n.hostId][n.eventId];e.info(r);for(invitation in s)o++;e.info("total attending: "+o),t&&i.child("attending").child(n.hostId).child(n.eventId).set(r,function(n){n&&e.info(n)})}),i.child("attending").on("value",function(n){var t=n.val();e.info("this is the attending list"),e.info(t),t.updated&&(a=!0)},function(n){n&&e.info(n)}),2>o){var r=new Date;i.child("pending").update({updated:s(r)},function(n){n&&e.info(n)})}i.child("pending").child(n.hostId).remove(),a&&e.info("removing the updated placeholder"),v.event.$save()},v.updateUpdatedParam=function(){var t=ref.child("Users").child(n.uid).child("events");e.info("updating the param"),t.child("attending").on("value",function(n){e.info(n.val())}),t.child("attending").child("updated").remove()},v.addInvitationToAttending=function(t){var i=ref.child("Users").child(n.uid).child("events"),o=0;i.child("pending").on("value",function(a){var s=a.val(),r=s[n.hostId][n.eventId];e.info(s),e.info(s[n.hostId]),e.info(s[n.hostId][n.eventId]);for(invitation in s)o++;e.info("total pending invitations: "+o),e.info(t),t&&i.child("attending").child(n.hostId).child(n.eventId).set(r,function(n){n&&e.info(n)})})},t()}function GuestEventController(e){e.info("into the GuestEventController")}function HostEventController(e,n,t,i){function o(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function s(e,n){return(a(n)-a(e))/6e4}function r(){var e=new Date;e.setHours(e.getHours()+Math.round(e.getMinutes()/60)),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),c.tempTime.start=e,c.tempTime.end=e,c.tempTime.duration=s(c.tempTime.start,c.tempTime.end)}function l(){angular.isDefined(c.tempEvent.eventTimes.start)&&(c.tempTime.start=o(c.tempEvent.eventTimes.start),c.tempTime.end=o(c.tempEvent.eventTimes.end))}function u(){f.loadAnEventProgressively(n.uid,n.eventId).then(function(e){c.tempEvent=e,l()})["catch"](function(n){e("the error is: "+n)}),c.activeSection=parseInt(n.section),r()}var c=this,d=i,f=t;c.activeSection=1,c.tempTime={start:"",end:"",duration:""},c.progressBar=39,c.tempEvent={},c.formatDuration=function(){c.tempTime.duration=s(c.tempTime.start,c.tempTime.end),e.info(c.tempTime.duration);var n=Math.floor(c.tempTime.duration/60),t=c.tempTime.duration%60,i=Math.round(t/15)/4;return e.info(n+" "+t+" "+i),n+i+" h"},c.settingTempStart=function(){c.tempTime.end=c.tempTime.start},c.settingTempEnd=function(){c.tempTime.start>c.tempTime.end&&(c.tempTime.start=c.tempTime.end),c.tempTime.duration=s(c.tempTime.start,c.tempTime.end)},c.backToUserEvents=function(){d.redirectTo("/userEvents",n.uid)},c.sectionBack=function(){targetSection=c.activeSection-1,d.redirectTo("/event/host",n.eventId,n.uid,targetSection)},c.sectionForward=function(){targetSection=c.activeSection+1,d.redirectTo("/event/host",n.eventId,n.uid,targetSection)},u()}function LandingPageController(e,n,t,o,a){function s(e){return btoa(e)}function r(e){return Date.parse(e)}function l(i,o){var a=i+"/"+d.uid+"/"+d.token;n.info("redirecting to: "+a),t.path(a),e.$apply()}var u=this,c="https://meetupplanner.firebaseio.com/",d={};u.showRequirnments=!1,u.validNewName={valid:!1,style:{color:""}},u.validNewEmail={valid:!1,style:{color:""}},u.securePassword={secure:!1,style:{color:""}},u.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},u.message="testing",u.validUserEmail={valid:!1,style:{color:""}},u.validUserPassword={valid:!1,style:{color:""}},u.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},u.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},u.displayPassReqs=function(){u.newName&&u.newEmail?u.showRequirnments=!0:u.showRequirnments=!1},u.checkNewName=function(){u.newName&&(u.newName.length>0?(u.validNewName.valid=!0,u.validNewName.style={color:"green"}):(u.validNewName.valid=!1,u.validNewName.style={color:"red"})),u.openCreateUserButton()},u.checkNewEmail=function(){if(u.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.newEmail)?(u.validNewEmail.valid=!0,u.validNewEmail.style={color:"green"}):(u.validNewEmail.valid=!1,u.validNewEmail.style={color:"red"})}u.openCreateUserButton()},u.checkUserEmail=function(){if(u.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.userEmail)?(u.validUserEmail.valid=!0,u.validUserEmail.style={color:"green"}):(u.validUserEmail.valid=!1,u.validUserEmail.style={color:"red"})}u.openUserLoginBtn()},u.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(u.newPassword){for(u.newPassword.length>15?(u.passwordRequirnments[0].style={color:"green"},u.passwordRequirnments[0].met=!0):(u.passwordRequirnments[0].style={color:"red"},u.passwordRequirnments[0].met=!1),u.newPassword.length<=100?(u.passwordRequirnments[1].style={color:"green"},u.passwordRequirnments[1].met=!0):(u.passwordRequirnments[1].style={color:"red"},u.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(u.newPassword)?(u.passwordRequirnments[i].style={color:"green"},u.passwordRequirnments[i].met=!0):(u.passwordRequirnments[i].style={color:"red"},u.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(u.newPassword)?(u.passwordRequirnments[6].style={color:"green"},u.passwordRequirnments[6].met=!0):(u.passwordRequirnments[6].style={color:"red"},u.passwordRequirnments[6].met=!1),u.passwordRequirnments[0].met&&u.passwordRequirnments[1].met&&u.passwordRequirnments[2].met&&u.passwordRequirnments[3].met&&u.passwordRequirnments[4].met&&u.passwordRequirnments[5].met&&u.passwordRequirnments[6].met?u.securePassword.secure=!0:u.securePassword.secure=!1,u.securePassword.secure?u.securePassword.style={color:"green"}:u.securePassword.style={color:"red"}}u.openCreateUserButton()},u.checkUserPasswords=function(){u.userPassword&&(u.userPassword.length>15?(u.validUserPassword.style={color:"green"},u.validUserPassword.valid=!0):(u.validUserPassword.style={color:"red"},u.validUserPassword.valid=!1)),u.openUserLoginBtn()},u.openCreateUserButton=function(){u.validNewName.valid&&u.validNewEmail.valid&&u.securePassword.secure?(u.unlockCreateUserBtn["class"]="btn btn-success",u.unlockCreateUserBtn.usable=!0):(u.unlockCreateUserBtn["class"]="btn btn-warning",u.unlockCreateUserBtn.usable=!1)},u.openUserLoginBtn=function(){u.validUserEmail.valid&&u.validUserPassword.valid?(u.unclockUserLoginBtn["class"]="btn btn-success",u.unclockUserLoginBtn.usable=!0):(u.unclockUserLoginBtn["class"]="btn btn-warning",u.unclockUserLoginBtn.usable=!1)},u.update=function(){u.newName=o.find("#newName")[0].value,u.newEmail=o.find("#newEmail")[0].value,u.userEmail=o.find("#userEmail")[0].value,u.checkNewName(),u.checkNewEmail(),u.checkUserEmail()},u.createNewUser=function(){if(n.info("Creating a new user account now!"),u.unlockCreateUserBtn.usable){var e=new Firebase(c);e.createUser({email:u.newEmail,password:u.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),d=i;var o=e.child("Users/"+i.uid),a=new Date;o.set({bio:{name:u.newName,email:u.newEmail},events:{pending:{updated:r(a)},hosting:{updated:r(a)},attending:{updated:r(a)},completed:{updated:r(a)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(s(u.newEmail)).set(d.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",d)}})}},u.loginRegisteredUser=function(){if(u.unclockUserLoginBtn.usable){var t=new Firebase(c);t.authWithPassword({email:u.userEmail,password:u.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),d=i,l("/userInformation",d),e.$apply())})}},u.alertMe=function(){alert("this is working! an alert!")},u.onResizeFunction=function(){var e=angular.element(".inputText");a.outerWidth>a.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in o&&o.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(o.body)},!1),angular.element(a).bind("resize",function(){u.onResizeFunction()}),angular.element(o).ready(function(){a.outerWidth<600&&u.onResizeFunction()}),u.master={},u.update=function(e){u.master=angular.copy(e)},u.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),u.user=angular.copy(u.master)},u.reset()}function MainController(e,n,t,i){function o(){angular.element(t);t.css("hight",i.outerHeight)}var a=this,s="https://meetupplanner.firebaseio.com/",r=new Firebase(s);a.logout=function(){alert("logging you out!"),r.unauth(),n.path("/")},angular.element(t).ready(function(){o()})}function NewUserSignUpController(e,n,t,o,a,s){function r(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var u=t;l.checkNewName=function(){var e=[],n=u.required(l.inputs.newName),t=u.minNameLength(l.inputs.newName);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.name=e.join(", "):l.errors.name="",r()},l.checkNewEmail=function(){var e=[],n=u.required(l.inputs.newEmail),t=u.email(l.inputs.newEmail);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.email=e.join(", "):l.errors.email="",r()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],n=u.required(l.inputs.newPassword),t=[u.minPassLength(l.inputs.newPassword),u.maxPassLength(l.inputs.newPassword),u.atLeastOneLowercase(l.inputs.newPassword),u.atLeastOneUppercase(l.inputs.newPassword),u.atLeastOneNumber(l.inputs.newPassword),u.atLeastOneSymbol(l.inputs.newPassword),u.illegalCharacter(l.inputs.newPassword)];angular.isDefined(n)&&e.push(n),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var o=!1;for(i=0;i<7;i++)t[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},o=!0);l.errors.password=o,r()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=a;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var t=o,i=s;t.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(o){i.loadPrimaries(l.inputs.newEmail,l.inputs.newName,o.uid),t.addNewUserToDatabase(o.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){n.info(i),t.addNewUserToRegUsersList(o.uid,l.inputs.newEmail).then(function(t){e.redirectTo("/userInformation",o.uid),n.info(t)})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})}}}function RegUserLoginController(e,n,t,i,o){function a(){angular.isDefined(s.inputs.email)&&""!==s.inputs.email&&angular.isDefined(s.inputs.password)&&""!==s.inputs.password?(s.inputs.requiredFieldsDefined=!0,s.unclockUserLoginBtn["class"]="btn btn-success",s.unclockUserLoginBtn.message="Login",s.unclockUserLoginBtn.usable=!0):(s.inputs.requiredFieldsDefined=!1,s.unclockUserLoginBtn["class"]="btn btn-warning",s.unclockUserLoginBtn.message="Need Email & Pass",s.unclockUserLoginBtn.usable=!1)}var s=this;s.inputs={email:"",password:"",requiredFieldsDefined:!1},s.errors={message:"",passesAllTests:!0},s.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning",message:"Need Email & Pass"},s.update=function(){s.inputs.email=n.find("#userEmail")[0].value,s.inputs.password=n.find("#userPassword")[0].value,a()},s.loginRegisteredUser=function(){var n=i,a=t,r=o;a.LoginRegisteredUser(s.inputs.email,s.inputs.password).then(function(e){s.errors.passesAllTests=!0,r.setPrimariesLocally(s.inputs.email,s.inputs.name,e.uid)}).then(function(){e.info("uid is "+r.getUIDLocally()),a.getUserBio(r.getUIDLocally()).then(function(n){r.updateBioLocally(n),a.getUserEvents(r.getUIDLocally()).then(function(e){r.updateAllUserEventsLocally(e)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)}),n.redirectTo("/userInformation",r.getUIDLocally())})["catch"](function(e){s.errors.message=e,s.errors.passesAllTests=!1})},s.clicked=function(){var e=t;e.logUserOut()}}function topMenuController(e,n,t,i,o){function a(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),r.loggedIn=!0):(n.info("User is logged out"),r.loggedIn=!1)}function s(e,i){var o=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+o),t.path(o)}var r=this,l="https://meetupplanner.firebaseio.com/",u=new Firebase(l);r.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(o).bind("resize",function(){r.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){o.outerWidth<600&&(r.onResizeFunction(),e.$apply())}),r.logout=function(){n.info("logging out!"),r.loggedIn=!1,u.unauth(),s("/",{uid:"",token:""})},r.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:r.navbarUserEmail,password:r.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),s("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},r.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",o.outerWidth-26+"px")},u.onAuth(a)}function UserEventsController(e,n,t,i){function o(e){return Date.parse(e)}function a(){var e=0;for(event in u.events.hosting)e++;return e}function s(){var e=new Date,n=10*o(e)+a();return n}function r(){Object.keys(u.events).forEach(function(e){Object.keys(u.events[e]).forEach(function(n){var t=0;angular.isObject(u.events[e][n])&&t++,t>0?u.sectionAvailable[e]=!0:u.sectionAvailable[e]=!1})})}function l(){c.setUIDLocally(n.uid),c.loadBio(n.uid).then(function(e){u.userBio=e})["catch"](),u.events=c.getAllUserEventsLocally(),c.getRemoteEventsForLocal().then(function(e){u.events=c.getAllUserEventsLocally()}).then(function(){r()})}var u=this,c=t;u.showDecline=!1,u.userBio={},u.events={},u.sectionAvailable={pending:!1,attending:!1,hosting:!1,completed:!1},u.errors={},u.createNewEvent=function(){var n=s(),t=i;c.createNewEvent(n).then(function(n){e.info(n)}).then(function(){c.cleanDBEventsCategory("hosting")})["catch"](function(n){e.info(n)}),t.redirectTo("/event",n,c.getUIDLocally(),c.getUIDLocally())},l()}function UserInformationController(e,n,t,i,o){function a(e){return new Date(parseInt(e))}function s(e){return Date.parse(e)}function r(){u.loadBio(t.uid).then(function(e){l.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(l.tempBirthday=a(e.dob))})}var l=this,u=i;l.user={},l.tempBirthday,l.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},l.checkValues=function(){l.view.isData=!0,!angular.isUndefined(l.user.company)&&""!==l.user.company||!angular.isUndefined(l.user.title)&&""!==l.user.title||!angular.isUndefined(l.user.dob)&&""!==l.user.dob?(l.view.dataToSave=!0,l.view.proceedBtn="btn btn-success",l.view.btnMssg="Save & Continue"):(l.view.dataToSave=!1,l.view.proceedBtn="btn btn-primary",l.view.btnMssg="Move On...")},l.updateDOB=function(){l.user.dob=s(l.tempBirthday),l.checkValues()},l.saveAndMoveOn=function(){var n=o,i=u.getUIDLocally();0!==l.tempBirthday&&l.updateDOB(),(""==i||angular.isUndefined(i))&&u.setUIDLocally(t.uid),l.view.isData&&(e.info("saving the new data"),u.updateBioLocally(l.user)),n.redirectTo("/userEvents",l.user.uid)},r()}function authService(e,n){function t(){var e=n;e.checkLoginStatus().then(function(e){return e})["catch"](function(e){return e})}var i={isLoggedIn:t};return i}function backendServices(e,n,t){function i(e){return btoa(e)}function o(e){return atob(e)}function a(e){return new Date(parseInt(e))}function s(e){return Date.parse(e)}function r(e,t){var i=new Firebase(I);return n(function(n,o){i.createUser({email:e,password:t},function(e,t){e?o("Error creating user: "+e):n(t)})})}function l(e,t,i){var o=new Firebase(I),a=o.child("Users").child(e),r=new Date;return n(function(n,o){a.set({bio:{uid:e,name:t,email:i},events:{pending:{updated:s(r)},hosting:{updated:s(r)},attending:{updated:s(r)},completed:{updated:s(r)}}},function(e){e?o("Data could not be saved: "+e):n("Data saved successfully.")})})}function u(e,t){var o=new Firebase(I),a=i(t),s=o.child("Uids").child(a);return n(function(n,t){s.set(e,function(e){e?t("Data could not be saved. "+e):n("uid created sucessfully.")})})}function c(t,i){var o=new Firebase(I);return n(function(n,a){o.authWithPassword({email:t,password:i},function(t,i){t?a("Error Logging In: "+t):(e.info("Logged In successfully: "+i.uid),n(i))})})}function d(){var n=new Firebase(I);return new Promise(function(t,i){n.onAuth(function(n){n?(e.info("User "+n.uid+" is logged in with "+n.provider),t(!0)):(e.info("User is logged out"),t(!1))})})}function f(){var n=new Firebase(I);e.info("logging user out"),n.unauth()}function v(e){var t=new Firebase(I),i=e.uid,o=t.child("Users").child(i);return n(function(n,t){o.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user data uploaded successfully")})})}function m(e){var t=new Firebase(I),i=e.uid.toString(),o=t.child("Users").child(i).child("bio");return n(function(n,t){o.update(e,function(e){e?t("There was a problem updating that record: "+e):n("all user bio data uploaded successfully")})})}function g(){}function h(e){var t=new Firebase(I),i=t.child("Users").child(e).child("bio");return n(function(e,n){i.once("value",function(n){e(n.val())},function(e){e&&n(e)})})}function p(e,t){var i=new Firebase(I),o=t.id,a=i.child("Users").child(e).child("events").child("hosting").child(o);return n(function(e,n){a.set(t,function(t){t?n("There was an error: "+t):e("New event saved to DB successfully")})})}function w(e,t,i,o){var a=new Firebase(I),s=a.child("Users").child(o).child("events").child("hosting").child(i).child("guestList").child(t);return n(function(n,t){s.set({rsvpd:!1,status:"pending",name:e},function(e){e?t("There was an error: "+e):n("New event saved to DB successfully")})})}function b(e){var t=new Firebase(I),i=t.child("Users").child(e).child("events");return n(function(e,n){i.orderByKey().once("value",function(n){var t=n.val(),i={hosting:t.hosting,attending:t.attending,pending:t.pending,completed:t.completed};e(i)},function(e){e&&n(e)})})}function U(e,t){var i=new Firebase(I),o=i.child("Users").child(e).child("events").child("hosting").child(t);return n(function(e,n){o.once("value",function(n){var t=n.val();e(t)},function(e){e&&n(e)})})}function E(t){var i=new Firebase(I),o=i.child("Uids");return n(function(n,i){o.once("value",function(o){var a=o.val();Object.keys(a).forEach(function(o){e.info("from list: "+o+", matching to: "+t),o==t?n(a[o]):i("No user by that email")})})})}function y(e,t){var i=new Firebase(I),o=i.child("Users").child(e).child("events").child("hosting").child(t).child("guestList");return n(function(e,n){o.once("value",function(n){var t=n.val();e(t)},function(e){e&&n("There was an error getting the guest list: "+e)})})}function L(e,n,t){}function T(e,t){var i=new Firebase(I),o=i.child("Users").child(t).child("events").child(e).child("updated");return n(function(e,n){o.set(null,function(t){t?n("There was an error deleting update field: "+t):e("Deleted update successfully")})})}function D(e,t){var i=new Firebase(I),o=i.child("Users").child(t).child("events").child(e);return n(function(e,n){o.once("value",function(t){var i=t.val();angular.isDefined(i.updated)?e(!0):n(!1)},function(e){e&&n(e)})})}var I="https://meetupplanner.firebaseio.com/",A={utf8_to_b64:i,b64_to_utf8:o,unixTimeToDateTime:a,dateTimeToUnixTime:s,LoginRegisteredUser:c,checkLoginStatus:d,logUserOut:f,downloadUserData:g,getUserBio:h,getUserEvents:b,getAHostedEvent:U,getAnInvitedEvent:L,findGuestUID:E,getGuestListForEvent:y,createNewUser:r,addNewUserToDatabase:l,addNewUserToRegUsersList:u,uploadUserData:v,uploadUserBio:m,createHostedEvent:p,addGuestToHostGuestListonDB:w,deleteUpdateField:T,thereWasAnUpdateField:D};return A}function trafficValet(e,n){function t(t,i,o,a){angular.isDefined(i)?(t=t+"/"+i,angular.isDefined(o)&&(t=t+"/"+o,angular.isDefined(a)&&(t=t+"/"+a,e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)):(e.info("redirecting now to "+t),n.path(t))}function i(t,i,o,a){if(e.info("Traffic valet accessed"),e.info("eventId: "+t),e.info("hostId: "+i),e.info("userId: "+o),angular.isUndefined(a)&&(a=1),i===o){var s="/event/host/"+t+"/"+o+"/"+a;e.info(s),n.path(s)}else{var s="/event/guest/"+t+"/"+o+"/"+i;e.info(s),n.path(s)}}var o={redirectTo:t,eventRoute:i};return o}function userData(e,n,t){function i(e){return btoa(e)}function o(){return""!==_.bio.uid&&""!==_.bio.name&&""!==_.bio.email}function a(n,t){return e.info("checking if the event exits"),!!angular.isDefined(_.events[n][t])}function s(n,t){return e.info("current user bio is:"),e.info(_.bio),angular.isDefined(_.bio.email)&&(e.info("email is defined"),""!=_.bio.email)?n==_.bio.email?(e.info("email matches"),!0):(e.info("email does not match"),!1):(e.info("current event is:"),e.info(_.events.hosting[t]),_.events.hosting[t].host.email==n?(e.info("event host email matches"),!0):(e.info("event host email DOESN'T not match"),!1))}function r(n,t){return e.info(_.events.hosting[t]),angular.isDefined(_.events.hosting[t].guestList)?(e.info("there is a guest list"),refEmail=i(n),Object.keys(_.events.hosting[t].guestList).forEach(function(n){return refEmail==n?(e.info("an email match was found, this guest has been invited already"),!0):(e.info("no email match found, ok to invite guest"),!1)}),void 0):(e.info("no guestlist"),!1)}function l(e){Object.keys(_.events[e]).forEach(function(n){angular.isObject(_.events[e][n])||delete _.events[e][n]})}function u(){return _.bio.uid}function c(){return _.bio.name}function d(){return _.bio.email}function f(){return _.bio.company}function v(){return _.bio.title}function m(){return _.bio.dob}function g(){return{uid:_.bio.uid,name:_.bio.name,email:_.bio.email,company:_.bio.company,title:_.bio.title,dob:_.bio.dob}}function h(e,n){return _.events[e][n]}function p(e){return _.events[e]}function w(){return _.events}function b(e){_.bio.uid=e}function U(e){_.bio.name=e}function E(e){_.bio.email=e}function y(e){_.bio.company=e}function L(e){_.bio.title=e}function T(e){_.bio.dob=e}function D(e,n,t){angular.isDefined(e)&&E(e),angular.isDefined(n)&&c(n),angular.isDefined(t)&&b(t)}function I(e,n){var t=n.id;l(e),_.events[e][t]=n}function A(e){_.events=e}function $(e){U(e.name),E(e.email),y(e.company),L(e.title),T(e.dob),F()}function C(e,o,a,s,r){var l=t;return n(function(n,t){angular.isDefined(o)&&(a=i(o)),l.addGuestToHostGuestListonDB(e,a,s,r).then(function(e){n(e)})["catch"](function(e){t(e)})})}function k(e){var o=t;return n(function(n,t){guestEmail=i(e),o.findGuestUID(guestEmail).then(function(e){n(e)})["catch"](function(e){t(e)})})}function B(e,n){delete _.events[e][n.id]}function R(){var e=t;e.downloadUserData().then(function(e){_=e})}function S(e){var i=t;return n(function(n,t){i.getUserBio(e).then(function(e){n(e)})["catch"](function(e){t("There was an error reading the user bio: "+e)})})}function N(){var e=t;return n(function(n,t){e.getUserEvents(u()).then(function(e){Object.keys(e).forEach(function(n){Object.keys(e[n]).forEach(function(t){I(n,e[n][t])})}),n(e)})["catch"](function(e){t("There was an error reading the user events: "+e)})})}function P(i){var o=t;return n(function(n,t){o.getAHostedEvent(u(),i).then(function(t){e.info(t),n(t)})["catch"](function(e){t("There was an error reading the user event: "+e)})})}function G(){var e=t;e.uploadUserData(_)}function F(){var e=t;e.uploadUserBio(_.bio)}function q(){}function z(i){var o=t;return n(function(n,t){o.thereWasAnUpdateField(i,u()).then(function(n){o.deleteUpdateField(i,u()).then(function(n){e.info(n)})["catch"](function(n){e.info(n)})})["catch"](function(n){e.info(n)})})}function j(e,i){var o=t;return n(function(n,t){o.getGuestListForEvent(e,i).then(function(e){n(e)})["catch"](function(e){t(e)})})}function M(e){return n(function(n,t){o()?n(g()):S(e).then(function(e){n(e)})["catch"](function(e){t(e)})})}function O(e,t){return b(e),n(function(e,n){P(t).then(function(n){e(n)})["catch"](),a("hosting",t)&&e(h("hosting",t))})}function x(e){var t={};return n(function(e,n){N().then(function(n){e(n)}),t=p(type),e(t)})}function H(e){var i=t,o={};return o={id:e,name:"",type:"",host:{name:_.bio.name,uid:_.bio.uid,email:_.bio.email},message:"",eventTimes:{start:0,end:0},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0},guestList:{}},I("hosting",o),n(function(e,n){i.createHostedEvent(u(),o).then(function(n){e(n)})["catch"](function(e){n(e)})})}function V(e){return n(function(e,n){})}var _={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{
hosting:{},pending:{},attending:{},completed:{}}},W={bioPrimariesAreCompleteLocally:o,eventExistsLocally:a,thisIsTheHostEmail:s,guestInvitedAlready:r,cleanEvents:l,getUIDLocally:u,getNameLocally:c,getEmailLocally:d,getCompanyLocally:f,getTitleLocally:v,getDOBLocally:m,getFullBioLocally:g,getOneUserEventLocally:h,getUserEventsLocally:p,getAllUserEventsLocally:w,setUIDLocally:b,setNameLocally:U,setEmailLocally:E,setCompanyLocally:y,setTitleLocally:L,setDOBLocally:T,setPrimariesLocally:D,updateUserEventsLocally:I,updateAllUserEventsLocally:A,updateBioLocally:$,addGuestToHostGuestList:C,removeUserEventsLocally:B,getFullRemoteDBforLocal:R,getRemoteBioForLocal:S,getRemoteEventsForLocal:N,getOneRemoteEventForLocal:P,setFullRemoteDBfromLocal:G,setRemoteBioFromLocal:F,setRemoteEventsFromLocal:q,cleanDBEventsCategory:z,getUserIdForGuest:k,getEventGuestList:j,loadBio:M,loadEventsProgressively:x,loadAnEventProgressively:O,createNewEvent:H,updatePendingEventsListForGuest:V};return W}function validation(e){function n(e){return angular.isUndefined(e)?"This is a required field":void 0}function t(e){return angular.isDefined(e)&&e.length<f?"Name should be at least "+f+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<v)}function o(e){return angular.isDefined(e)&&!(e.length>m)}function a(e){if(angular.isDefined(e)){var n=new RegExp("[!@#$%^&*]");return!!n.test(e)}return!1}function s(e){if(angular.isDefined(e)){var n=new RegExp("[0-9]","");return!!n.test(e)}return!1}function r(e){if(angular.isDefined(e)){var n=new RegExp("[a-z]","");return!!n.test(e)}return!1}function l(e){if(angular.isDefined(e)){var n=new RegExp("[A-Z]","");return!!n.test(e)}return!1}function u(e){if(angular.isDefined(e)){var n=new RegExp("[^A-z0-9!@#$%^&*]","");return!n.test(e)}return!1}function c(e){var n=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return angular.isDefined(e)&&!n.test(e)?"Not a valid email":void 0}function d(e){}var f=3,v=16,m=100,g={required:n,minNameLength:t,minPassLength:i,maxPassLength:o,atLeastOneSymbol:a,atLeastOneNumber:s,atLeastOneLowercase:r,atLeastOneUppercase:l,illegalCharacter:u,email:c,dateOfBirth:d};return g}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/host/:eventId/:uid/:section",{templateUrl:"views/hostEvent.htm",controller:"HostEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/guest/:eventId/:uid/:hostId",{templateUrl:"views/guestEvent.htm",controller:"GuestEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:section?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService,eventViewChanger:eventViewChanger}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function eventViewChanger(e,n){e.eventRoute(n.current.params.eventId,n.current.params.hostId,n.current.params.uid,n.current.params.section)}function addAGuest(){function e(e,n,t,i){}function n(e,n,t,i){function o(){s.validations.name.valid&&s.validations.email.valid?(e.info("ready to submit"),s.invitationValidForSubmission=!0,s.submissionButton["class"]["btn-warning"]=!1,s.submissionButton["class"]["btn-success"]=!0,s.submissionButton.message="Invite Guest"):(e.info("not ready to submit"),s.invitationValidForSubmission=!1,s.submissionButton["class"]["btn-warning"]=!0,s.submissionButton["class"]["btn-success"]=!1,s.submissionButton.message="Address Invitation...")}function a(){angular.isUndefined(l.getOneUserEventLocally("hosting",n.eventId))?l.getRemoteEventsForLocal().then(function(){u=l.getOneUserEventLocally("hosting",n.eventId)}):u=l.getOneUserEventLocally("hosting",n.eventId)}var s=this,r=t,l=i,u={};s.tempGuest={name:"",email:""},s.validations={name:{addressed:!1,valid:!1,errorMessage:""},email:{addressed:!1,valid:!1,errorMessage:""},invitation:{isTheHost:!1,alreadyInvited:!1,errorMessage:""}},s.invitationValidForSubmission=!1,s.submissionButton={style:{color:"red"},"class":{"col-xs-12":!0,"col-sm-12":!0,btn:!0,"btn-warning":!0,"btn-success":!1},message:"Address Invitation..."},s.validateName=function(){s.validations.name.addressed=!0,angular.isDefined(s.tempGuest.name)&&""!=s.tempGuest.name?(s.validations.name.valid=!0,s.validations.name.errorMessage=""):(s.validations.name.valid=!1,s.validations.name.errorMessage="This guest needs a name"),o()},s.validateEmail=function(){s.validations.email.addressed=!0,angular.isDefined(s.tempGuest.email)&&""!=s.tempGuest.email?angular.isUndefined(r.email(s.tempGuest.email))?(s.validations.email.valid=!0,s.validations.email.errorMessage=""):(s.validations.email.valid=!1,s.validations.email.errorMessage=r.email(s.tempGuest.email),e.info(s.validations.email.errorMessage)):(s.validations.email.valid=!1,s.validations.email.errorMessage="Not a valid email"),o()},s.showNameError=function(){return!(s.validations.name.valid||!s.validations.name.addressed)},s.showEmailError=function(){return!(s.validations.email.valid||!s.validations.email.addressed)},s.showInvitationError=function(){return!(!s.validations.invitation.isTheHost&&!s.validations.invitation.alreadyInvited)},s.submitGuestInvitation=function(){if(e.info("submitting the invitation"),s.invitationValidForSubmission){if(l.thisIsTheHostEmail(s.tempGuest.email,n.eventId))return s.validations.invitation.isTheHost=!0,s.validations.invitation.errorMessage="No need to invite the host",0;s.validations.invitation.isTheHost=!1,l.getUserIdForGuest(s.tempGuest.email).then(function(n){return e.info("found user with that email: "+n),n}).then(function(e){l.addGuestToHostGuestList(s.tempGuest.name,void 0,e,n.eventId,n.uid).then()["catch"]()}).then(function(){l.updatePendingEventsListForUser()}).then(function(){})["catch"](function(t){e.info(t),l.addGuestToHostGuestList(s.tempGuest.name,s.tempGuest.email,void 0,n.eventId,n.uid).then(function(n){e.info("got this result: "+n)}).then(function(){l.updatePendingEventsListForGuest(n.eventId)}).then(function(){})["catch"](function(n){e.info("got this result: "+positiveResult)})})}},a()}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/addAGuest.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","$routeParams","validation","userData"],t}function hostedEventsList(){function e(e,n,t,i){}function n(e,n){function t(e){return new Date(parseInt(e))}function i(e){var n=0;return o.guestsAreInvited=!0,Object.keys[e].forEach(function(e){n++}),n}var o=this,a=n;o.guestsAreInvited=!1,o.formatDate=function(n){return e.info("got thist time: "+n),t(n)},o.guestsAttending=function(e){return angular.isDefined(e)&&angular.isDefined(e.attending)?i(e.attending):0},o.guestsInvited=function(e){function n(){return t.attending+t.pending+t.declined}if(angular.isDefined(e)){var t={attending:0,pending:0,declined:0};return angular.isDefined(e.attending)&&(t.attending=i(e.attending)),angular.isDefined(e.pending)&&(t.pending=i(e.pending)),angular.isDefined(e.declined)&&(t.declined=i(e.declined)),n()}return 0},o.percentageAttending=function(e){return angular.isDefined(e)?guestsAttending(guestlist)/guestsInvited(e):0},o.eventClicked=function(n){e.info("redirecting to: /event/"+n+"/"+o.hostedEvents[n].host.uid+"/"+o.userId),a.redirectTo("/event",n,o.hostedEvents[n].host.uid,o.userId)}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/hostedEventsList.directive.htm",replace:!0,scope:{hostedEvents:"=",userId:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","trafficValet"],t}function progressBar(){return{restrict:"E",scope:{curVal:"@",maxVal:"@"},template:"<div class='progress-bar'><div class='progress-bar-bar'>testing</div></div>",link:function(e,n,t){function i(){var t=0;e.maxVal&&(t=Math.min(e.curVal,e.maxVal)/e.maxVal*n.find(".progress-bar").width()),n.find(".progress-bar-bar").css("width",t)}e.$watch("curVal",i),e.$watch("maxVal",i)}}}function hostedGuestList(){function e(e,n,t,i){e.$watch("guestList",function(){e.$apply})}function n(e,n,t){function i(){return angular.isDefined(a.guestList)&&""!=a.guestList?(a.isAGuestList=!0,!0):(a.isAGuestList=!1,!1)}function o(){var o=t;i()||(e.info("going after the list"),o.getEventGuestList(n.uid,n.eventId).then(function(n){e.info("got the list"),e.info(n),a.guestList=n,angular.isObject(n)&&(a.isAGuestList=!0)})["catch"](function(n){e.info("There was an error: "+n)}))}var a=this;a.isAGuestList=!1,o()}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/hostedGuestList.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","$routeParams","userData"],t}function toolBar(){function e(e,n,t,i){}function n(e,n){var t=this,i=n;i.checkLoginStatus().then(function(e){t.loggedIn=e})["catch"](),t.clicked=function(){e.info("button clicked")}}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log","backendServices"],t}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],eventViewChanger.$inject=["trafficValet","$route"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$log","$routeParams"],angular.module("meetUpEventApp").controller("GuestEventController",GuestEventController),GuestEventController.$inject=["$log"],angular.module("meetUpEventApp").controller("HostEventController",HostEventController),HostEventController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","backendServices"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("addAGuest",addAGuest),angular.module("meetUpEventApp").directive("hostedEventsList",hostedEventsList),angular.module("meetUpEventApp").directive("progressBar",progressBar),angular.module("meetUpEventApp").directive("hostedGuestList",hostedGuestList),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuRXZlbnQuY29udHJvbGxlci5qcyIsIkd1ZXN0RXZlbnQuY29udHJvbGxlci5qcyIsIkhvc3RFdmVudC5jb250cm9sbGVyLmpzIiwiTGFuZGluZ1BhZ2UuY29udHJvbGxlci5qcyIsIk1haW4uY29udHJvbGxlci5qcyIsIk5ld1VzZXJTaWduVXAuY29udHJvbGxlci5qcyIsIlJlZ1VzZXJMb2dpbi5jb250cm9sbGVyLmpzIiwiVG9wTWVudS5jb250cm9sbGVyLmpzIiwiVXNlckV2ZW50cy5jb250cm9sbGVyLmpzIiwiVXNlckluZm9ybWF0aW9uLmNvbnRyb2xsZXIuanMiLCJBdXRoU2VydmljZS5mYWN0b3J5LmpzIiwiQmFja2VuZFNlcnZpY2VzLmZhY3RvcnkuanMiLCJUcmFmZmljVmFsZXQuZmFjdG9yeS5qcyIsIlVzZXJEYXRhLmZhY3RvcnkuanMiLCJWYWxpZGF0aW9uLmZhY3RvcnkuanMiLCJyb3V0ZS1jb25maWcuanMiLCJhcHAuanMiLCJBZGRBR3Vlc3QuZGlyZWN0aXZlLmpzIiwiSG9zdGVkRXZlbnRzTGlzdC5kaXJlY3RpdmUuanMiLCJIb3N0ZWRFdmVudHNQcm9ncmVzc0Jhci5kaXJlY3RpdmUuanMiLCJIb3N0ZWRHdWVzdExpc3QuZGlyZWN0aXZlLmpzIiwiVG9vbEJhci5kaXJlY3RpdmUuanMiLCJhcHAubW9kdWxlLmpzIl0sIm5hbWVzIjpbIkFuRXZlbnRDb250cm9sbGVyIiwiJGxvZyIsIiRyb3V0ZVBhcmFtcyIsImluaXQiLCJ2bSIsInRlbXBEYXRlVGltZSIsInN0YXJ0IiwiZW5kIiwibmV3R3Vlc3QiLCJuYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwidmFsaWQiLCJzdHlsZSIsImNvbG9yIiwic2hvd0lmSG9zdCIsImhpZGVJZkF0dGVuZGluZyIsIm1hbmFnZVNlY3Rpb25zIiwxLCJhY3RpdmUiLCJjb21wbGV0ZSIsImJhY2tncm91bmQtY29sb3IiLDIsMywiY2hlY2tGb3JIb3N0IiwiY2hlY2tJZkd1ZXN0SXNBdHRlbmRpbmciLCJvcGVuQWxsU2VjdGlvbnMiLCJ1dGY4X3RvX2I2NCIsInN0ciIsImJ0b2EiLCJiNjRfdG9fdXRmOCIsImF0b2IiLCJkYXRlVGltZVRvVW5peFRpbWUiLCJkYXRlVGltZSIsIkRhdGUiLCJwYXJzZSIsImNsZWFuTmV3R3Vlc3RWYXJpYWJsZSIsImludml0ZUFSZWdpc3RlcmVkVXNlciIsInVpZCIsImluZm8iLCJyZWYiLCJjaGlsZCIsImV2ZW50SWQiLCJzZXQiLCJpZCIsImV2ZW50VGltZXMiLCJldmVudCIsImhvc3QiLCJlcnJvciIsIm9uY2UiLCJzbmFwc2hvdCIsImNoZWNrRm9yUGxhY2Vob2xkZXIiLCJ2YWwiLCJ1cGRhdGVkIiwicmVtb3ZlIiwiZXJyb3JPYmplY3QiLCJjb2RlIiwiaW52aXRlQW5VbnJlZ2lzdGVyZWRVc2VyIiwidXNlcktleSIsImF1dGhEYXRhIiwiZ2V0QXV0aCIsImhvc3RJZCIsInVzZXJFdmVudHMiLCJvbiIsImFsbEd1ZXN0cyIsImF0dGVuZGluZyIsInRoaXMiLCJ0ZW1wVGltZSIsInVzZXJJc0hvc3QiLCJzZXRUZW1wVGltZSIsImVuZHBvaW50IiwidW5peFRpbWVUb0RhdGVUaW1lIiwidW5peFRpbWUiLCJwYXJzZUludCIsInN1Ym1pdCIsImJhY2tUb1VzZXJFdmVudHMiLCIkbG9jYXRpb24iLCJwYXRoIiwidG9rZW4iLCJldmVudFJlZGlyZWN0IiwiZXZlbnRJRCIsImZ1bGxQYXRoIiwiY2hhbmdlU2VjdGlvbiIsInRhcmdldFNlY3Rpb24iLCJpIiwic2F2ZUV2ZW50VGltZSIsInRhcmdldCIsImd1ZXN0c0FyZUludml0ZWQiLCJndWVzdExpc3QiLCJ2YWxpZGF0ZUd1ZXN0RW1haWwiLCJjb25zdHJhaW50IiwiUmVnRXhwIiwidGVzdCIsImlzU2VjdGlvbkNvbXBsZXRlIiwicmVxdWlyZWRJbnB1dHMiLCJzYXZlQW5kQWR2YW5jZSIsIiRzYXZlIiwidGhlbiIsImFkZEd1ZXN0VG9Ib3N0c0xpc3QiLCJyZWdpc3RlcmVkVXNlcnMiLCJzdGF0dXMiLCJzYXZlRXZlbnQiLCJndWVzdFdpbGxBdHRlbmQiLCJyZXNwb25zZSIsImN1cnJlbnRVc2VyIiwidG90YWxQZW5kaW5nSW52aXRhdGlvbnMiLCJyZW1vdmVBdHRlbmRpbmdVcGRhdGVkIiwiaW52aXRhdGlvbnMiLCJ0aGlzSW52aXRhdGlvbiIsImludml0YXRpb24iLCJhdHRlbmRpbmdMaXN0IiwiY3VycmVudERhdGUiLCJ1cGRhdGUiLCJ1cGRhdGVVcGRhdGVkUGFyYW0iLCJhZGRJbnZpdGF0aW9uVG9BdHRlbmRpbmciLCJHdWVzdEV2ZW50Q29udHJvbGxlciIsIkhvc3RFdmVudENvbnRyb2xsZXIiLCJ1c2VyRGF0YSIsInRyYWZmaWNWYWxldCIsImNhbGN1bGF0ZUR1cmF0aW9uIiwiaW5pdEV2ZW50VGltZXMiLCJub3ciLCJzZXRIb3VycyIsImdldEhvdXJzIiwiTWF0aCIsInJvdW5kIiwiZ2V0TWludXRlcyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwic2V0TWlsbGlzZWNvbmRzIiwiZHVyYXRpb24iLCJ1cGRhdGVUZW1wVGltZUZyb21Nb2RlbCIsImFuZ3VsYXIiLCJpc0RlZmluZWQiLCJ0ZW1wRXZlbnQiLCJ0aGlzRXZlbnRNYW5hZ2VyIiwibG9hZEFuRXZlbnRQcm9ncmVzc2l2ZWx5IiwidGhlRXZlbnQiLCJhY3RpdmVTZWN0aW9uIiwic2VjdGlvbiIsImhvc3RlZEV2ZW50U2hlcnBhIiwicHJvZ3Jlc3NCYXIiLCJmb3JtYXREdXJhdGlvbiIsImhvdXJzIiwiZmxvb3IiLCJtaW4iLCJmcmFjdGlvbiIsInNldHRpbmdUZW1wU3RhcnQiLCJzZXR0aW5nVGVtcEVuZCIsInJlZGlyZWN0VG8iLCJzZWN0aW9uQmFjayIsInNlY3Rpb25Gb3J3YXJkIiwiTGFuZGluZ1BhZ2VDb250cm9sbGVyIiwiJHNjb3BlIiwiJGRvY3VtZW50IiwiJHdpbmRvdyIsInJlZGlyZWN0IiwiY3VycmVudFVzZXJEYXRhIiwiJGFwcGx5IiwiZmJVUkwiLCJzaG93UmVxdWlybm1lbnRzIiwidmFsaWROZXdOYW1lIiwidmFsaWROZXdFbWFpbCIsInNlY3VyZVBhc3N3b3JkIiwic2VjdXJlIiwidW5sb2NrQ3JlYXRlVXNlckJ0biIsInVzYWJsZSIsImNsYXNzIiwibWVzc2FnZSIsInZhbGlkVXNlckVtYWlsIiwidmFsaWRVc2VyUGFzc3dvcmQiLCJ1bmNsb2NrVXNlckxvZ2luQnRuIiwicGFzc3dvcmRSZXF1aXJubWVudHMiLDAsIm1ldCIsNCw1LDYsImRpc3BsYXlQYXNzUmVxcyIsIm5ld05hbWUiLCJuZXdFbWFpbCIsImNoZWNrTmV3TmFtZSIsImxlbmd0aCIsIm9wZW5DcmVhdGVVc2VyQnV0dG9uIiwiY2hlY2tOZXdFbWFpbCIsImNoZWNrVXNlckVtYWlsIiwidXNlckVtYWlsIiwib3BlblVzZXJMb2dpbkJ0biIsImNoZWNrTmV3UGFzc3dvcmRzIiwiY29uc3RyYWludHMiLCJuZXdQYXNzd29yZCIsImNoZWNrVXNlclBhc3N3b3JkcyIsInVzZXJQYXNzd29yZCIsImZpbmQiLCJ2YWx1ZSIsImNyZWF0ZU5ld1VzZXIiLCJGaXJlYmFzZSIsImNyZWF0ZVVzZXIiLCJwYXNzd29yZCIsInVzZXJzUmVmIiwiYmlvIiwiZXZlbnRzIiwicGVuZGluZyIsImhvc3RpbmciLCJjb21wbGV0ZWQiLCJsb2dpblJlZ2lzdGVyZWRVc2VyIiwiYXV0aFdpdGhQYXNzd29yZCIsImFsZXJ0TWUiLCJhbGVydCIsIm9uUmVzaXplRnVuY3Rpb24iLCJpbnB1dFRleHQiLCJlbGVtZW50Iiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiY3NzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkZhc3RDbGljayIsImF0dGFjaCIsImJvZHkiLCJiaW5kIiwicmVhZHkiLCJtYXN0ZXIiLCJ1c2VyIiwiY29weSIsInJlc2V0IiwiZm9ybSIsIiRzZXRQcmlzdGluZSIsIiRzZXRVbnRvdWNoZWQiLCJNYWluQ29udHJvbGxlciIsInJlc2l6ZUJHSW1hZ2UiLCJsb2dvdXQiLCJ1bmF1dGgiLCJOZXdVc2VyU2lnblVwQ29udHJvbGxlciIsInZhbGlkYXRpb24iLCJiYWNrZW5kU2VydmljZXMiLCJ2ZXJpZnlSZXF1aXJubWVudHMiLCJlcnJvcnMiLCJwYXNzZXNBbGxUZXN0cyIsImlucHV0cyIsInJlcXVpcmVkRmllbGRzRGVmaW5lZCIsInBhc3NSZXFzIiwicmVxIiwiZnVsZmlsbGVkIiwic2hvd1JlcXNCb3giLCJzaWdudXBWYWxpZGF0aW9uIiwiaGFzTmFtZSIsInJlcXVpcmVkIiwibG9uZ0Vub3VnaCIsIm1pbk5hbWVMZW5ndGgiLCJwdXNoIiwiam9pbiIsImhhc0VtYWlsIiwiaXNBbkVtYWlsIiwiY2hlY2tOZXdQYXNzd29yZCIsImhhc1Bhc3N3b3JkIiwic3BlY2lmaWNSZXFzIiwibWluUGFzc0xlbmd0aCIsIm1heFBhc3NMZW5ndGgiLCJhdExlYXN0T25lTG93ZXJjYXNlIiwiYXRMZWFzdE9uZVVwcGVyY2FzZSIsImF0TGVhc3RPbmVOdW1iZXIiLCJhdExlYXN0T25lU3ltYm9sIiwiaWxsZWdhbENoYXJhY3RlciIsImFueUVycm9ycyIsImV4aXRQYXNzd29yZCIsIm5ld1VzZXJTaGVycGEiLCJuZXdVc2VyRGF0YSIsImRiVXNlckRhdGEiLCJsb2FkUHJpbWFyaWVzIiwiYWRkTmV3VXNlclRvRGF0YWJhc2UiLCJhZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3QiLCJSZWdVc2VyTG9naW5Db250cm9sbGVyIiwicmVnaXN0ZXJlZFVzZXJTaGVycGEiLCJkYXRhYmFzZSIsInJlZ2lzdGVyZWRVc2VyRGF0YSIsIkxvZ2luUmVnaXN0ZXJlZFVzZXIiLCJ1c2VyQ3JlZGVudGlhbHMiLCJzZXRQcmltYXJpZXNMb2NhbGx5IiwiZ2V0VUlETG9jYWxseSIsImdldFVzZXJCaW8iLCJ1c2VyQmlvIiwidXBkYXRlQmlvTG9jYWxseSIsImdldFVzZXJFdmVudHMiLCJhbGxFdmVudHNGb3JUaGlzVXNlciIsInVwZGF0ZUFsbFVzZXJFdmVudHNMb2NhbGx5IiwiY2xpY2tlZCIsInVzZXJBdXRoZW50aWNhdGlvbiIsImxvZ1VzZXJPdXQiLCJ0b3BNZW51Q29udHJvbGxlciIsImF1dGhEYXRhQ2FsbGJhY2siLCJwcm92aWRlciIsImxvZ2dlZEluIiwibmF2QmFyTG9naW5SZWdpc3RlcmVkVXNlciIsIm5hdmJhclVzZXJFbWFpbCIsIm5hdmJhclVzZXJQYXNzIiwiY2xpY2siLCJuYXZiYXJJbnB1dHMiLCJvbkF1dGgiLCJVc2VyRXZlbnRzQ29udHJvbGxlciIsIm5vT2ZIb3N0ZUV2ZW50cyIsImNvdW50ZXIiLCJnZW5lcmF0ZUV2ZW50SUQiLCJkYXRlIiwiY2hlY2tGb3JFdmVudHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImNhdGVnb3J5IiwiaXNPYmplY3QiLCJzZWN0aW9uQXZhaWxhYmxlIiwiaW5pdGlhbGl6ZSIsInNldFVJRExvY2FsbHkiLCJsb2FkQmlvIiwicmV0cmlldmVkQmlvIiwiZ2V0QWxsVXNlckV2ZW50c0xvY2FsbHkiLCJnZXRSZW1vdGVFdmVudHNGb3JMb2NhbCIsIm9idGFpbmVkVXNlckV2ZW50cyIsInNob3dEZWNsaW5lIiwiY3JlYXRlTmV3RXZlbnQiLCJuZXdFdmVudFNoZXJwYSIsImFmZmlybWF0aXZlUmVzcG9uc2UiLCJjbGVhbkRCRXZlbnRzQ2F0ZWdvcnkiLCJlcnJvclJlc3BvbnNlIiwiVXNlckluZm9ybWF0aW9uQ29udHJvbGxlciIsIm9idGFpbmVkVXNlckRhdGEiLCJkb2IiLCJ0ZW1wQmlydGhkYXkiLCJ2aWV3IiwiZGF0YVRvU2F2ZSIsImlzRGF0YSIsImJ0bk1zc2ciLCJwcm9jZWVkQnRuIiwiY2hlY2tWYWx1ZXMiLCJpc1VuZGVmaW5lZCIsImNvbXBhbnkiLCJ0aXRsZSIsInVwZGF0ZURPQiIsInNhdmVBbmRNb3ZlT24iLCJ1c2VySW5mb1NoZXJwYSIsImN1cnJlbnRVaWQiLCJhdXRoU2VydmljZSIsImlzTG9nZ2VkSW4iLCJkYkF1dGhlbnRpY2F0aW9uIiwiY2hlY2tMb2dpblN0YXR1cyIsImFsbEF1dGhTZXJ2aWNlcyIsIiRxIiwiZmlyZUJhc2VBY2NvdW50cyIsInJlc29sdmUiLCJyZWplY3QiLCJhcHAiLCJhcHBVc2VycyIsImI2NEVtYWlsIiwiUmVnaXN0ZXJlZFVzZXJzTGlzdCIsIlByb21pc2UiLCJ1cGxvYWRVc2VyRGF0YSIsImFsbFVzZXJEYXRhIiwicmVtb3RlVXNlciIsInVwbG9hZFVzZXJCaW8iLCJjdXJyZW50VXNlckJpbyIsInRvU3RyaW5nIiwicmVtb3RlVXNlckJpbyIsImRvd25sb2FkVXNlckRhdGEiLCJjcmVhdGVIb3N0ZWRFdmVudCIsIm5ld0V2ZW50IiwibmV3SG9zdGVkRXZlbnQiLCJhZGRHdWVzdFRvSG9zdEd1ZXN0TGlzdG9uREIiLCJndWllc3RJZCIsInJzdnBkIiwib3JkZXJCeUtleSIsInVzZXJQcm9maWxlIiwiZXZlbnRzUGFja2FnZSIsImdldEFIb3N0ZWRFdmVudCIsImhvc3RlZEV2ZW50Iiwic2VsZWN0RXZlbnQiLCJmaW5kR3Vlc3RVSUQiLCJndWVzdGI2NEVtYWlsIiwidWlkcyIsImFsbFVzZXJzIiwia2V5IiwiZ2V0R3Vlc3RMaXN0Rm9yRXZlbnQiLCJ0aGVMaXN0IiwiZ2V0QW5JbnZpdGVkRXZlbnQiLCJkZWxldGVVcGRhdGVGaWVsZCIsImNhdFJlbW92aW5nRnJvbSIsInRoZXJlV2FzQW5VcGRhdGVGaWVsZCIsImNhdFRvQ2hlY2siLCJjdXJyZW50Q2F0TW9kZWwiLCJhbGxCYWNrZW5kU2VydmljZXMiLCJwYXJhbTEiLCJwYXJhbTIiLCJwYXJhbTMiLCJldmVudFJvdXRlIiwidXNlcklkIiwiYWxsVHJhZmZpY0NvbnRyb2xzIiwiYmlvUHJpbWFyaWVzQXJlQ29tcGxldGVMb2NhbGx5IiwiZXZlbnRFeGlzdHNMb2NhbGx5IiwidHlwZSIsInRoaXNJc1RoZUhvc3RFbWFpbCIsImd1ZXN0SW52aXRlZEFscmVhZHkiLCJyZWZFbWFpbCIsImNsZWFuRXZlbnRzIiwiZ2V0TmFtZUxvY2FsbHkiLCJnZXRFbWFpbExvY2FsbHkiLCJnZXRDb21wYW55TG9jYWxseSIsImdldFRpdGxlTG9jYWxseSIsImdldERPQkxvY2FsbHkiLCJnZXRGdWxsQmlvTG9jYWxseSIsImdldE9uZVVzZXJFdmVudExvY2FsbHkiLCJnZXRVc2VyRXZlbnRzTG9jYWxseSIsInNldE5hbWVMb2NhbGx5Iiwic2V0RW1haWxMb2NhbGx5Iiwic2V0Q29tcGFueUxvY2FsbHkiLCJzZXRUaXRsZUxvY2FsbHkiLCJzZXRET0JMb2NhbGx5IiwidXBkYXRlVXNlckV2ZW50c0xvY2FsbHkiLCJhbGxVc2VyRXZlbnRzIiwic2V0UmVtb3RlQmlvRnJvbUxvY2FsIiwiYWRkR3Vlc3RUb0hvc3RHdWVzdExpc3QiLCJndWVzdElkIiwiZGIiLCJwb3NpdGl2ZVJlc3VsdCIsIm5lZ2F0aXZlUmVzdWx0IiwiZ2V0VXNlcklkRm9yR3Vlc3QiLCJndWVzdEVtYWlsIiwicmVtb3ZlVXNlckV2ZW50c0xvY2FsbHkiLCJnZXRGdWxsUmVtb3RlREJmb3JMb2NhbCIsInJlbW90ZVVzZXJEYXRhIiwiZ2V0UmVtb3RlQmlvRm9yTG9jYWwiLCJldmVudFR5cGUiLCJnZXRPbmVSZW1vdGVFdmVudEZvckxvY2FsIiwib2J0YWluZWRFdmVudCIsInNldEZ1bGxSZW1vdGVEQmZyb21Mb2NhbCIsInNldFJlbW90ZUV2ZW50c0Zyb21Mb2NhbCIsImdldEV2ZW50R3Vlc3RMaXN0Iiwib2J0YWluZWRMaXN0IiwiYmlvRnJvbVJlbW90ZURCIiwib2J0YWluZWRVc2VyRXZlbnQiLCJsb2FkRXZlbnRzUHJvZ3Jlc3NpdmVseSIsImFsbEV2ZW50cyIsInN0cmVldDAxIiwic3RyZWV0MDIiLCJzdHJlZXQwMyIsImNpdHkiLCJzdGF0ZSIsInppcCIsInVwZGF0ZVBlbmRpbmdFdmVudHNMaXN0Rm9yR3Vlc3QiLCJtaW5pbXVtTmFtZUxlbmd0aCIsIm1pbmltdW1QYXNzTGVuZ3RoIiwibWF4aW11bVBhc3NMZW5ndGgiLCJkYXRlT2ZCaXJ0aCIsImFsbFZhbGlkYXRpb25zIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwidXNlckF1dGhlbnRpY2F0aW9uU2VydmljZSIsImV2ZW50Vmlld0NoYW5nZXIiLCJvdGhlcndpc2UiLCIkcm91dGUiLCJjdXJyZW50IiwicGFyYW1zIiwiYWRkQUd1ZXN0IiwibGlua0Z1bmMiLCJzY29wZSIsImVsIiwiYXR0ciIsImN0cmwiLCJhZGRBR3Vlc3RDb250cm9sbGVyIiwidmFsaWRhdGVJbnZpdGF0aW9uIiwidmFsaWRhdGlvbnMiLCJpbnZpdGF0aW9uVmFsaWRGb3JTdWJtaXNzaW9uIiwic3VibWlzc2lvbkJ1dHRvbiIsImludml0YXRpb25NYW5hZ2VyIiwiZXZlbnREZXRhaWxzIiwiZW1haWxDaGVja2VyIiwidGVtcEd1ZXN0IiwiYWRkcmVzc2VkIiwiZXJyb3JNZXNzYWdlIiwiaXNUaGVIb3N0IiwiYWxyZWFkeUludml0ZWQiLCJjb2wteHMtMTIiLCJjb2wtc20tMTIiLCJidG4iLCJidG4td2FybmluZyIsImJ0bi1zdWNjZXNzIiwidmFsaWRhdGVOYW1lIiwidmFsaWRhdGVFbWFpbCIsInNob3dOYW1lRXJyb3IiLCJzaG93RW1haWxFcnJvciIsInNob3dJbnZpdGF0aW9uRXJyb3IiLCJzdWJtaXRHdWVzdEludml0YXRpb24iLCJ1bmRlZmluZWQiLCJ1cGRhdGVQZW5kaW5nRXZlbnRzTGlzdEZvclVzZXIiLCIkaW5qZWN0IiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwibGluayIsImJpbmRUb0NvbnRyb2xsZXIiLCJob3N0ZWRFdmVudHNMaXN0IiwiaG9zdGVkRXZlbnRzTGlzdENvbnRyb2xsZXIiLCJjb3VudEd1ZXN0cyIsImxpc3QiLCJndWVzdCIsImhvc3RlZEV2ZW50c1NoZXJwYSIsImZvcm1hdERhdGUiLCJndWVzdHNBdHRlbmRpbmciLCJndWVzdHNJbnZpdGVkIiwidG90YWxHdWVzdENvdW50IiwiZ3Vlc3RDb3VudCIsImRlY2xpbmVkIiwicGVyY2VudGFnZUF0dGVuZGluZyIsImd1ZXN0bGlzdCIsImV2ZW50Q2xpY2tlZCIsImhvc3RlZEV2ZW50cyIsImN1clZhbCIsIm1heFZhbCIsInRlbXBsYXRlIiwiYXR0cnMiLCJ1cGRhdGVQcm9ncmVzcyIsInByb2dyZXNzIiwid2lkdGgiLCIkd2F0Y2giLCJob3N0ZWRHdWVzdExpc3QiLCJob3N0ZWRHdWVzdExpc3RDb250cm9sbGVyIiwidGhlcmVJc0FHdWVzdExpc3QiLCJpc0FHdWVzdExpc3QiLCJsaXN0Q29sbGVjdG9yIiwicmV0dXJuZWRMaXN0IiwidG9vbEJhciIsIlRvb2xCYXJDb250cm9sbGVyIiwiZmJDb25uZWN0IiwibW9kdWxlIiwiZmFjdG9yeSJdLCJtYXBwaW5ncyI6IkFBT0EsUUFBQUEsbUJBQUFDLEVBQUFDLEdBU0EsUUFBQUMsS0FFQUMsRUFBQUMsY0FBQUMsTUFBQSxHQUFBQyxJQUFBLElBQ0FILEVBQUFJLFVBQUFDLEtBQUEsR0FBQUMsT0FBQUMsUUFBQSxHQUFBQyxPQUFBLEVBQUFDLE9BQUFDLE1BQUEsTUFDQVYsRUFBQVcsWUFBQSxFQUNBWCxFQUFBWSxpQkFBQSxFQUVBWixFQUFBYSxnQkFDQUMsR0FBQUMsUUFBQSxFQUFBQyxVQUFBLEVBQUFQLE9BQUFDLE1BQUEsUUFBQU8sbUJBQUEsV0FDQUMsR0FBQUgsUUFBQSxFQUFBQyxVQUFBLEVBQUFQLE9BQUFDLE1BQUEsUUFBQU8sbUJBQUEsU0FDQUUsR0FBQUosUUFBQSxFQUFBQyxVQUFBLEVBQUFQLE9BQUFDLE1BQUEsUUFBQU8sbUJBQUEsVUFJQUcsSUFDQUMsSUFHQXJCLEVBQUFXLFlBQUFXLElBR0EsUUFBQUMsR0FBQUMsR0FDQSxNQUFBQyxNQUFBRCxHQUdBLFFBQUFFLEdBQUFGLEdBQ0EsTUFBQUcsTUFBQUgsR0FHQSxRQUFBSSxHQUFBQyxHQUNBLE1BQUFDLE1BQUFDLE1BQUFGLEdBR0EsUUFBQUcsS0FDQWhDLEVBQUFJLFVBQUFDLEtBQUEsR0FBQUMsT0FBQUMsUUFBQSxHQUFBQyxPQUFBLEVBQUFDLE9BQUFDLE1BQUEsTUFHQSxRQUFBdUIsR0FBQUMsR0FDQXJDLEVBQUFzQyxLQUFBLDRDQUFBRCxHQUVBRSxJQUFBQyxNQUFBLFNBQUFBLE1BQUFILEdBQUFHLE1BQUEsVUFBQUEsTUFBQSxXQUFBQSxNQUFBdkMsRUFBQW9DLEtBQUFH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QUFBN1MsaUJBRUFBLGdCQUFBcVEsU0FBQSxPQUFBLEtBQUEsV0NKQTNXLFFBQ0FrWixPQUFBLGtCQUNBQyxRQUFBLGVBQUFqYSxjQUVBQSxhQUFBeVgsU0FBQSxPQUFBLGFDSkEzVyxRQUNBa1osT0FBQSxrQkFDQUMsUUFBQSxXQUFBbGEsVUFFQUEsU0FBQTBYLFNBQUEsT0FBQSxLQUFBLG1CQ0pBM1csUUFDQWtaLE9BQUEsa0JBQ0FDLFFBQUEsYUFBQTlTLFlBRUFBLFdBQUFzUSxTQUFBLFFDSkEzVyxRQUNBa1osT0FBQSxrQkFDQW5GLE9BQUFBLFFFS0EvVCxRQUNBa1osT0FBQSxrQkFDQXRDLFVBQUEsWUFBQWpDLFdDRkEzVSxRQUNBa1osT0FBQSxrQkFDQXRDLFVBQUEsbUJBQUFLLGtCQ0ZBalgsUUFDQWtaLE9BQUEsa0JBQ0F0QyxVQUFBLGNBQUFuVyxhQ0ZBVCxRQUNBa1osT0FBQSxrQkFDQXRDLFVBQUEsa0JBQUE2QixpQkNGQXpZLFFBQ0FrWixPQUFBLGtCQUNBdEMsVUFBQSxVQUFBbUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignQW5FdmVudENvbnRyb2xsZXInLCBBbkV2ZW50Q29udHJvbGxlcik7XG5cbkFuRXZlbnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBBbkV2ZW50Q29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMpIHtcblx0dmFyIHZtID0gdGhpcztcblx0XG5cdC8vbG9jYWwgdmFyaWFibGVzXG5cdHZtLnRlbXBUaW1lID0ge3N0YXJ0OiAnJywgZW5kOiAnJ307XG5cdHZtLnVzZXJJc0hvc3QgPSBmYWxzZTtcblxuXG5cdC8vTG9jYWwgTWV0aG9kc1xuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdC8vZGVjbGFyZSBhbmQgaW5pdGlhbGl6ZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2bS50ZW1wRGF0ZVRpbWUgPSB7c3RhcnQ6ICcnLCBlbmQ6ICcnfTtcblx0XHR2bS5uZXdHdWVzdCA9IHtuYW1lOiAnJywgZW1haWw6e2FkZHJlc3M6JycsIHZhbGlkOmZhbHNlLCBzdHlsZTp7Y29sb3I6Jyd9fX07XG5cdFx0dm0uc2hvd0lmSG9zdCA9IGZhbHNlO1xuXHRcdHZtLmhpZGVJZkF0dGVuZGluZyA9IHRydWU7XG5cdFx0Ly9zZWN0aW9uc1xuXHRcdHZtLm1hbmFnZVNlY3Rpb25zID0ge1xuXHRcdFx0MToge2FjdGl2ZTogdHJ1ZSwgY29tcGxldGU6IGZhbHNlLCBzdHlsZTp7Y29sb3I6J2JsYWNrJywgJ2JhY2tncm91bmQtY29sb3InOid5ZWxsb3cnfX0sXG5cdFx0XHQyOiB7YWN0aXZlOiBmYWxzZSwgY29tcGxldGU6IGZhbHNlLCBzdHlsZTp7Y29sb3I6J3doaXRlJywgJ2JhY2tncm91bmQtY29sb3InOidncmF5J319LFxuXHRcdFx0Mzoge2FjdGl2ZTogZmFsc2UsIGNvbXBsZXRlOiBmYWxzZSwgc3R5bGU6e2NvbG9yOid3aGl0ZScsICdiYWNrZ3JvdW5kLWNvbG9yJzonZ3JheSd9fVxuXHRcdH07XG5cblx0XHQvL2NoZWNrIHVzZXIgdG8gZGV0ZXJtaW5lIHN0YXRlXG5cdFx0Y2hlY2tGb3JIb3N0KCk7XG5cdFx0Y2hlY2tJZkd1ZXN0SXNBdHRlbmRpbmcoKTtcblxuXHRcdC8vb3BlbiB1cCBzZWN0aW9uc1xuXHRcdGlmKCF2bS5zaG93SWZIb3N0KSBvcGVuQWxsU2VjdGlvbnMoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHV0ZjhfdG9fYjY0KHN0cikge1xuXHRcdHJldHVybiBidG9hKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRfdG9fdXRmOChzdHIpIHtcbiAgICBcdHJldHVybiBhdG9iKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH1cblxuXHRmdW5jdGlvbiBjbGVhbk5ld0d1ZXN0VmFyaWFibGUoKSB7XG5cdFx0dm0ubmV3R3Vlc3QgPSB7bmFtZTogJycsIGVtYWlsOnthZGRyZXNzOicnLCB2YWxpZDpmYWxzZSwgc3R5bGU6e2NvbG9yOicnfX19O1xuXHR9XG5cblx0ZnVuY3Rpb24gaW52aXRlQVJlZ2lzdGVyZWRVc2VyKHVpZCkge1xuXHRcdCRsb2cuaW5mbygnYWRkaW5nIHRoZW0gdG8gdGhlIHJlZ2lzdGVyZWQgdXNlcnMgbGlzdCAnICsgdWlkKTtcblx0XHQvL3NldCB0aGUgbmV3IGV2ZW50XG5cdFx0cmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdwZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJHJvdXRlUGFyYW1zLmV2ZW50SWQpLnNldCh7XG5cdFx0XHRpZDogJHJvdXRlUGFyYW1zLmV2ZW50SWQsXG5cdFx0XHRldmVudFRpbWVzOiB7XG5cdFx0XHRcdHN0YXJ0OiB2bS5ldmVudC5ldmVudFRpbWVzLnN0YXJ0LFxuXHRcdFx0XHRlbmQ6IHZtLmV2ZW50LmV2ZW50VGltZXMuZW5kXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogdm0uZXZlbnQubmFtZSxcblx0XHRcdGhvc3Q6ICRyb3V0ZVBhcmFtcy51aWRcblx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbygndGhlcmUgd2FzIGFuIGVycm9yJyArIGVycm9yKTtcblx0XHR9KTtcblx0XHQvL2lmIHRoZXJlIHdhcyBhbiB1cGRhdGVkIHBsYWNlIGhvbGRlciwgcmVtb3ZlIGl0XG5cdFx0cmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdwZW5kaW5nJykub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0dmFyIGNoZWNrRm9yUGxhY2Vob2xkZXIgPSBzbmFwc2hvdC52YWwoKVxuXHRcdFx0JGxvZy5pbmZvKHNuYXBzaG90LnZhbCgpKTtcblxuXHRcdFx0aWYoY2hlY2tGb3JQbGFjZWhvbGRlci51cGRhdGVkKSB7XG5cdFx0XHRcdCRsb2cuaW5mbygnZGVsZXRpbmcgdXBkYXRlZCcpO1xuXHRcdFx0XHRyZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ3BlbmRpbmcnKS5jaGlsZCgndXBkYXRlZCcpLnJlbW92ZShmdW5jdGlvbihlcnJvck9iamVjdCkge1xuXHRcdFx0XHRcdGlmKGVycm9yT2JqZWN0KSAkbG9nLmluZm8oXCJEZWxldGluZyBmYWlsZWQ6IFwiICsgZXJyb3JPYmplY3QuY29kZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlICRsb2cuaW5mbygnbm90aGluZyB0byBkbycpO1xuXG5cdFx0fSwgZnVuY3Rpb24oZXJyb3JPYmplY3QpIHtcblx0XHRcdGlmKGVycm9yT2JqZWN0KSAkbG9nLmluZm8oXCJUaGUgcmVhZCBmYWlsZWQ6IFwiICsgZXJyb3JPYmplY3QuY29kZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBpbnZpdGVBblVucmVnaXN0ZXJlZFVzZXIodXNlcktleSkge1xuXHRcdCRsb2cuaW5mbygnYWRkaW5nIHRoZW0gdG8gdGhlIFVOUkVHSVNURVJFRCB1c2VycyBsaXN0ICcgKyB1c2VyS2V5KTtcblx0XHRyZWYuY2hpbGQoJ1VucmVnaXN0ZXJlZFVzZXJzJykuY2hpbGQodXNlcktleSkuY2hpbGQoJ3BlbmRpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS5jaGlsZCgkcm91dGVQYXJhbXMuZXZlbnRJZCkuc2V0KHtcblx0XHRcdGlkOiAkcm91dGVQYXJhbXMuZXZlbnRJZCxcblx0XHRcdGhvc3Q6ICRyb3V0ZVBhcmFtcy51aWQsXG5cdFx0XHRldmVudFRpbWVzOiB7XG5cdFx0XHRcdHN0YXJ0OiB2bS5ldmVudC5ldmVudFRpbWVzLnN0YXJ0LFxuXHRcdFx0XHRlbmQ6IHZtLmV2ZW50LmV2ZW50VGltZXMuZW5kXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogdm0uZXZlbnQubmFtZVxuXHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKCd0aGVyZSB3YXMgYW4gZXJyb3InICsgZXJyb3IpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tGb3JIb3N0KCkge1xuXHRcdC8vY2hlY2sgZXZlbnQgaG9zdFxuXHRcdHZhciBhdXRoRGF0YSA9IHJlZi5nZXRBdXRoKCk7XG5cblx0XHRpZihhdXRoRGF0YS51aWQgPT0gJHJvdXRlUGFyYW1zLmhvc3RJZCkge1xuXHRcdFx0JGxvZy5pbmZvKCdpcyB0aGUgaG9zdCcpO1xuXHRcdFx0dm0uc2hvd0lmSG9zdCA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRsb2cuaW5mbygnbm90IHRoZSBob3N0Jyk7XG5cdFx0XHR2bS5zaG93SWZIb3N0ID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tJZkd1ZXN0SXNBdHRlbmRpbmcoKSB7XG5cdFx0aWYoIXZtLnNob3dJZkhvc3QpIHtcblx0XHRcdCRsb2cuaW5mbygnY2hlY2sgZ3Vlc3QgYXR0ZW5kYW5jZScpO1xuXHRcdFx0dXNlckV2ZW50cy5jaGlsZCgnZ3Vlc3RMaXN0Jykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdFx0dmFyIGFsbEd1ZXN0cyA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0XHR2bS5oaWRlSWZBdHRlbmRpbmcgPSAhYWxsR3Vlc3RzWyRyb3V0ZVBhcmFtcy51aWRdLmF0dGVuZGluZztcblx0XHRcdFx0XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBvcGVuQWxsU2VjdGlvbnMoKSB7XG5cdFx0dm0ubWFuYWdlU2VjdGlvbnNbMV0uYWN0aXZlID0gdHJ1ZTtcblx0XHR2bS5tYW5hZ2VTZWN0aW9uc1syXS5hY3RpdmUgPSB0cnVlO1xuXHRcdHZtLm1hbmFnZVNlY3Rpb25zWzNdLmFjdGl2ZSA9IHRydWU7XG5cdH1cblxuXHRmdW5jdGlvbiBzYXZlRXZlbnQoKSB7XG5cdFx0dm0uZXZlbnQuJHNhdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0JGxvZy5pbmZvKCdldmVudCBzYXZlZCcpO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2Vycm9yISAnICsgZXJyb3IpO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly92aWV3IE1ldGhvZFxuXHR2bS5zZXRUZW1wVGltZSA9IGZ1bmN0aW9uKGVuZHBvaW50KSB7XG5cdFx0aWYoZW5kcG9pbnQgPT0gJ3N0YXJ0Jykgdm0udGVtcERhdGVUaW1lLnN0YXJ0ID0gbmV3IERhdGUoKTtcblx0XHRpZihlbmRwb2ludCA9PSAnZW5kJykgdm0udGVtcERhdGVUaW1lLmVuZCA9IG5ldyBEYXRlKCk7XG5cdH1cblxuXHR2bS51bml4VGltZVRvRGF0ZVRpbWUgPSBmdW5jdGlvbiAodW5peFRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0fTtcblxuXHR2bS5kYXRlVGltZVRvVW5peFRpbWUgPSBmdW5jdGlvbiAoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH07XG5cblx0dm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvZy5pbmZvKCdzdWJtaXR0aW5nIHRoZSBmb3JtIG5vdyEnKTtcblx0fVxuXG5cdHZtLmJhY2tUb1VzZXJFdmVudHMgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9jYXRpb24ucGF0aCgnL3VzZXJFdmVudHMvJyArICRyb3V0ZVBhcmFtcy51aWQgKyAnLycgKyAkcm91dGVQYXJhbXMudG9rZW4pO1xuXHR9XG5cblx0dm0uZXZlbnRSZWRpcmVjdCA9IGZ1bmN0aW9uKHBhdGgsIGV2ZW50SUQpIHtcblx0XHR2YXIgZnVsbFBhdGggPSBwYXRoICsgJy8nICsgJHJvdXRlUGFyYW1zLnVpZCArICcvJyArICRyb3V0ZVBhcmFtcy50b2tlbjtcblx0XHQvL3JlZGlyZWN0XG5cdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyB0bzogJyArIGZ1bGxQYXRoKTtcblx0XHQkbG9jYXRpb24ucGF0aChmdWxsUGF0aCk7XG5cdH1cblxuXHR2bS5jaGFuZ2VTZWN0aW9uID0gZnVuY3Rpb24odGFyZ2V0U2VjdGlvbikge1xuXHRcdCRsb2cuaW5mbygnYXJlIHdlIGhlcmUnKTtcblx0XHRmb3IoaSA9IDE7IGkgPD0zOyBpKyspIHtcblx0XHRcdGlmKGk9PXRhcmdldFNlY3Rpb24pIHtcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uYWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uc3R5bGVbJ2JhY2tncm91bmQtY29sb3InXSA9J3llbGxvdyc7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLnN0eWxlWydjb2xvciddID0nYmxhY2snO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdHZtLm1hbmFnZVNlY3Rpb25zW2ldLnN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSdncmF5Jztcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uc3R5bGVbJ2NvbG9yJ10gPSd3aGl0ZSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dm0uc2F2ZUV2ZW50VGltZSA9IGZ1bmN0aW9uKGRhdGVUaW1lLCB0YXJnZXQpIHtcblx0XHQvL2lmIHRoaXMgZXZlbnQgZGlkbid0IGhhdmUgYSBzdGFydCB0aW1lLCBjcmVhdGUgaXRcblx0XHRpZighdm0uZXZlbnQuZXZlbnRUaW1lcykgeyBcblx0XHRcdHZtLmV2ZW50LmV2ZW50VGltZXMgPSB7c3RhcnQ6ICcnLCBlbmQ6ICcnfTtcblx0XHRcdHZtLmV2ZW50LmV2ZW50VGltZXMuc3RhcnQgPSB2bS5kYXRlVGltZVRvVW5peFRpbWUodm0udGVtcERhdGVUaW1lLnN0YXJ0KTsgXG5cdFx0XHR2bS5ldmVudC5ldmVudFRpbWVzLmVuZCA9IHZtLmRhdGVUaW1lVG9Vbml4VGltZSh2bS50ZW1wRGF0ZVRpbWUuZW5kKTtcblx0XHR9XG5cblx0XHRpZigodm0udGVtcERhdGVUaW1lLmVuZCA8IHZtLnRlbXBEYXRlVGltZS5zdGFydCkgJiYgdGFyZ2V0ID09ICdzdGFydCcpIHZtLnRlbXBEYXRlVGltZS5lbmQgPSB2bS50ZW1wRGF0ZVRpbWUuc3RhcnQ7XG5cdFx0aWYodGFyZ2V0ID09ICdzdGFydCcpIHZtLmV2ZW50LmV2ZW50VGltZXMuc3RhcnQgPSB2bS5kYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpO1xuXHRcdGlmKHRhcmdldCA9PSAnZW5kJykgdm0uZXZlbnQuZXZlbnRUaW1lcy5lbmQgPSB2bS5kYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpO1xuXHR9XG5cblx0dm0uZ3Vlc3RzQXJlSW52aXRlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLmV2ZW50Lmd1ZXN0TGlzdCkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2bS52YWxpZGF0ZUd1ZXN0RW1haWwgPSBmdW5jdGlvbigpIHtcblx0XHQvL2lmIHRoZXJlIGlzIGFuIGVtYWlsIGFkZHJlc3Ncblx0XHRpZih2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzKSB7XG5cdFx0XHQvL2NoZWNrIHZhbGlkaXR5XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG5cblx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzKSkge1xuXHRcdFx0XHR2bS5uZXdHdWVzdC5lbWFpbC52YWxpZCA9IHRydWU7XG5cdFx0XHRcdHZtLm5ld0d1ZXN0LmVtYWlsLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0ubmV3R3Vlc3QuZW1haWwudmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0dm0ubmV3R3Vlc3QuZW1haWwuc3R5bGUgPSB7Y29sb3I6Jyd9O1xuXHRcdFx0fVx0XHRcdFxuXHRcdH1cblx0fVxuXG5cdHZtLmlzU2VjdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yKGk9MDtpPDg7aSsrKSB7XG5cdFx0XHQkbG9nLmluZm8odm0ucmVxdWlyZWRJbnB1dHNbaV0pO1xuXHRcdH1cblx0fVxuXG5cdHZtLnNhdmVBbmRBZHZhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0uZXZlbnQuJHNhdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0JGxvZy5pbmZvKCdldmVudCBzYXZlZCcpO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2Vycm9yISAnICsgZXJyb3IpO1xuXHRcdH0pO1xuXG5cdFx0Ly9jaGVjayBmb3IgY29tcGxldGVuZXNcblx0XHR2bS5pc1NlY3Rpb25Db21wbGV0ZSgpO1xuXG5cdFx0aWYodm0ubWFuYWdlU2VjdGlvbnNbMV0uY29tcGxldGUgPT0gdHJ1ZSAmJiB2bS5tYW5hZ2VTZWN0aW9uc1syXS5jb21wbGV0ZSA9PSB0cnVlICYmIHZtLm1hbmFnZVNlY3Rpb25zWzNdLmNvbXBsZXRlID09IHRydWUpIHtcblx0XHRcdHZtLmV2ZW50UmVkaXJlY3QoJy91c2VyRXZlbnRzJywgJHJvdXRlUGFyYW1zLnVpZCk7XG5cdFx0fSBlbHNlIGlmICh2bS5tYW5hZ2VTZWN0aW9uc1sxXS5hY3RpdmUpIHZtLmNoYW5nZVNlY3Rpb24oMik7XG5cdFx0ZWxzZSBpZiAodm0ubWFuYWdlU2VjdGlvbnNbMl0uYWN0aXZlKSB2bS5jaGFuZ2VTZWN0aW9uKDMpO1xuXHRcdGVsc2UgaWYgKHZtLm1hbmFnZVNlY3Rpb25zWzNdLmFjdGl2ZSkgdm0uY2hhbmdlU2VjdGlvbigxKTtcblx0fVxuXG5cdHZtLmFkZEd1ZXN0VG9Ib3N0c0xpc3QgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlY2xhcmUgYW5kIGluaXRpYWxpemUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHVzZXJLZXkgPSB1dGY4X3RvX2I2NCh2bS5uZXdHdWVzdC5lbWFpbC5hZGRyZXNzKTtcblxuXHRcdC8vaWYgZW1haWwgaXMgdmFsaWQgYW5kIG5hbWUgZXhpc3RzXG5cdFx0aWYgKHZtLm5ld0d1ZXN0Lm5hbWUgJiYgdm0ubmV3R3Vlc3QuZW1haWwudmFsaWQpIHtcblx0XHRcdC8vaXMgdGhlcmUgYSBndWVzdCBsaXN0IGFscmVhZHk/IElmIG5vdCBjcmVhdGUgb25lXG5cdFx0XHRpZighdm0uZXZlbnQuZ3Vlc3RMaXN0KSB7XG5cdFx0XHRcdHZtLmV2ZW50Lmd1ZXN0TGlzdCA9IHt9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9pZiBzbyBpcyB0aGlzIHBlcnNvbiBhbHJlYWR5IG9uIHRoZSBsaXN0P1xuXHRcdFx0XHR2YXIgaSA9MDtcblx0XHRcdFx0d2hpbGUodm0uZXZlbnQuZ3Vlc3RMaXN0W2ldKSB7XG5cdFx0XHRcdFx0aWYodm0uZXZlbnQuZ3Vlc3RMaXN0W2ldLmVtYWlsID09IGI2NF90b191dGY4KHVzZXJLZXkpKSB7XG5cdFx0XHRcdFx0XHQkbG9nLmluZm8oJ1RoaXMgZ3Vlc3QgaXMgYWxyZWFkeSBvbiB0aGUgbGlzdCcpO1xuXHRcdFx0XHRcdFx0Y2xlYW5OZXdHdWVzdFZhcmlhYmxlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL2lzIHRoaXMgZ3Vlc3QgYSByZWdpc3RlcmVkIHVzZXI/XG5cdFx0XHRpZihyZWdpc3RlcmVkVXNlcnNbdXNlcktleV0pIHtcblx0XHRcdFx0Ly9pcyB0aGUgcmVnaXN0ZXJlZCB1c2VyIHRoZSBob3N0P1xuXHRcdFx0XHRpZihyZWdpc3RlcmVkVXNlcnNbdXNlcktleV0gPT0gJHJvdXRlUGFyYW1zLnVpZCkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygndHJpZWQgdG8gcmVnaXN0ZXIgdGhlIGhvc3QnKTtcblx0XHRcdFx0XHRjbGVhbk5ld0d1ZXN0VmFyaWFibGUoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0Ly9hZGQgdGhlbSB0byB0aGUgYXBwcm9wcmlhdGUgcmVnaXN0ZXJlZCB1c2VycycgbGlzdCBvZiBldmVudCBpbnZpdGVzXG5cdFx0XHRcdFx0aW52aXRlQVJlZ2lzdGVyZWRVc2VyKHJlZ2lzdGVyZWRVc2Vyc1t1c2VyS2V5XSk7XG5cblx0XHRcdFx0XHQvL2FkZCB0aGUgZ3Vlc3QgdG8gdGhlIGxpc3Rcblx0XHRcdFx0XHR2bS5ldmVudC5ndWVzdExpc3RbcmVnaXN0ZXJlZFVzZXJzW3VzZXJLZXldXSA9IHtcblx0XHRcdFx0XHRcdGF0dGVuZGluZzogZmFsc2UsIFxuXHRcdFx0XHRcdFx0c3RhdHVzOidwZW5kaW5nJywgXG5cdFx0XHRcdFx0XHRuYW1lOiB2bS5uZXdHdWVzdC5uYW1lLCBcblx0XHRcdFx0XHRcdGVtYWlsOnZtLm5ld0d1ZXN0LmVtYWlsLmFkZHJlc3MsXG5cdFx0XHRcdFx0fTtcdFx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vYWRkIHRoZSBpbnZpdGUgdG8gdGhlIG5vbi1yZWdpc3RlcmVkIHVzZXJzIGxpc3Qgb2YgZXZlbnQgaW52aXRlc1xuXHRcdFx0XHRpbnZpdGVBblVucmVnaXN0ZXJlZFVzZXIodXNlcktleSk7XG5cblx0XHRcdFx0Ly9hZGQgdGhlIGd1ZXN0IHRvIHRoZSBsaXN0XG5cdFx0XHRcdHZtLmV2ZW50Lmd1ZXN0TGlzdFt1c2VyS2V5XSA9IHtcblx0XHRcdFx0XHRcdGF0dGVuZGluZzogZmFsc2UsIFxuXHRcdFx0XHRcdFx0c3RhdHVzOidwZW5kaW5nJywgXG5cdFx0XHRcdFx0XHRuYW1lOiB2bS5uZXdHdWVzdC5uYW1lLCBcblx0XHRcdFx0XHRcdGVtYWlsOnZtLm5ld0d1ZXN0LmVtYWlsLmFkZHJlc3MsXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblxuXHRcdFx0Ly9zYXZlIHRoZSBldmVudFxuXHRcdFx0dm0uc2F2ZUV2ZW50KCk7XG5cdFx0XHQvL2NsZWFyIHRoZSB0ZW1wIHZhbHVlc1xuXHRcdFx0Y2xlYW5OZXdHdWVzdFZhcmlhYmxlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCRsb2cuaW5mbygneW91IGRpZG5cXCd0IGVudGVyIGEgbmFtZSBhbmQgb3IgZW1haWwnKTtcblx0XHR9XG5cdH1cblxuXHR2bS5ndWVzdFdpbGxBdHRlbmQgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdHZhciBjdXJyZW50VXNlciA9IHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS5jaGlsZCgnZXZlbnRzJyk7XG5cdFx0dmFyIHRvdGFsUGVuZGluZ0ludml0YXRpb25zID0gMDtcblx0XHR2YXIgcmVtb3ZlQXR0ZW5kaW5nVXBkYXRlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdC8vY2hhbmdlIGF0dGVuZGluZyB0byB0cnVlIGluIGhvc3QncyBndWVzdExpc3Rcblx0XHR2bS5ldmVudC5ndWVzdExpc3RbJHJvdXRlUGFyYW1zLnVpZF0uYXR0ZW5kaW5nID0gcmVzcG9uc2U7XG5cdFx0Ly9jaGFuZ2Ugc3RhdHVzIHRvICdhdHRlbmRpbmcnIGluIGhvc3QncyBndWVzdExpc3Rcblx0XHR2bS5ldmVudC5ndWVzdExpc3RbJHJvdXRlUGFyYW1zLnVpZF0uc3RhdHVzID0gJ2F0dGVuZGluZyc7XG5cdFx0XG5cdFx0Ly9nZXQgdGhlIGludml0YXRpb24gZGV0YWlsc1xuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdwZW5kaW5nJykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhbGJlXG5cdFx0XHR2YXIgaW52aXRhdGlvbnMgPSBzbmFwc2hvdC52YWwoKTtcblx0XHRcdC8vbG9nIHN0YXJ0aW5nIHZhbHVlc1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zKTtcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9uc1skcm91dGVQYXJhbXMuaG9zdElkXSk7XG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF1bJHJvdXRlUGFyYW1zLmV2ZW50SWRdKTtcblxuXHRcdFx0dmFyIHRoaXNJbnZpdGF0aW9uID0gaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF1bJHJvdXRlUGFyYW1zLmV2ZW50SWRdO1xuXHRcdFx0XG5cdFx0XHQkbG9nLmluZm8odGhpc0ludml0YXRpb24pO1xuXHRcdFx0XG5cdFx0XHQvL2NoZWNrICMgb2YgaW5pdmlhdGlvbnNcblx0XHRcdGZvcihpbnZpdGF0aW9uIGluIGludml0YXRpb25zKSB7XG5cdFx0XHRcdHRvdGFsUGVuZGluZ0ludml0YXRpb25zKys7XG5cdFx0XHR9XG5cblx0XHRcdC8vcmVwb3J0ICMgb2YgaW52aXRhdGlvbnNcblx0XHRcdCRsb2cuaW5mbyhcInRvdGFsIGF0dGVuZGluZzogXCIgKyB0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyk7XG5cdFx0XHRcblx0XHRcdC8vYWRkIHRoZSBldmVudCB0byB0aGUgZ3Vlc3QncyBhdHRlbmRpbmcgbGlzdFxuXHRcdFx0aWYocmVzcG9uc2UpIGN1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMuaG9zdElkKS5jaGlsZCgkcm91dGVQYXJhbXMuZXZlbnRJZCkuc2V0KHRoaXNJbnZpdGF0aW9uLCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKGVycm9yKTtcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0XHQvL2lmIHRoZSB1cGRhdGVkIHBsYWNlaG9sZGVyIHdhcyBvbiB0aGUgYXR0ZW5kaW5nIGxpc3QgcmVtb3ZlIGl0XG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLm9uKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGF0dGVuZGluZ0xpc3QgPSBzbmFwc2hvdC52YWwoKTtcblx0XHRcdFxuXHRcdFx0Ly9yZXBvcnQgYWN0aW9uc1xuXHRcdFx0JGxvZy5pbmZvKCd0aGlzIGlzIHRoZSBhdHRlbmRpbmcgbGlzdCcpO1xuXHRcdFx0JGxvZy5pbmZvKGF0dGVuZGluZ0xpc3QpO1xuXHRcdFx0XG5cdFx0XHQvL3Rocm93IGZsYWcgZm9yIGxhdGVyXG5cdFx0XHRpZihhdHRlbmRpbmdMaXN0LnVwZGF0ZWQpIHJlbW92ZUF0dGVuZGluZ1VwZGF0ZWQgPSB0cnVlO1xuXG5cdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdC8vaWYgdGhlciB3YXMgYW4gZXJyb3IgcmVwb3J0IGl0XG5cdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKGVycm9yKTtcblx0XHR9KTtcblxuXHRcdC8vaWYgdGhpcyBpcyB0aGUgbGFzdCBwZW5kaW5nIGV2ZW50IG9uIHRoZSBndWVzdCdzIHBlbmRpbmcgbGlzdCwgYWRkIHRoZSB1cGRhdGVkIHBsYWNlaG9sZGVyXG5cdFx0aWYodG90YWxQZW5kaW5nSW52aXRhdGlvbnMgPCAyKSB7XG5cdFx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdFx0Ly9yZXBsYWNlIHdpdGggdXBkYXRlZCBmaWVsZFxuXHRcdFx0Y3VycmVudFVzZXIuY2hpbGQoJ3BlbmRpbmcnKS51cGRhdGUoe1xuXHRcdFx0XHR1cGRhdGVkOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKGVycm9yKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vcmVtb3ZlIHRoZSBldmVudCBmcm9tIHRoZSBndWVzdCdzIHBlbmRpbmcgbGlzdFxuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdwZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLmhvc3RJZCkucmVtb3ZlKCk7XG5cblx0XHQvL2lmIHRoZXJlIHdhcyBhbiB1cGRhdGVkIGZpZWxkIGluIGF0dGVuZGluZywgcmVtb3ZlIGl0XG5cdFx0aWYocmVtb3ZlQXR0ZW5kaW5nVXBkYXRlZCkge1xuXHRcdFx0JGxvZy5pbmZvKCdyZW1vdmluZyB0aGUgdXBkYXRlZCBwbGFjZWhvbGRlcicpO1xuXHRcdFx0Ly9jdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykuY2hpbGQoJ3VwZGF0ZWQnKS5yZW1vdmUoKTtcblx0XHR9XG5cblx0XHQvL3NhdmUgY2hhbmdlc1xuXHRcdHZtLmV2ZW50LiRzYXZlKCk7XG5cdH1cblxuXHR2bS51cGRhdGVVcGRhdGVkUGFyYW0gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3VycmVudFVzZXIgPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJ2V2ZW50cycpO1xuXHRcdFxuXHRcdCRsb2cuaW5mbygndXBkYXRpbmcgdGhlIHBhcmFtJyk7XG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLm9uKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHQkbG9nLmluZm8oc25hcHNob3QudmFsKCkpO1xuXHRcdH0pO1xuXHRcdGN1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5jaGlsZCgndXBkYXRlZCcpLnJlbW92ZSgpO1xuXHR9XG5cblx0dm0uYWRkSW52aXRhdGlvblRvQXR0ZW5kaW5nID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHR2YXIgY3VycmVudFVzZXIgPSByZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQoJHJvdXRlUGFyYW1zLnVpZCkuY2hpbGQoJ2V2ZW50cycpO1xuXHRcdHZhciB0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyA9IDA7XG5cblx0XHQvL2dldCB0aGUgaW52aXRhdGlvbiBkZXRhaWxzXG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ3BlbmRpbmcnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFsYmVcblx0XHRcdHZhciBpbnZpdGF0aW9ucyA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0dmFyIHRoaXNJbnZpdGF0aW9uID0gaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF1bJHJvdXRlUGFyYW1zLmV2ZW50SWRdO1xuXHRcdFx0XG5cdFx0XHQvL2xvZyBzdGFydGluZyB2YWx1ZXNcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9ucyk7XG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF0pO1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zWyRyb3V0ZVBhcmFtcy5ob3N0SWRdWyRyb3V0ZVBhcmFtcy5ldmVudElkXSk7XG5cdFx0XHRcblx0XHRcdC8vY2hlY2sgIyBvZiBpbml2aWF0aW9uc1xuXHRcdFx0Zm9yKGludml0YXRpb24gaW4gaW52aXRhdGlvbnMpIHtcblx0XHRcdFx0dG90YWxQZW5kaW5nSW52aXRhdGlvbnMrKztcblx0XHRcdH1cblxuXHRcdFx0Ly9yZXBvcnQgIyBvZiBpbnZpdGF0aW9uc1xuXHRcdFx0JGxvZy5pbmZvKFwidG90YWwgcGVuZGluZyBpbnZpdGF0aW9uczogXCIgKyB0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyk7XG5cdFx0XHRcblx0XHRcdCRsb2cuaW5mbyhyZXNwb25zZSk7XG5cdFx0XHQvL2FkZCB0aGUgZXZlbnQgdG8gdGhlIGd1ZXN0J3MgYXR0ZW5kaW5nIGxpc3Rcblx0XHRcdGlmKHJlc3BvbnNlKSBjdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykuY2hpbGQoJHJvdXRlUGFyYW1zLmhvc3RJZCkuY2hpbGQoJHJvdXRlUGFyYW1zLmV2ZW50SWQpLnNldCh0aGlzSW52aXRhdGlvbiwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbyhlcnJvcik7XG5cdFx0XHR9KTtcblxuXG5cblx0XHR9KTtcblx0fVxuXG5cdC8vc3RhcnQgcnVuXG5cdGluaXQoKTtcbn1cbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0d1ZXN0RXZlbnRDb250cm9sbGVyJywgR3Vlc3RFdmVudENvbnRyb2xsZXIpO1xuXG5HdWVzdEV2ZW50Q29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gR3Vlc3RFdmVudENvbnRyb2xsZXIoJGxvZykge1xuXHQkbG9nLmluZm8oJ2ludG8gdGhlIEd1ZXN0RXZlbnRDb250cm9sbGVyJyk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignSG9zdEV2ZW50Q29udHJvbGxlcicsIEhvc3RFdmVudENvbnRyb2xsZXIpO1xuXG5Ib3N0RXZlbnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJ3VzZXJEYXRhJywgJ3RyYWZmaWNWYWxldCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIEhvc3RFdmVudENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCB1c2VyRGF0YSwgdHJhZmZpY1ZhbGV0KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdFxuXHQvL2xvY2FsIHZhcmlhYmxlc1xuXHR2YXIgaG9zdGVkRXZlbnRTaGVycGEgPSB0cmFmZmljVmFsZXQ7XG5cdHZhciB0aGlzRXZlbnRNYW5hZ2VyID0gdXNlckRhdGE7XG5cblx0Ly92aWV3IG1vZGVsIHZhcmlhYmxlc1xuXHR2bS5hY3RpdmVTZWN0aW9uID0gMTtcblx0dm0udGVtcFRpbWUgPSB7c3RhcnQ6ICcnLCBlbmQ6ICcnLCBkdXJhdGlvbjonJ307XG5cdHZtLnByb2dyZXNzQmFyID0gMzk7XG5cdHZtLnRlbXBFdmVudCA9IHt9O1xuXG5cdC8vbG9jYWwgbWV0aG9kc1xuXHRmdW5jdGlvbiB1bml4VGltZVRvRGF0ZVRpbWUodW5peFRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0fTtcblxuXHRmdW5jdGlvbiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gY2FsY3VsYXRlRHVyYXRpb24oc3RhcnQsIGVuZCkge1xuXHRcdHJldHVybiAoZGF0ZVRpbWVUb1VuaXhUaW1lKGVuZCkgLSBkYXRlVGltZVRvVW5peFRpbWUoc3RhcnQpKSAvICg2MCoxMDAwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRFdmVudFRpbWVzKCkge1xuXHRcdC8vYnVpbGQgbmV3IHRlbXAgdGltZXNcblx0XHR2YXIgbm93ID0gbmV3IERhdGUoKTtcblxuXHRcdC8vcm91bmQgdG8gdGhlIG5lYXJlc3QgaG91ciwgY3V0IG9mZiBhbnl0aGluZyBzbWFsbGVyXG5cdFx0bm93LnNldEhvdXJzKG5vdy5nZXRIb3VycygpICsgTWF0aC5yb3VuZChub3cuZ2V0TWludXRlcygpLzYwKSk7XG5cdFx0bm93LnNldE1pbnV0ZXMoMCk7XG5cdFx0bm93LnNldFNlY29uZHMoMCk7XG5cdFx0bm93LnNldE1pbGxpc2Vjb25kcygwKTtcblxuXHRcdHZtLnRlbXBUaW1lLnN0YXJ0ID0gbm93O1xuXHRcdHZtLnRlbXBUaW1lLmVuZCA9IG5vdztcblxuXHRcdHZtLnRlbXBUaW1lLmR1cmF0aW9uID0gY2FsY3VsYXRlRHVyYXRpb24odm0udGVtcFRpbWUuc3RhcnQsIHZtLnRlbXBUaW1lLmVuZCk7XG5cdFx0XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVUZW1wVGltZUZyb21Nb2RlbCgpIHtcblx0XHQvL2lmIHN0YXJ0IHRpbWVzIGFyZSBhdmFpbGFibGVcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2bS50ZW1wRXZlbnQuZXZlbnRUaW1lcy5zdGFydCkpIHtcblx0XHRcdC8vc2V0IHRoZSB0ZW1wVGltZSBtb2RlbFxuXHRcdFx0dm0udGVtcFRpbWUuc3RhcnQgPSB1bml4VGltZVRvRGF0ZVRpbWUodm0udGVtcEV2ZW50LmV2ZW50VGltZXMuc3RhcnQpO1xuXHRcdFx0dm0udGVtcFRpbWUuZW5kID0gdW5peFRpbWVUb0RhdGVUaW1lKHZtLnRlbXBFdmVudC5ldmVudFRpbWVzLmVuZCk7XG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdFxuXHRcdC8vbG9hZCBldmVudCBkZXRhaWxzXG5cdFx0dGhpc0V2ZW50TWFuYWdlci5sb2FkQW5FdmVudFByb2dyZXNzaXZlbHkoJHJvdXRlUGFyYW1zLnVpZCwgJHJvdXRlUGFyYW1zLmV2ZW50SWQpXG5cdFx0LnRoZW4oZnVuY3Rpb24odGhlRXZlbnQpIHtcblx0XHRcdC8vYWRkIHRoaXMgZXZlbnQgbW9kZWwgdG8gdGhlIHZpZXcgbW9kZWwgZXZlbnRcblx0XHRcdHZtLnRlbXBFdmVudCA9IHRoZUV2ZW50O1xuXG5cdFx0XHQvL3VwZGF0ZSB0ZW1wVGltZVxuXHRcdFx0dXBkYXRlVGVtcFRpbWVGcm9tTW9kZWwoKTtcblx0XHR9KVxuXHRcdC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0JGxvZygndGhlIGVycm9yIGlzOiAnICsgZXJyb3IpO1xuXHRcdH0pXG5cblx0XHQvL2xvYWQgc3BlY2lmaWVkIHNlY3Rpb25cblx0XHR2bS5hY3RpdmVTZWN0aW9uID0gcGFyc2VJbnQoJHJvdXRlUGFyYW1zLnNlY3Rpb24pO1xuXHRcdC8vc2V0IHRlbXBUaW1lc1xuXHRcdGluaXRFdmVudFRpbWVzKCk7XG5cdH1cblxuXHQvL3ZpZXcgbW9kZWwgbWV0aG9kc1xuXHR2bS5mb3JtYXREdXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vY2FsYyBkdXJhdGlvblxuXHRcdHZtLnRlbXBUaW1lLmR1cmF0aW9uID0gY2FsY3VsYXRlRHVyYXRpb24odm0udGVtcFRpbWUuc3RhcnQsIHZtLnRlbXBUaW1lLmVuZCk7XG5cdFx0JGxvZy5pbmZvKHZtLnRlbXBUaW1lLmR1cmF0aW9uKTtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBob3VycyA9IE1hdGguZmxvb3Iodm0udGVtcFRpbWUuZHVyYXRpb24vKDYwKSk7XG5cdFx0dmFyIG1pbiA9IHZtLnRlbXBUaW1lLmR1cmF0aW9uICUgNjA7XG5cdFx0dmFyIGZyYWN0aW9uID0gKE1hdGgucm91bmQobWluLzE1KS80KTtcblxuXHRcdCRsb2cuaW5mbyhob3VycyArICcgJyArIG1pbiArICcgJyArIGZyYWN0aW9uKTtcblx0XHRyZXR1cm4gKGhvdXJzK2ZyYWN0aW9uKSArICcgaCc7XG5cdH1cblxuXHR2bS5zZXR0aW5nVGVtcFN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0udGVtcFRpbWUuZW5kID0gdm0udGVtcFRpbWUuc3RhcnQ7XG5cdH1cblxuXHR2bS5zZXR0aW5nVGVtcEVuZCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vc2V0IHZhbGlkIGVuZCB3aXRoIHN0YXJ0XG5cdFx0aWYodm0udGVtcFRpbWUuc3RhcnQgPiB2bS50ZW1wVGltZS5lbmQpIHZtLnRlbXBUaW1lLnN0YXJ0ID0gdm0udGVtcFRpbWUuZW5kO1xuXHRcdC8vY2FsYyBkdXJhdGlvblxuXHRcdHZtLnRlbXBUaW1lLmR1cmF0aW9uID0gY2FsY3VsYXRlRHVyYXRpb24odm0udGVtcFRpbWUuc3RhcnQsIHZtLnRlbXBUaW1lLmVuZCk7XG5cdH1cblxuXHR2bS5iYWNrVG9Vc2VyRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9zZW5kIHRoZSB1c2VyIGJhY2sgdG8gdGhlIHBhZ2UgdGhleSBjYW1lIGZyb21cblx0XHRob3N0ZWRFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvdXNlckV2ZW50cycsICRyb3V0ZVBhcmFtcy51aWQpO1xuXHR9XG5cblx0dm0uc2VjdGlvbkJhY2sgPSBmdW5jdGlvbigpIHtcblx0XHQvL21vdmUgYmFja1xuXHRcdHRhcmdldFNlY3Rpb24gPSB2bS5hY3RpdmVTZWN0aW9uIC0gMTtcblx0XHRob3N0ZWRFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvZXZlbnQvaG9zdCcsICRyb3V0ZVBhcmFtcy5ldmVudElkLCAkcm91dGVQYXJhbXMudWlkLCB0YXJnZXRTZWN0aW9uKTtcblx0fVx0XG5cblx0dm0uc2VjdGlvbkZvcndhcmQgPSBmdW5jdGlvbigpIHtcblx0XHQvL21vdmUgZm9yd2FyZFxuXHRcdHRhcmdldFNlY3Rpb24gPSB2bS5hY3RpdmVTZWN0aW9uICsgMTtcblx0XHRob3N0ZWRFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvZXZlbnQvaG9zdCcsICRyb3V0ZVBhcmFtcy5ldmVudElkLCAkcm91dGVQYXJhbXMudWlkLCB0YXJnZXRTZWN0aW9uKTtcblx0fVxuXG5cdC8vdGFrZSBhY3Rpb25cblx0aW5pdCgpO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0xhbmRpbmdQYWdlQ29udHJvbGxlcicsIExhbmRpbmdQYWdlQ29udHJvbGxlcik7XG5cbkxhbmRpbmdQYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nLCAnJGRvY3VtZW50JywgJyR3aW5kb3cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBMYW5kaW5nUGFnZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkbG9jYXRpb24sICRkb2N1bWVudCwgJHdpbmRvdykge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgZmJVUkwgPSAnaHR0cHM6Ly9tZWV0dXBwbGFubmVyLmZpcmViYXNlaW8uY29tLyc7XG5cdHZhciBhdXRoRGF0YSA9IHt9O1xuXHR2YXIgY3VycmVudFVzZXJEYXRhID0ge307XG5cblx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdHZtLnNob3dSZXF1aXJubWVudHMgPSBmYWxzZTtcblx0dm0udmFsaWROZXdOYW1lID0geyd2YWxpZCc6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOicnfX07XG5cdHZtLnZhbGlkTmV3RW1haWwgPSB7J3ZhbGlkJzpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6Jyd9fTtcblx0dm0uc2VjdXJlUGFzc3dvcmQgPSB7J3NlY3VyZSc6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOicnfX07XG5cdHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4gPSB7J3VzYWJsZSc6ZmFsc2UsICdjbGFzcyc6J2J0biBidG4td2FybmluZyd9O1xuXHR2bS5tZXNzYWdlID0gJ3Rlc3RpbmcnO1xuXG5cdFxuXHR2bS52YWxpZFVzZXJFbWFpbCA9IHsndmFsaWQnOmZhbHNlLCAnc3R5bGUnOntjb2xvcjonJ319O1xuXHR2bS52YWxpZFVzZXJQYXNzd29yZCA9IHsndmFsaWQnOmZhbHNlLCAnc3R5bGUnOntjb2xvcjonJ319O1xuXHR2bS51bmNsb2NrVXNlckxvZ2luQnRuID0geyd1c2FibGUnOmZhbHNlLCAnY2xhc3MnOididG4gYnRuLXdhcm5pbmcnfTtcblx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHMgPSB7XG5cdFx0MDp7J2NvbnN0cmFpbnQnOidJcyBhdCBsZWFzdCAxNiBjaGFyYWN0ZXJzIGxvbmcnLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQxOnsnY29uc3RyYWludCc6J0lzIG5vIGxvbmdlciB0aGFuIDEwMCBjaGFyYWN0ZXJzJywgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX0sXG5cdFx0Mjp7J2NvbnN0cmFpbnQnOidDb250YWlucyBhdCBsZWFzdCBvbmUgcmVxdWlyZWQgc3ltYm9sIChcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCopJywgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX0sXG5cdFx0Mzp7J2NvbnN0cmFpbnQnOidDb250YWlucyBhdCBsZWFzdCBvbmUgbnVtYmVyJywgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX0sXG5cdFx0NDp7J2NvbnN0cmFpbnQnOidDb250YWlucyBhdCBsZWFzdCBvbmUgbG93ZXJjYXNlIGxldHRlcicsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDU6eydjb25zdHJhaW50JzonQ29udGFpbnMgYXQgbGVhc3Qgb25lIHVwcGVyY2FzZSBsZXR0ZXInLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQ2OnsnY29uc3RyYWludCc6XCJEb2Vzbid0IGhhdmUgYW55IGlsbGVnYWwgY2hhcmFjdGVyc1wiLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfVxuXHR9O1xuXG5cdC8vdmFyIHRoZVRlc3RCb3ggPSBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50KS5maW5kKCcjdGVzdEJveCcpO1xuXG5cdC8vdGhlVGVzdEJveC5jaGVja1ZhbGlkaXR5KCk7XG5cdC8vc2V0Q3VzdG9tVmFsaWRpdHkoJ3lvdSBuZWVkIHNvbWV0aGluZyBlbHNlJyk7XG5cblx0Ly9sb2NhbCBtZXRob2RzXG5cdGZ1bmN0aW9uIHV0ZjhfdG9fYjY0KHN0cikge1xuXHRcdHJldHVybiBidG9hKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRfdG9fdXRmOChzdHIpIHtcbiAgICBcdHJldHVybiBhdG9iKHN0cik7XG5cdH1cblxuXHRmdW5jdGlvbiB1bml4VGltZVRvRGF0ZVRpbWUodW5peFRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRhdGVUaW1lVG9Vbml4VGltZShkYXRlVGltZSkge1xuXHRcdHJldHVybiBEYXRlLnBhcnNlKGRhdGVUaW1lKTtcblx0fVxuXG5cdC8vZGVmaW5lIGNvbnRyb2xsZXIgbWV0aG9kc1xuXHR2bS5kaXNwbGF5UGFzc1JlcXMgPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS5uZXdOYW1lICYmIHZtLm5ld0VtYWlsKSB7XG5cdFx0XHR2bS5zaG93UmVxdWlybm1lbnRzID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dm0uc2hvd1JlcXVpcm5tZW50cyA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHZtLmNoZWNrTmV3TmFtZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdGlmKHZtLm5ld05hbWUpIHtcblx0XHRcdGlmKHZtLm5ld05hbWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2bS52YWxpZE5ld05hbWUudmFsaWQgPSB0cnVlO1xuXHRcdFx0XHR2bS52YWxpZE5ld05hbWUuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS52YWxpZE5ld05hbWUudmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0dm0udmFsaWROZXdOYW1lLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2bS5vcGVuQ3JlYXRlVXNlckJ1dHRvbigpO1xuXHR9XG5cblx0dm0uY2hlY2tOZXdFbWFpbCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZih2bS5uZXdFbWFpbCkge1xuXHRcdFx0Ly9jaGVjayB2YWxpZGl0eVxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XCIsIFwiXCIpO1xuXG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3Qodm0ubmV3RW1haWwpKSB7XG5cdFx0XHRcdHZtLnZhbGlkTmV3RW1haWwudmFsaWQgPSB0cnVlO1xuXHRcdFx0XHR2bS52YWxpZE5ld0VtYWlsLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0udmFsaWROZXdFbWFpbC52YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHR2bS52YWxpZE5ld0VtYWlsLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdH1cdFx0XHRcblx0XHR9XG5cdFx0XG5cdFx0dm0ub3BlbkNyZWF0ZVVzZXJCdXR0b24oKTtcblx0fVxuXG5cdHZtLmNoZWNrVXNlckVtYWlsID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYodm0udXNlckVtYWlsKSB7XG5cdFx0XHQvL2NoZWNrIHZhbGlkaXR5XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG5cblx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2bS51c2VyRW1haWwpKSB7XG5cdFx0XHRcdHZtLnZhbGlkVXNlckVtYWlsLnZhbGlkID0gdHJ1ZTtcblx0XHRcdFx0dm0udmFsaWRVc2VyRW1haWwuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS52YWxpZFVzZXJFbWFpbC52YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHR2bS52YWxpZFVzZXJFbWFpbC5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dm0ub3BlblVzZXJMb2dpbkJ0bigpO1xuXHR9XG5cblx0dm0uY2hlY2tOZXdQYXNzd29yZHMgPSBmdW5jdGlvbigpIHtcblx0XHQvL2ZvciBlYWNoIHBhc3N3b3JkIGRlZmluZSB0aGUgcGF0dGVybiB0aGF0IHRoZSBwYXNzd29yZCBtdXN0IG1hdGNoXG5cdFx0dmFyIGNvbnN0cmFpbnRzID0ge1xuXHQgXHRcdDA6IFsnJywgJyB5b3VyIHBhc3N3b3JkIG5lZWRzIHRvIGJlIDE2IGNoYXJhY3RlcnMgb3IgbG9uZ2VyJ10sXG5cdCBcdFx0MTogWycnLCAnIHlvdXIgcGFzc3dvcmQgbmVlZHMgdG8gYmUgbGVzcyB0aGFuIDEwMCBjaGFyYWN0ZXJzJ10sXG5cdCBcdFx0MjogWydbXFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqXScsIFwiIG5vIHJlcXVpcmVkIHN5bWJvbHMgZm91bmRcIl0sXG5cdCBcdFx0MzogWydbMC05XScsIFwiIG5vIG51bWJlcnMgZm91bmRcIl0sXG5cdCBcdFx0NDogWydbYS16XScsIFwiIG5vIGxvd2VyY2FzZSBsZXR0ZXJzIGZvdW5kXCJdLFxuXHQgXHRcdDU6IFsnW0EtWl0nLCBcIiBubyB1cHBlcmNhc2UgbGV0dGVycyBmb3VuZFwiXSxcblx0IFx0XHQ2OiBbJ1teQS16MC05XFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqXScsIFwiIGlsbGVnYWwgY2hhcmFjdGVycyBmb3VuZFwiXSxcbiBcdFx0fTtcbiBcdFx0XG4gXHRcdC8vY2hlY2sgZm9yIGxlbmd0aFxuIFx0XHRpZih2bS5uZXdQYXNzd29yZCkge1xuIFx0XHRcdGlmKHZtLm5ld1Bhc3N3b3JkLmxlbmd0aCA+IDE1KSB7IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMF0uc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMF0ubWV0ID0gdHJ1ZTsgXG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzBdLnN0eWxlID0ge2NvbG9yOidyZWQnfTsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1swXS5tZXQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYodm0ubmV3UGFzc3dvcmQubGVuZ3RoIDw9IDEwMCkgeyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzFdLnN0eWxlID0ge2NvbG9yOidncmVlbid9OyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzFdLm1ldCA9IHRydWU7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzFdLnN0eWxlID0ge2NvbG9yOidyZWQnfTsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1sxXS5tZXQgPSBmYWxzZTtcbiBcdFx0XHR9XG5cbiBcdFx0XHQvL2NoZWNrIGNvbnN0cmFpbnRzIDItNVxuIFx0XHRcdGZvcihpID0gMjsgaSA8IDY7IGkrKykge1xuXHQgXHRcdFx0Ly9jaGVjayBmb3IgcmVxdWlyZWQgc3ltYm9scywgdXBwZXJjYXNlLCBsb3NlcmNhc2UsIGFuZCBjaGFyYWN0ZXJzXG5cdCBcdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoY29uc3RyYWludHNbaV1bMF0sIFwiXCIpO1x0XG5cblx0IFx0XHRcdC8vdGVzdCBlYWNoIGNvbnN0cmF0aW50XG5cdCBcdFx0XHRpZihjb25zdHJhaW50LnRlc3Qodm0ubmV3UGFzc3dvcmQpKSB7XG5cdCBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzW2ldLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHQgXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1tpXS5tZXQgPSB0cnVlO1xuXHQgXHRcdFx0fSBlbHNlIHtcblx0IFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbaV0uc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHQgXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1tpXS5tZXQgPSBmYWxzZTtcblx0IFx0XHRcdH1cblx0IFx0XHR9XG5cblx0IFx0XHQvL2NoZWNrIGlsbGVnYWwgY2hhcmFjdGVyc1xuXHQgXHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChjb25zdHJhaW50c1s2XVswXSwgXCJcIik7XG5cblx0IFx0XHQvL3J1biB0aGUgY2hlY2tcblx0IFx0XHRpZighY29uc3RyYWludC50ZXN0KHZtLm5ld1Bhc3N3b3JkKSkge1xuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNl0uc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNl0ubWV0ID0gZmFsc2U7XG5cdCBcdFx0fSBlbHNlIHtcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzZdLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNl0ubWV0ID0gdHJ1ZTtcblx0IFx0XHR9XG5cblx0IFx0XHQvL2lmIGFsbCBjb25zdHJhaW5zIG1ldCwgdGhyb3cgdmFsaWQgcGFzcyBmbGFnXG5cdCBcdFx0aWYoIHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzBdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1syXS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzNdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNF0ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s1XS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzZdLm1ldCkge1xuXHQgXHRcdFx0dm0uc2VjdXJlUGFzc3dvcmQuc2VjdXJlID0gdHJ1ZVxuXHQgXHRcdH0gZWxzZSB7XG5cdCBcdFx0XHR2bS5zZWN1cmVQYXNzd29yZC5zZWN1cmUgPSBmYWxzZTtcblx0IFx0XHR9XG5cblx0IFx0XHRpZih2bS5zZWN1cmVQYXNzd29yZC5zZWN1cmUpIHtcblx0IFx0XHRcdHZtLnNlY3VyZVBhc3N3b3JkLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHQgXHRcdH0gZWxzZSB7XG5cdCBcdFx0XHR2bS5zZWN1cmVQYXNzd29yZC5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdCBcdFx0fVxuIFx0XHR9XG4gXHRcdFxuIFx0XHR2bS5vcGVuQ3JlYXRlVXNlckJ1dHRvbigpO1xuXHR9XG5cblx0dm0uY2hlY2tVc2VyUGFzc3dvcmRzID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYodm0udXNlclBhc3N3b3JkKSB7XG5cdFx0XHRpZih2bS51c2VyUGFzc3dvcmQubGVuZ3RoID4gMTUpIHtcblx0XHRcdFx0dm0udmFsaWRVc2VyUGFzc3dvcmQuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdFx0XHRcdHZtLnZhbGlkVXNlclBhc3N3b3JkLnZhbGlkID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLnZhbGlkVXNlclBhc3N3b3JkLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdFx0dm0udmFsaWRVc2VyUGFzc3dvcmQudmFsaWQgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRcblx0XHR2bS5vcGVuVXNlckxvZ2luQnRuKCk7XG5cdH1cblxuXHR2bS5vcGVuQ3JlYXRlVXNlckJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLnZhbGlkTmV3TmFtZS52YWxpZCAmJiB2bS52YWxpZE5ld0VtYWlsLnZhbGlkICYmIHZtLnNlY3VyZVBhc3N3b3JkLnNlY3VyZSkge1xuXHRcdFx0dm0udW5sb2NrQ3JlYXRlVXNlckJ0bi5jbGFzcyA9ICdidG4gYnRuLXN1Y2Nlc3MnO1xuXHRcdFx0dm0udW5sb2NrQ3JlYXRlVXNlckJ0bi51c2FibGUgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS51bmxvY2tDcmVhdGVVc2VyQnRuLmNsYXNzID0gJ2J0biBidG4td2FybmluZyc7XG5cdFx0XHR2bS51bmxvY2tDcmVhdGVVc2VyQnRuLnVzYWJsZSA9IGZhbHNlO1x0XG5cdFx0fVxuXG5cdH1cblxuXHR2bS5vcGVuVXNlckxvZ2luQnRuID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYodm0udmFsaWRVc2VyRW1haWwudmFsaWQgJiYgdm0udmFsaWRVc2VyUGFzc3dvcmQudmFsaWQpIHtcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4uY2xhc3MgPSAnYnRuIGJ0bi1zdWNjZXNzJztcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4udXNhYmxlID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi5jbGFzcyA9ICdidG4gYnRuLXdhcm5pbmcnO1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUgPSBmYWxzZTtcdFxuXHRcdH1cblx0fVxuXG5cdHZtLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vc2V0IHZhbHVlc1xuXHRcdHZtLm5ld05hbWUgPSAkZG9jdW1lbnQuZmluZCgnI25ld05hbWUnKVswXS52YWx1ZTtcblx0XHR2bS5uZXdFbWFpbCA9ICRkb2N1bWVudC5maW5kKCcjbmV3RW1haWwnKVswXS52YWx1ZTtcblx0XHR2bS51c2VyRW1haWwgPSAkZG9jdW1lbnQuZmluZCgnI3VzZXJFbWFpbCcpWzBdLnZhbHVlO1xuXHRcdFxuXHRcdHZtLmNoZWNrTmV3TmFtZSgpO1xuXHRcdHZtLmNoZWNrTmV3RW1haWwoKTtcblx0XHR2bS5jaGVja1VzZXJFbWFpbCgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVkaXJlY3QocGF0aCwgdXNlckRhdGEpIHtcblx0XHR2YXIgZnVsbFBhdGggPSBwYXRoICsgJy8nICsgY3VycmVudFVzZXJEYXRhLnVpZCArICcvJyArIGN1cnJlbnRVc2VyRGF0YS50b2tlbjtcblx0XHQvL3JlZGlyZWN0XG5cdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyB0bzogJyArIGZ1bGxQYXRoKTtcblx0XHQkbG9jYXRpb24ucGF0aChmdWxsUGF0aCk7XG5cdFx0JHNjb3BlLiRhcHBseSgpO1xuXHR9XG5cblx0dm0uY3JlYXRlTmV3VXNlciA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2cuaW5mbygnQ3JlYXRpbmcgYSBuZXcgdXNlciBhY2NvdW50IG5vdyEnKTtcblxuXHRcdGlmKHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4udXNhYmxlKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZVxuXHRcdFx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0XHRcdHJlZi5jcmVhdGVVc2VyKHtcblx0XHRcdFx0ZW1haWw6dm0ubmV3RW1haWwsXG5cdFx0XHRcdHBhc3N3b3JkOnZtLm5ld1Bhc3N3b3JkXG5cdFx0XHR9LGZ1bmN0aW9uKGVycm9yLCB1c2VyRGF0YSkge1xuXHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnRXJyb3IgY3JlYXRpbmcgdXNlcjogJyArIGVycm9yKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvL2xvZyByZXN1bHRzXG5cdFx0XHRcdFx0JGxvZy5pbmZvKHVzZXJEYXRhKTtcblxuXHRcdFx0XHRcdC8vc2F2ZSBhbGwgdGhlIGRhdGFcblx0XHRcdFx0XHRjdXJyZW50VXNlckRhdGEgPSB1c2VyRGF0YTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvL2dlbmVyYXRlIHRoZSB1c2VyIHJlY29yZFxuXHRcdFx0XHRcdHZhciB1c2Vyc1JlZiA9IHJlZi5jaGlsZCgnVXNlcnMvJyArIHVzZXJEYXRhLnVpZCk7XG5cdFx0XHRcdFx0dmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcblxuXHRcdFx0XHRcdC8vd3JpdGUgbmV3IHVzZXIgdG8gdGhlIGRhdGFiYXNlIHdpdGggYmlvIGluZm9cblx0XHRcdFx0XHR1c2Vyc1JlZi5zZXQoeyBcblx0XHRcdFx0XHRcdCdiaW8nOiB7XG5cdFx0XHRcdFx0XHRcdCduYW1lJzogdm0ubmV3TmFtZSxcblx0XHRcdFx0XHRcdFx0J2VtYWlsJzogdm0ubmV3RW1haWxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHQnZXZlbnRzJzoge1xuXHRcdFx0XHRcdFx0XHQncGVuZGluZyc6IHtcblx0XHRcdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0J2hvc3RpbmcnOiB7XG5cdFx0XHRcdFx0XHRcdFx0J3VwZGF0ZWQnOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdCdhdHRlbmRpbmcnOiB7XG5cdFx0XHRcdFx0XHRcdFx0J3VwZGF0ZWQnOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdCdjb21wbGV0ZWQnOiB7XG5cdFx0XHRcdFx0XHRcdFx0J3VwZGF0ZWQnOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHRcdFx0JGxvZy5pbmZvKCdEYXRhIGNvdWxkIG5vdCBiZSBzYXZlZDogJyArIGVycm9yKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdCRsb2cuaW5mbygnRGF0YSBzYXZlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0Ly9hZGQgdGhpcyB1c2VyIHRvIHRoZSBsaXN0IG9mIHJlZ2lzdGVyZWQgdXNlcnNcblx0XHRcdFx0XHRyZWYuY2hpbGQoJ1VpZHMnKS5jaGlsZCh1dGY4X3RvX2I2NCh2bS5uZXdFbWFpbCkpLnNldChjdXJyZW50VXNlckRhdGEudWlkLCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRcdFx0aWYoZXJyb3IpICRsb2cuaW5mbyhcIkRhdGEgY291bGQgbm90IGJlIHNhdmVkLiBcIiArIGVycm9yKTtcblx0XHRcdFx0XHRcdGVsc2UgJGxvZy5pbmZvKFwidWlkIGNyZWF0ZWQgc3VjZXNzZnVsbHkuXCIpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0Ly9yZWRpcmVjdCB0byBVc2VySW5mb3JtYXRpb25cblx0XHRcdFx0XHRyZWRpcmVjdCgnL3VzZXJJbmZvcm1hdGlvbicsIGN1cnJlbnRVc2VyRGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fVxuXHR9XG5cblx0dm0ubG9naW5SZWdpc3RlcmVkVXNlciA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYodm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHRcdFx0Ly9hdXRoZW50aWNhdGUgdGhlIHVzZXJcblx0XHRcdHJlZi5hdXRoV2l0aFBhc3N3b3JkKHtcblx0XHRcdFx0ZW1haWw6IHZtLnVzZXJFbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHZtLnVzZXJQYXNzd29yZFxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IsIGF1dGhEYXRhKSB7XG5cdFx0XHRcdGlmKGVycm9yKSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdFcnJvciBMb2dnaW5nIEluOiAnICsgZXJyb3IpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnTG9nZ2VkIEluIHN1Y2Nlc3NmdWxseTogJyArIGF1dGhEYXRhLnVpZCk7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKGF1dGhEYXRhKTtcblx0XHRcdFx0XHQvL3NhdmUgYWxsIHRoZSBkYXRhXG5cdFx0XHRcdFx0Y3VycmVudFVzZXJEYXRhID0gYXV0aERhdGE7XG5cblx0XHRcdFx0XHQvL2xvYWQgdXNlciBiaW9cblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvL2xvYWQgdXNlciBldmVudHNcblxuXHRcdFx0XHRcdC8vcmVkaXJlY3Rcblx0XHRcdFx0XHRyZWRpcmVjdCgnL3VzZXJJbmZvcm1hdGlvbicsIGN1cnJlbnRVc2VyRGF0YSk7XG5cdFx0XHRcdFx0JHNjb3BlLiRhcHBseSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdH1cblxuXHR9XG5cblx0dm0uYWxlcnRNZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGFsZXJ0KCd0aGlzIGlzIHdvcmtpbmchIGFuIGFsZXJ0IScpO1xuXHR9XG5cblx0dm0ub25SZXNpemVGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnB1dFRleHQgPSBhbmd1bGFyLmVsZW1lbnQoJy5pbnB1dFRleHQnKTtcblx0XHRpZigkd2luZG93Lm91dGVyV2lkdGggPiAkd2luZG93Lm91dGVySGVpZ2h0KSB7XG5cdFx0XHRpbnB1dFRleHQuY3NzKCdmb250LXNpemUnLCAnMmVtJyk7XG5cdFx0XHQkbG9nLmluZm8oJ21ha2luZyBiaWdnZXInKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aW5wdXRUZXh0LmNzcygnZm9udC1zaXplJywgJzEuMmVtJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly9ldmVudCBsaXN0ZW5lcnNcblx0aWYgKCdhZGRFdmVudExpc3RlbmVyJyBpbiAkZG9jdW1lbnQpIHtcblx0ICAgICRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2cuaW5mbygnYWRkaW5nIEZhc3RDbGljaycpO1xuXHQgICAgICAgIEZhc3RDbGljay5hdHRhY2goJGRvY3VtZW50LmJvZHkpO1xuXHQgICAgfSwgZmFsc2UpO1xuXHR9XG5cblx0YW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuXHRcdHZtLm9uUmVzaXplRnVuY3Rpb24oKTtcblx0XHQvLyRzY29wZS4kYXBwbHkoKTtcblx0fSk7XG5cblx0YW5ndWxhci5lbGVtZW50KCRkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0aWYoJHdpbmRvdy5vdXRlcldpZHRoIDwgNjAwKSB7XG5cdFx0XHR2bS5vblJlc2l6ZUZ1bmN0aW9uKCk7XG5cdFx0XHQvLyRzY29wZS4kYXBwbHkoKTtcblx0XHR9XG5cdH0pXG5cblxuXHQgdm0ubWFzdGVyID0ge307XG5cblx0ICB2bS51cGRhdGUgPSBmdW5jdGlvbih1c2VyKSB7XG5cdCAgICB2bS5tYXN0ZXIgPSBhbmd1bGFyLmNvcHkodXNlcik7XG5cdCAgfTtcblxuXHQgIHZtLnJlc2V0ID0gZnVuY3Rpb24oZm9ybSkge1xuXHQgICAgaWYgKGZvcm0pIHtcblx0ICAgICAgZm9ybS4kc2V0UHJpc3RpbmUoKTtcblx0ICAgICAgZm9ybS4kc2V0VW50b3VjaGVkKCk7XG5cdCAgICB9XG5cdCAgICB2bS51c2VyID0gYW5ndWxhci5jb3B5KHZtLm1hc3Rlcik7XG5cdCAgfTtcblxuXHQgIHZtLnJlc2V0KCk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBNYWluQ29udHJvbGxlcik7XG5cbk1haW5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRkb2N1bWVudCcsICckd2luZG93J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gTWFpbkNvbnRyb2xsZXIoJGxvZywgJGxvY2F0aW9uLCAkZG9jdW1lbnQsICR3aW5kb3cpIHtcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTsgXG5cblx0ZnVuY3Rpb24gcmVzaXplQkdJbWFnZSgpIHtcblx0XHR2YXIgYm9keSA9IGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnQpO1xuXHRcdCRkb2N1bWVudC5jc3MoJ2hpZ2h0JywgJHdpbmRvdy5vdXRlckhlaWdodClcblx0fVxuXG5cdHZtLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuXHRcdGFsZXJ0KCdsb2dnaW5nIHlvdSBvdXQhJyk7XG5cdFx0cmVmLnVuYXV0aCgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKCcvJyk7XG5cdH07XG5cblx0YW5ndWxhci5lbGVtZW50KCRkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0Ly9GYXN0Q2xpY2suYXR0YWNoKCRkb2N1bWVudC5ib2R5KTtcblx0XHRyZXNpemVCR0ltYWdlKCk7XG5cdH0pXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignTmV3VXNlclNpZ25VcENvbnRyb2xsZXInLCBOZXdVc2VyU2lnblVwQ29udHJvbGxlcik7XG5cbk5ld1VzZXJTaWduVXBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ3ZhbGlkYXRpb24nLCAnYmFja2VuZFNlcnZpY2VzJywgJ3RyYWZmaWNWYWxldCcsICd1c2VyRGF0YSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIE5ld1VzZXJTaWduVXBDb250cm9sbGVyKCRzY29wZSwgJGxvZywgdmFsaWRhdGlvbiwgYmFja2VuZFNlcnZpY2VzLCB0cmFmZmljVmFsZXQsIHVzZXJEYXRhKSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9kZWZpbmUgdm0gaW5wdXQgdmFyaWFibGVzXG5cdHZtLmlucHV0cyA9IHtcblx0XHRuZXdOYW1lOiAnJyxcblx0XHRuZXdFbWFpbDogJycsXG5cdFx0bmV3UGFzc3dvcmQ6ICcnLFxuXHRcdHJlcXVpcmVkRmllbGRzRGVmaW5lZDogZmFsc2Vcblx0fVxuXHR2bS5lcnJvcnMgPSB7XG5cdFx0bmFtZTogJycsXG5cdFx0ZW1haWw6ICcnLFxuXHRcdHBhc3N3b3JkOiBmYWxzZSxcblx0XHRwYXNzZXNBbGxUZXN0czogZmFsc2Vcblx0fVxuXHR2bS5wYXNzUmVxcyA9IHtcblx0XHQwOiB7IGlkOicnLCByZXE6J0lzIGF0IGxlYXN0IDE2IGNoYXJhY3RlcnMgbG9uZycsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9fSxcblx0XHQxOiB7IGlkOicnLCByZXE6J0lzIG5vIGxvbmdlciB0aGFuIDEwMCBjaGFyYWN0ZXJzJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQyOiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBsb3dlcmNhc2UgbGV0dGVyJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQzOiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQ0OiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBudW1iZXInLCBmdWxmaWxsZWQ6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOidyZWQnfSB9LFxuXHRcdDU6IHsgaWQ6JycsIHJlcTonQ29udGFpbnMgYXQgbGVhc3Qgb25lIHJlcXVpcmVkIHN5bWJvbCAoXFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqKScsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9IH0sXG5cdFx0NjogeyBpZDonJywgcmVxOlwiRG9lc24ndCBoYXZlIGFueSBpbGxlZ2FsIGNoYXJhY3RlcnNcIiwgZnVsZmlsbGVkOnRydWUsICdzdHlsZSc6e2NvbG9yOidyZWQnfSB9XG5cdH1cblx0dm0uc2hvd1JlcXNCb3ggPSBmYWxzZTtcblxuXHQvL2RlZmluZSByZXF1aXJlZCBmaWVsZCBjb25zdHJhaW50c1xuXHR2YXIgc2lnbnVwVmFsaWRhdGlvbiA9IHZhbGlkYXRpb247XG5cblx0Ly9kZWZpbmUgY29udHJvbGxlciBtZXRob2RzXG5cdGZ1bmN0aW9uIHZlcmlmeVJlcXVpcm5tZW50cygpIHtcblx0XHRpZih2bS5lcnJvcnMubmFtZSA9PSAnJyAmJiB2bS5lcnJvcnMuZW1haWwgPT0gJycgJiYgIXZtLmVycm9ycy5wYXNzd29yZCkgdm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzID0gdHJ1ZTtcblx0XHRlbHNlIHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyA9IGZhbHNlO1xuXG5cdFx0aWYoIGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5uZXdOYW1lKSAmJiB2bS5pbnB1dHMubmV3TmFtZSAhPT0gJycgJiZcblx0XHRcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5uZXdFbWFpbCkgJiYgdm0uaW5wdXRzLm5ld0VtYWlsICE9PSAnJyAmJlxuXHRcdFx0YW5ndWxhci5pc0RlZmluZWQodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSAmJiB2bS5pbnB1dHMubmV3UGFzc3dvcmQgIT09ICcnKSBcblx0XHRcdFx0dm0uaW5wdXRzLnJlcXVpcmVkRmllbGRzRGVmaW5lZCA9IHRydWU7XG5cdFx0ZWxzZSB2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkID0gZmFsc2U7XG5cdH1cblxuXHQvL2RlZmluZSB2bSBhY2Nlc3NpYmxlIG1ldGhvZHNcblx0dm0uY2hlY2tOZXdOYW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzTmFtZSA9IHNpZ251cFZhbGlkYXRpb24ucmVxdWlyZWQodm0uaW5wdXRzLm5ld05hbWUpO1xuXHRcdHZhciBsb25nRW5vdWdoID0gc2lnbnVwVmFsaWRhdGlvbi5taW5OYW1lTGVuZ3RoKHZtLmlucHV0cy5uZXdOYW1lKVxuXHRcdFxuXHRcdC8vbG9nIGVycm9yc1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGhhc05hbWUpKSBlcnJvcnMucHVzaChoYXNOYW1lKTtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChsb25nRW5vdWdoKSkgZXJyb3JzLnB1c2gobG9uZ0Vub3VnaCk7XG5cblx0XHQvL3VwZGF0ZSB0aGUgZXJyb3JzIG1vZGVsXG5cdFx0aWYoZXJyb3JzLmxlbmd0aCA+IDApIHZtLmVycm9ycy5uYW1lID0gZXJyb3JzLmpvaW4oJywgJyk7XG5cdFx0ZWxzZSB2bS5lcnJvcnMubmFtZSA9ICcnO1xuXG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld0VtYWlsID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzRW1haWwgPSBzaWdudXBWYWxpZGF0aW9uLnJlcXVpcmVkKHZtLmlucHV0cy5uZXdFbWFpbCk7XG5cdFx0dmFyIGlzQW5FbWFpbCA9IHNpZ251cFZhbGlkYXRpb24uZW1haWwodm0uaW5wdXRzLm5ld0VtYWlsKTtcblx0XHRcblx0XHQvL2xvZyBlcnJvcnNcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChoYXNFbWFpbCkpIGVycm9ycy5wdXNoKGhhc0VtYWlsKTtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChpc0FuRW1haWwpKSBlcnJvcnMucHVzaChpc0FuRW1haWwpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGVycm9ycyBtb2RlbFxuXHRcdGlmKGVycm9ycy5sZW5ndGggPiAwKSB2bS5lcnJvcnMuZW1haWwgPSBlcnJvcnMuam9pbignLCAnKTtcblx0XHRlbHNlIHZtLmVycm9ycy5lbWFpbCA9ICcnO1xuXG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld1Bhc3N3b3JkID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9mbGlwIG9uIHJlcXMgYm94XG5cdFx0dm0uc2hvd1JlcXNCb3ggPSB0cnVlO1xuXG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzUGFzc3dvcmQgPSBzaWdudXBWYWxpZGF0aW9uLnJlcXVpcmVkKHZtLmlucHV0cy5uZXdQYXNzd29yZCk7XG5cdFx0dmFyIHNwZWNpZmljUmVxcyA9IFtcblx0XHRcdHNpZ251cFZhbGlkYXRpb24ubWluUGFzc0xlbmd0aCh2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5tYXhQYXNzTGVuZ3RoKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmF0TGVhc3RPbmVMb3dlcmNhc2Uodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24uYXRMZWFzdE9uZVVwcGVyY2FzZSh2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5hdExlYXN0T25lTnVtYmVyKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmF0TGVhc3RPbmVTeW1ib2wodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24uaWxsZWdhbENoYXJhY3Rlcih2bS5pbnB1dHMubmV3UGFzc3dvcmQpXG5cdFx0XTtcblxuXHRcdC8vbG9nIGVycm9yc1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGhhc1Bhc3N3b3JkKSkgZXJyb3JzLnB1c2goaGFzUGFzc3dvcmQpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGVycm9ycyBtb2RlbFxuXHRcdGlmKGVycm9ycy5sZW5ndGggPiAwKSB2bS5lcnJvcnMucGFzc3dvcmQgPSBlcnJvcnMuam9pbignLCAnKTtcblx0XHRlbHNlIHZtLmVycm9ycy5lbWFpbCA9ICcnO1xuXG5cdFx0Ly91cGRhdGUgcmVxcyBtb2RlbFxuXHRcdHZhciBhbnlFcnJvcnMgPSBmYWxzZTtcblx0XHRmb3IoaT0wOyBpPDc7IGkrKykge1xuXHRcdFx0aWYoc3BlY2lmaWNSZXFzW2ldKSB7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLmZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0ucGFzc1JlcXNbaV0uZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdFx0YW55RXJyb3JzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2bS5lcnJvcnMucGFzc3dvcmQgPSBhbnlFcnJvcnM7XG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5leGl0UGFzc3dvcmQgPSBmdW5jdGlvbigpIHtcblx0XHR2bS5jaGVja05ld1Bhc3N3b3JkKCk7XG5cdFx0dm0uc2hvd1JlcXNCb3ggPSBmYWxzZTtcblx0fVxuXG5cdHZtLmNyZWF0ZU5ld1VzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBuZXdVc2VyU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXG5cdFx0Ly9jb25maXJtIGFsbCBmaWVsZHMgYXJlIHZhbGlkXG5cdFx0aWYodm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzICYmIHZtLmlucHV0cy5yZXF1aXJlZEZpZWxkc0RlZmluZWQpIHtcblx0XHRcdFxuXHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGNyZWF0ZU5ld1VzZXIgPSBiYWNrZW5kU2VydmljZXM7XG5cdFx0XHR2YXIgbmV3VXNlckRhdGEgPSB1c2VyRGF0YTtcblx0XHRcdHZhciB0aGlzVUlEO1xuXG5cdFx0XHQvL2NyZWF0ZSB0aGUgbmV3IHVzZXIgaW4gdGhlIGRhdGFiYXNlXG5cdFx0XHRjcmVhdGVOZXdVc2VyLmNyZWF0ZU5ld1VzZXIodm0uaW5wdXRzLm5ld0VtYWlsLCB2bS5pbnB1dHMubmV3UGFzc3dvcmQpXG5cdFx0XHQudGhlbihmdW5jdGlvbihkYlVzZXJEYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL21haW50YWluIGxvY2FsIHZhbHVlcyB0byBzcGVlZCB1cCB1c2VyIGV4cGVyaWVuY2Vcblx0XHRcdFx0bmV3VXNlckRhdGEubG9hZFByaW1hcmllcyh2bS5pbnB1dHMubmV3RW1haWwsIHZtLmlucHV0cy5uZXdOYW1lLCBkYlVzZXJEYXRhLnVpZCk7XG5cblx0XHRcdFx0Ly9jcmVhdGUgYSB1c2VyIHByb2ZpbGUgaW4gdGhlIGRhdGFiYXNlXG5cdFx0XHRcdGNyZWF0ZU5ld1VzZXIuYWRkTmV3VXNlclRvRGF0YWJhc2UoZGJVc2VyRGF0YS51aWQsIHZtLmlucHV0cy5uZXdOYW1lLCB2bS5pbnB1dHMubmV3RW1haWwpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblxuXHRcdFx0XHRcdCRsb2cuaW5mbyhtZXNzYWdlKTtcblxuXHRcdFx0XHRcdC8vYWRkIHRoaXMgdXNlciB0byB0aGUgbGlzdCBvZiByZWdpc3RlcmVkIHVzZXJzXG5cdFx0XHRcdFx0Y3JlYXRlTmV3VXNlci5hZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3QoZGJVc2VyRGF0YS51aWQsIHZtLmlucHV0cy5uZXdFbWFpbClcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbihtZXNzYWdlKSB7XG5cblx0XHRcdFx0XHRcdC8vcmVkaXJlY3QgdXNpbmcgdGhlIHVpZFxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXh0IHBhZ2UgXG5cdFx0XHRcdFx0XHRuZXdVc2VyU2hlcnBhLnJlZGlyZWN0VG8oJy91c2VySW5mb3JtYXRpb24nLCBkYlVzZXJEYXRhLnVpZCk7XG5cdFx0XHRcdFx0XHQgXG5cdFx0XHRcdFx0XHQkbG9nLmluZm8obWVzc2FnZSk7IFxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXHRcdFx0XG5cdFx0fVxuXG5cdH1cblx0XG5cdC8vcnVuIHRpbWUgYWN0aW9uc1xuXG59XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdSZWdVc2VyTG9naW5Db250cm9sbGVyJywgUmVnVXNlckxvZ2luQ29udHJvbGxlcik7XG5cblJlZ1VzZXJMb2dpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckZG9jdW1lbnQnLCAnYmFja2VuZFNlcnZpY2VzJywgJ3RyYWZmaWNWYWxldCcsICd1c2VyRGF0YSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIFJlZ1VzZXJMb2dpbkNvbnRyb2xsZXIoJGxvZywgJGRvY3VtZW50LCBiYWNrZW5kU2VydmljZXMsIHRyYWZmaWNWYWxldCwgdXNlckRhdGEpIHtcblx0dmFyIHZtID0gdGhpcztcblxuXHQvL2RlZmluZSB2bSBpbnB1dCB2YXJpYWJsZXNcblx0dm0uaW5wdXRzID0ge1xuXHRcdGVtYWlsOiAnJyxcblx0XHRwYXNzd29yZDogJycsXG5cdFx0cmVxdWlyZWRGaWVsZHNEZWZpbmVkOiBmYWxzZVxuXHR9XG5cdHZtLmVycm9ycyA9IHtcblx0XHRtZXNzYWdlOiAnJyxcblx0XHRwYXNzZXNBbGxUZXN0czogdHJ1ZVxuXHR9XG5cdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4gPSB7XG5cdFx0J3VzYWJsZSc6ZmFsc2UsIFxuXHRcdCdjbGFzcyc6J2J0biBidG4td2FybmluZycsXG5cdFx0bWVzc2FnZTogJ05lZWQgRW1haWwgJiBQYXNzJ1xuXHR9XG5cblx0Ly9tZXRob2RzXG5cdGZ1bmN0aW9uIG9wZW5Vc2VyTG9naW5CdG4oKSB7XG5cdFx0Ly9jaGVjayB0aGF0IHRoZXJlIGlzIGFuIGVtYWlsIGFuZCB0aGVyZSBpcyBhIHBhc3N3b3JkXG5cdFx0aWYoXHRhbmd1bGFyLmlzRGVmaW5lZCh2bS5pbnB1dHMuZW1haWwpICYmIHZtLmlucHV0cy5lbWFpbCAhPT0gJycgJiZcblx0XHRcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5wYXNzd29yZCkgJiYgdm0uaW5wdXRzLnBhc3N3b3JkICE9PSAnJykgXG5cdFx0e1xuXHRcdFx0dm0uaW5wdXRzLnJlcXVpcmVkRmllbGRzRGVmaW5lZCA9IHRydWU7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLmNsYXNzID0gJ2J0biBidG4tc3VjY2Vzcyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLm1lc3NhZ2UgPSAnTG9naW4nO1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkID0gZmFsc2U7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLmNsYXNzID0gJ2J0biBidG4td2FybmluZyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLm1lc3NhZ2UgPSAnTmVlZCBFbWFpbCAmIFBhc3MnO1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUgPSBmYWxzZTtcblx0XHR9XG5cblx0fVxuXG5cdC8vdmlldyBtb2RlbCBtZXRob2RzXG5cdHZtLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vc2V0IHZhbHVlc1xuXHRcdHZtLmlucHV0cy5lbWFpbCA9ICRkb2N1bWVudC5maW5kKCcjdXNlckVtYWlsJylbMF0udmFsdWU7XG5cdFx0dm0uaW5wdXRzLnBhc3N3b3JkID0gJGRvY3VtZW50LmZpbmQoJyN1c2VyUGFzc3dvcmQnKVswXS52YWx1ZTtcblx0XHRcblx0XHRvcGVuVXNlckxvZ2luQnRuKCk7XG5cdH1cblxuXHR2bS5sb2dpblJlZ2lzdGVyZWRVc2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciByZWdpc3RlcmVkVXNlclNoZXJwYSA9IHRyYWZmaWNWYWxldDtcblxuXHRcdC8vY29uZmlybSBhbGwgZmllbGRzIGFyZSB2YWxpZFxuXHRcdGlmKHRydWUpIHtcblx0XHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBkYXRhYmFzZSA9IGJhY2tlbmRTZXJ2aWNlcztcblx0XHRcdHZhciByZWdpc3RlcmVkVXNlckRhdGEgPSB1c2VyRGF0YTtcblxuXHRcdFx0Ly92ZXJpZnkgdXNlcnMgY3JlZGVudGlhbHNcblx0XHRcdGRhdGFiYXNlLkxvZ2luUmVnaXN0ZXJlZFVzZXIodm0uaW5wdXRzLmVtYWlsLCB2bS5pbnB1dHMucGFzc3dvcmQpXG5cdFx0XHQudGhlbihmdW5jdGlvbih1c2VyQ3JlZGVudGlhbHMpIHtcblx0XHRcdFx0Ly9pZiBubyB0cm91YmxlIGxvZ2dpbmcgaW4gdXBkYXRlIGVycm9yIG9iamVjdFxuXHRcdFx0XHR2bS5lcnJvcnMucGFzc2VzQWxsVGVzdHMgPSB0cnVlO1xuXG5cdFx0XHRcdC8vYWRkIHByaW1hcnkgaW5mb3JtYXRpb24gdG8gbG9jYWwgbW9kZWxcblx0XHRcdFx0cmVnaXN0ZXJlZFVzZXJEYXRhLnNldFByaW1hcmllc0xvY2FsbHkodm0uaW5wdXRzLmVtYWlsLCB2bS5pbnB1dHMubmFtZSwgdXNlckNyZWRlbnRpYWxzLnVpZCk7XG5cblx0XHRcdH0pXG5cdFx0XHQudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdFx0JGxvZy5pbmZvKFwidWlkIGlzIFwiICsgcmVnaXN0ZXJlZFVzZXJEYXRhLmdldFVJRExvY2FsbHkoKSk7XG5cblx0XHRcdFx0ZGF0YWJhc2UuZ2V0VXNlckJpbyhyZWdpc3RlcmVkVXNlckRhdGEuZ2V0VUlETG9jYWxseSgpKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbih1c2VyQmlvKSB7XG5cdFx0XHRcdFx0Ly91cGRhdGUgdXNlckRhdGEgbW9kZWwgd2l0aCB1c2VyQmlvXG5cdFx0XHRcdFx0cmVnaXN0ZXJlZFVzZXJEYXRhLnVwZGF0ZUJpb0xvY2FsbHkodXNlckJpbyk7XG5cblx0XHRcdFx0XHQvL2xvYWQgdXNlciBldmVudHNcblx0XHRcdFx0XHRkYXRhYmFzZS5nZXRVc2VyRXZlbnRzKHJlZ2lzdGVyZWRVc2VyRGF0YS5nZXRVSURMb2NhbGx5KCkpXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oYWxsRXZlbnRzRm9yVGhpc1VzZXIpIHtcblx0XHRcdFx0XHRcdC8vdXBkYXRlIHVzZXJEYXRhIG1vZGVsIHdpdGggdXNlckV2ZW50c1xuXHRcdFx0XHRcdFx0cmVnaXN0ZXJlZFVzZXJEYXRhLnVwZGF0ZUFsbFVzZXJFdmVudHNMb2NhbGx5KGFsbEV2ZW50c0ZvclRoaXNVc2VyKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5jYXRjaChmdW5jdGlvbihtZXNzYWdlKSB7ICRsb2cuaW5mbyhtZXNzYWdlKTsgfSlcblxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cblx0XHRcdFx0Ly9yZWRpcmVjdCB0byB0aGUgbmV4dCBwYWdlIFxuXHRcdFx0XHRyZWdpc3RlcmVkVXNlclNoZXJwYS5yZWRpcmVjdFRvKCcvdXNlckluZm9ybWF0aW9uJywgcmVnaXN0ZXJlZFVzZXJEYXRhLmdldFVJRExvY2FsbHkoKSk7XG5cblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyBcblx0XHRcdFx0Ly9pZiB0aGVyZSB3YXMgYW4gZXJyb3IgbG9nZ2luZyBpbiwgbGV0IHRoZSB1c2VyIGtub3dcblx0XHRcdFx0dm0uZXJyb3JzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRcdFx0XHR2bS5lcnJvcnMucGFzc2VzQWxsVGVzdHMgPSBmYWxzZTtcblx0XHRcdH0pXG5cblx0XHRcdC8vdXNlIHVpZCB0byBjb2xsZWN0IHVzZXIgYmlvXG5cdFx0XHRcblx0XHR9XG5cblx0fVxuXG5cdHZtLmNsaWNrZWQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgdXNlckF1dGhlbnRpY2F0aW9uID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0dXNlckF1dGhlbnRpY2F0aW9uLmxvZ1VzZXJPdXQoKTtcblx0fVxuXG5cdC8vcnVuIGNvbW1hbmRzXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcigndG9wTWVudUNvbnRyb2xsZXInLCB0b3BNZW51Q29udHJvbGxlcik7XG5cbnRvcE1lbnVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICckZG9jdW1lbnQnLCAnJHdpbmRvdyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRvcE1lbnVDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uLCAkZG9jdW1lbnQsICR3aW5kb3cpIHtcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHQvL2xvY2FsIHZhcmlhYmxlc1xuXHR2bS5sb2dnZWRJbiA9IGZhbHNlXG5cblx0Ly9zdHlsZXMgdmFyaWFibGVzXG5cdFxuXHQvL2V2ZW50IGxpc3RlbmVyc1xuXHRpZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluICRkb2N1bWVudCkge1xuXHQgICAgJGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvZy5pbmZvKCdhZGRpbmcgRmFzdENsaWNrJyk7XG5cdCAgICAgICAgRmFzdENsaWNrLmF0dGFjaCgkZG9jdW1lbnQuYm9keSk7XG5cdCAgICB9LCBmYWxzZSk7XG5cdH1cblxuXHRhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZCgncmVzaXplJywgZnVuY3Rpb24oKSB7XG5cdFx0dm0ub25SZXNpemVGdW5jdGlvbigpO1xuXHRcdCRzY29wZS4kYXBwbHkoKTtcblx0fSk7XG5cblx0YW5ndWxhci5lbGVtZW50KCRkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0aWYoJHdpbmRvdy5vdXRlcldpZHRoIDwgNjAwKSB7XG5cdFx0XHR2bS5vblJlc2l6ZUZ1bmN0aW9uKCk7XG5cdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdFx0fVxuXHR9KVxuXHQvL2R5bmFtaWNhbGx5IHNldCBpbnB1dCB3aWR0aFxuXG5cblx0Ly8gQ3JlYXRlIGEgY2FsbGJhY2sgd2hpY2ggbG9ncyB0aGUgY3VycmVudCBhdXRoIHN0YXRlXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cdFx0dm0ub25SZXNpemVGdW5jdGlvbigpO1xuXHRcdCRzY29wZS4kYXBwbHkoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGF1dGhEYXRhQ2FsbGJhY2soYXV0aERhdGEpIHtcblx0ICBpZiAoYXV0aERhdGEpIHtcblx0ICAgICRsb2cuaW5mbyhcIlVzZXIgXCIgKyBhdXRoRGF0YS51aWQgKyBcIiBpcyBsb2dnZWQgaW4gd2l0aCBcIiArIGF1dGhEYXRhLnByb3ZpZGVyKTtcblx0ICAgIHZtLmxvZ2dlZEluID0gdHJ1ZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgJGxvZy5pbmZvKFwiVXNlciBpcyBsb2dnZWQgb3V0XCIpO1xuXHQgICAgdm0ubG9nZ2VkSW4gPSBmYWxzZTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiByZWRpcmVjdChwYXRoLCB1c2VyRGF0YSkge1xuXHRcdHZhciBmdWxsUGF0aCA9IHBhdGggKyAnLycgKyB1c2VyRGF0YS51aWQgKyAnLycgKyB1c2VyRGF0YS50b2tlbjtcblx0XHQvL3JlZGlyZWN0XG5cdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyB0bzogJyArIGZ1bGxQYXRoKTtcblx0XHQkbG9jYXRpb24ucGF0aChmdWxsUGF0aCk7XG5cdFx0Ly8kc2NvcGUuJGFwcGx5KCk7XG5cdH1cblxuXHQvL3ZtIGFjY2Vzc2libGUgbWV0aG9kc1xuXHR2bS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9nLmluZm8oJ2xvZ2dpbmcgb3V0IScpO1xuXHRcdHZtLmxvZ2dlZEluID0gZmFsc2U7XG5cdFx0cmVmLnVuYXV0aCgpO1xuXHRcdHJlZGlyZWN0KCcvJywge3VpZDonJywgdG9rZW46Jyd9KTtcblx0fVxuXG5cdHZtLm5hdkJhckxvZ2luUmVnaXN0ZXJlZFVzZXIgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9nLmluZm8oJ2xhdW5jaGluZyBsb2dpbicpO1xuXHRcdGlmKHRydWUpIHtcblx0XHQvL2lmKHZtLnVuY2xvY2tVc2VyTG9naW5CdG4udXNhYmxlKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZVxuXHRcdFx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0XHRcdC8vYXV0aGVudGljYXRlIHRoZSB1c2VyXG5cdFx0XHRyZWYuYXV0aFdpdGhQYXNzd29yZCh7XG5cdFx0XHRcdGVtYWlsOiB2bS5uYXZiYXJVc2VyRW1haWwsXG5cdFx0XHRcdHBhc3N3b3JkOiB2bS5uYXZiYXJVc2VyUGFzc1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IsIGF1dGhEYXRhKSB7XG5cdFx0XHRcdGlmKGVycm9yKSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdFcnJvciBMb2dnaW5nIEluOiAnICsgZXJyb3IpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnTG9nZ2VkIEluIHN1Y2Nlc3NmdWxseTogJyArIGF1dGhEYXRhLnVpZCk7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKGF1dGhEYXRhKTtcblx0XHRcdFx0XHQvL3NhdmUgYWxsIHRoZSBkYXRhXG5cblx0XHRcdFx0XHQvL2xvYWQgdXNlciBiaW9cblx0XHRcdFx0XHQvL2xvYWQgdXNlciBldmVudHNcblxuXHRcdFx0XHRcdC8vcmVkaXJlY3Rcblx0XHRcdFx0XHRyZWRpcmVjdCgnL3VzZXJJbmZvcm1hdGlvbicsIGF1dGhEYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cblx0XHRcdFx0XHQvL2NsaWNrIGNsb3NlZCB0aGUgbmF2YmFyXG5cdFx0XHRcdFx0YW5ndWxhci5lbGVtZW50KCcubmF2YmFyLXRvZ2dsZScpLmNsaWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cblxuXHRcdH1cblxuXHR9XG5cblx0dm0ub25SZXNpemVGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuYXZiYXJJbnB1dHMgPSBhbmd1bGFyLmVsZW1lbnQoJy5uYXZiYXJJbnB1dHMnKTtcblx0XHRuYXZiYXJJbnB1dHMuY3NzKCd3aWR0aCcsICgkd2luZG93Lm91dGVyV2lkdGggLSAyNikgKyAncHgnKTtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjYWxsYmFjayB0byBiZSBmaXJlZCBldmVyeSB0aW1lIGF1dGggc3RhdGUgY2hhbmdlc1xuXHRyZWYub25BdXRoKGF1dGhEYXRhQ2FsbGJhY2spO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1VzZXJFdmVudHNDb250cm9sbGVyJywgVXNlckV2ZW50c0NvbnRyb2xsZXIpO1xuXG5Vc2VyRXZlbnRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICd1c2VyRGF0YScsICd0cmFmZmljVmFsZXQnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBVc2VyRXZlbnRzQ29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsIHVzZXJEYXRhLCB0cmFmZmljVmFsZXQpIHtcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGN1cnJlbnRVc2VyID0gdXNlckRhdGE7XG5cblx0Ly9sb2NhbCB2aWV3IHZhcmlhYmxlc1xuXHR2bS5zaG93RGVjbGluZSA9IGZhbHNlO1x0Ly93aGF0IGlzIHRoaXMgYmVpbmcgdXNlZCBmb3I/XG5cdHZtLnVzZXJCaW8gPSB7fVxuXHR2bS5ldmVudHMgPSB7fTtcblx0dm0uc2VjdGlvbkF2YWlsYWJsZSA9IHtcblx0XHRwZW5kaW5nOiBmYWxzZSxcblx0XHRhdHRlbmRpbmc6IGZhbHNlLFxuXHRcdGhvc3Rpbmc6IGZhbHNlLFxuXHRcdGNvbXBsZXRlZDogZmFsc2Vcblx0fTtcblx0dm0uZXJyb3JzID0ge307XG5cblx0Ly9kZWNsYXJlIGxvY2FsIG1ldGhvZHNcblx0ZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIG5vT2ZIb3N0ZUV2ZW50cygpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVcblx0XHR2YXIgY291bnRlciA9IDA7XG5cblx0XHRmb3IoZXZlbnQgaW4gdm0uZXZlbnRzLmhvc3RpbmcpIGNvdW50ZXIrKztcblxuXHRcdHJldHVybiBjb3VudGVyO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVFdmVudElEKCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0dmFyIGV2ZW50SUQgPSAoZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGUpICogMTApICsgKG5vT2ZIb3N0ZUV2ZW50cygpKTtcblxuXHRcdHJldHVybiBldmVudElEO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tGb3JFdmVudHMoKSB7XG5cdFx0XG5cdFx0Ly9sb29wIHRocm91Z2ggYWxsIHRoZSBldmVudCBjYXRlZ29yaWVzXG5cdFx0T2JqZWN0LmtleXModm0uZXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGNhdGVnb3J5KSB7XG5cdFx0XHRcblx0XHRcdC8vaW5zaWRlIGVhY2ggY2F0ZWdvcnkgY291bnQgdGhlIG51bWJlciBvZiBldmVudCBvYmplY3RzLi4uTk9UIHVwZGF0ZWQgcGxhY2Vob2xkZXIgdGhvdWdoXG5cdFx0XHRPYmplY3Qua2V5cyh2bS5ldmVudHNbY2F0ZWdvcnldKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50SUQpIHtcblx0XHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHRcdHZhciBjb3VudGVyID0gMDtcblx0XHRcdFx0Ly9jb3VudCBldmVudHMgd2l0aCBpZCdzIC8gTk9UICd1cGRhdGVkJyBwbGFjZWhvbGRlcnNcblx0XHRcdFx0aWYoYW5ndWxhci5pc09iamVjdCh2bS5ldmVudHNbY2F0ZWdvcnldW2V2ZW50SURdKSkgY291bnRlcisrO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9pZiBhdCBsZWFzdCBvbmUgZXZlbnQgaWQgKG9iamVjdCkgd2FzIGNvdW50ZWQsIHRoZW4gc2hvdyB0aGUgc2VjdGlvblxuXHRcdFx0XHRpZihjb3VudGVyID4gMCkgdm0uc2VjdGlvbkF2YWlsYWJsZVtjYXRlZ29yeV0gPSB0cnVlO1xuXHRcdFx0XHRlbHNlIHZtLnNlY3Rpb25BdmFpbGFibGVbY2F0ZWdvcnldID0gZmFsc2U7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuXHRcdC8vbWFrZSBzdXJlIHRoZSB1aWQgaXMgc2V0XG5cdFx0Y3VycmVudFVzZXIuc2V0VUlETG9jYWxseSgkcm91dGVQYXJhbXMudWlkKTtcblxuXHRcdC8vbG9hZCB0aGUgdXNlciBiaW9cblx0XHRjdXJyZW50VXNlci5sb2FkQmlvKCRyb3V0ZVBhcmFtcy51aWQpXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmV0cmlldmVkQmlvKSB7XG5cdFx0XHR2bS51c2VyQmlvID0gcmV0cmlldmVkQmlvO1xuXHRcdH0pXG5cdFx0LmNhdGNoKClcblxuXHRcdC8vbG9hZCB1c2VyIGV2ZW50cyBwcm9ncmVzc2l2bGV5XG5cdFx0Ly9maXN0IHdoYXRldmVyIGlzIGluIHRoZSBtb2RlbCBhbHJlYWR5XG5cdFx0dm0uZXZlbnRzID0gY3VycmVudFVzZXIuZ2V0QWxsVXNlckV2ZW50c0xvY2FsbHkoKTtcblxuXHRcdC8vdGhlbiBjYWxsIHRvIHRoZSBkYiBhbmQgZ2V0IHRoZSBtb3N0IHVwIHRvIGRhdGUgaW5mb1xuXHRcdGN1cnJlbnRVc2VyLmdldFJlbW90ZUV2ZW50c0ZvckxvY2FsKClcblx0XHQudGhlbihmdW5jdGlvbihvYnRhaW5lZFVzZXJFdmVudHMpIHtcblxuXHRcdFx0Ly91cGRhdGUgdGhlIHZpZXcgbW9kZWwgd2l0aCB0aGUgdXBkYXRlZCBEQiByZXN1bHRzXG5cdFx0XHR2bS5ldmVudHMgPSBjdXJyZW50VXNlci5nZXRBbGxVc2VyRXZlbnRzTG9jYWxseSgpO1xuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQvL25vdyB0aGF0IGV2ZW50cyBhcmUgbG9hZGVkLCByZWZsZWN0IGl0IGluIHRoZSB2aWV3IG1vZGVsXG5cdFx0XHRjaGVja0ZvckV2ZW50cygpO1xuXHRcdH0pXG5cblx0fVxuXG5cdC8vZGVjbGFyZSB2aWV3IG1ldGhvZHNcblx0dm0uY3JlYXRlTmV3RXZlbnQgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZXZlbnRJRCA9IGdlbmVyYXRlRXZlbnRJRCgpO1xuXHRcdHZhciBuZXdFdmVudFNoZXJwYSA9IHRyYWZmaWNWYWxldDtcblxuXHRcdC8vYWRkIHRoZSBldmVudCB0byB0aGUgbW9kYWwgKGxvY2FsbHkgdGhlbiBvbiB0aGUgZGIpXG5cdFx0Y3VycmVudFVzZXIuY3JlYXRlTmV3RXZlbnQoZXZlbnRJRClcblx0XHQudGhlbihmdW5jdGlvbihhZmZpcm1hdGl2ZVJlc3BvbnNlKSB7XG5cdFx0XHQvL3JlcG9ydCB0aGUgc3VjY2Vzc1xuXHRcdFx0JGxvZy5pbmZvKGFmZmlybWF0aXZlUmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQvL2lmIHRoZXJlIHdhcyBhbiB1cGRhdGVkIGZpZWxkLCByZW1vdmUgaXQgbm93XG5cdFx0XHRjdXJyZW50VXNlci5jbGVhbkRCRXZlbnRzQ2F0ZWdvcnkoJ2hvc3RpbmcnKTtcblxuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yUmVzcG9uc2UpIHtcblx0XHRcdC8vcmVwb3J0IHRoZSBlcnJvclxuXHRcdFx0JGxvZy5pbmZvKGVycm9yUmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0XG5cblx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXcgZXZlbnQgcGFnZVx0XHRcblx0XHRuZXdFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvZXZlbnQnLCBldmVudElELCBjdXJyZW50VXNlci5nZXRVSURMb2NhbGx5KCksIGN1cnJlbnRVc2VyLmdldFVJRExvY2FsbHkoKSk7XG5cdH1cblxuXHQvL2V4ZWN1dGUgc2NyaXB0c1xuXHRpbml0aWFsaXplKCk7XG5cbn1cbiIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1VzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXInLCBVc2VySW5mb3JtYXRpb25Db250cm9sbGVyKTtcblxuVXNlckluZm9ybWF0aW9uQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRkb2N1bWVudCcsICckcm91dGVQYXJhbXMnLCd1c2VyRGF0YScsICd0cmFmZmljVmFsZXQnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBVc2VySW5mb3JtYXRpb25Db250cm9sbGVyKCRsb2csICRkb2N1bWVudCwgJHJvdXRlUGFyYW1zLCB1c2VyRGF0YSwgdHJhZmZpY1ZhbGV0KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdFxuXHQvL2xvY2FsIHZhcmlhYmxlc1xuXHR2YXIgY3VycmVudFVzZXIgPSB1c2VyRGF0YTtcblxuXHQvL3ZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdHZtLnVzZXIgPSB7fTtcblx0dm0udGVtcEJpcnRoZGF5O1xuXHR2bS52aWV3ID0ge1xuXHRcdGRhdGFUb1NhdmU6IGZhbHNlLFxuXHRcdGlzRGF0YTogZmFsc2UsXG5cdFx0YnRuTXNzZzogJ01vdmUgT24uLi4nLFxuXHRcdHByb2NlZWRCdG46ICdidG4gYnRuLXByaW1hcnknXG5cdH07XG5cblx0Ly9sb2NhbCBtZXRob2RzXG5cdGZ1bmN0aW9uIHVuaXhUaW1lVG9EYXRlVGltZSh1bml4VGltZSkge1xuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh1bml4VGltZSkpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGRhdGVUaW1lVG9Vbml4VGltZShkYXRlVGltZSkge1xuXHRcdHJldHVybiBEYXRlLnBhcnNlKGRhdGVUaW1lKTtcblx0fTtcblxuXHQvL3ZpZXcgYWNjZXNzaWJsZSBtZXRob2RzXG5cdHZtLmNoZWNrVmFsdWVzID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly90aHJvdyB0aGUgaXNEYXRhIGZsYWcgaWYgc29tZXRoaW5nIGlzIHVwZGF0ZWRcblx0XHR2bS52aWV3LmlzRGF0YSA9IHRydWU7XG5cblx0XHRpZiggIShhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLnVzZXIuY29tcGFueSkgfHwgdm0udXNlci5jb21wYW55ID09PSAnJykgfHwgXG5cdFx0XHQhKGFuZ3VsYXIuaXNVbmRlZmluZWQodm0udXNlci50aXRsZSkgfHwgdm0udXNlci50aXRsZSA9PT0gJycpIHx8IFxuXHRcdFx0IShhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLnVzZXIuZG9iKSB8fCB2bS51c2VyLmRvYiA9PT0gJycpKSBcblx0XHR7XG5cdFx0XHR2bS52aWV3LmRhdGFUb1NhdmUgPSB0cnVlO1xuXHRcdFx0dm0udmlldy5wcm9jZWVkQnRuID0gJ2J0biBidG4tc3VjY2Vzcyc7XG5cdFx0XHR2bS52aWV3LmJ0bk1zc2cgPSAnU2F2ZSAmIENvbnRpbnVlJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dm0udmlldy5kYXRhVG9TYXZlID0gZmFsc2U7XG5cdFx0XHR2bS52aWV3LnByb2NlZWRCdG4gPSAnYnRuIGJ0bi1wcmltYXJ5Jztcblx0XHRcdHZtLnZpZXcuYnRuTXNzZyA9ICdNb3ZlIE9uLi4uJztcdFxuXHRcdH1cblxuXHR9XG5cblx0dm0udXBkYXRlRE9CID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0udXNlci5kb2IgPSBkYXRlVGltZVRvVW5peFRpbWUodm0udGVtcEJpcnRoZGF5KTtcblx0XHR2bS5jaGVja1ZhbHVlcygpO1xuXHR9XG5cblx0dm0uc2F2ZUFuZE1vdmVPbiA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHVzZXJJbmZvU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXHRcdHZhciBjdXJyZW50VWlkID0gY3VycmVudFVzZXIuZ2V0VUlETG9jYWxseSgpO1xuXG5cdFx0Ly9jb252ZXJ0IERPQiB0byB1bml4VGltZSBhbmQgc2F2ZVxuXHRcdGlmKHZtLnRlbXBCaXJ0aGRheSAhPT0gMCkgdm0udXBkYXRlRE9CKCk7XG5cdFx0XG5cdFx0Ly9pZiB0aGVyZSBpc24ndCBjdXJyZW50bHkgYSBkb2IsIGdyYWIgZnJvbSB0aGUgcm91dGUgcGFyYW1zXG5cdFx0aWYoY3VycmVudFVpZCA9PSAnJyB8fCBhbmd1bGFyLmlzVW5kZWZpbmVkKGN1cnJlbnRVaWQpKSB7XG5cdFx0XHRjdXJyZW50VXNlci5zZXRVSURMb2NhbGx5KCRyb3V0ZVBhcmFtcy51aWQpO1xuXHRcdH1cblxuXHRcdC8vaWYgdGhlcmUgaXMgbmV3IGRhdGEsIHNhdmUgaXRcblx0XHRpZih2bS52aWV3LmlzRGF0YSkge1xuXHRcdFx0JGxvZy5pbmZvKCdzYXZpbmcgdGhlIG5ldyBkYXRhJyk7XG5cdFx0XHRjdXJyZW50VXNlci51cGRhdGVCaW9Mb2NhbGx5KHZtLnVzZXIpO1xuXHRcdH1cblx0XHRcblx0XHQvL21vdmUgb25cblx0XHR1c2VySW5mb1NoZXJwYS5yZWRpcmVjdFRvKCcvdXNlckV2ZW50cycsIHZtLnVzZXIudWlkKVxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcblx0XHQvL2xvYWQgRmFzdENsaWNrXG5cdFx0Ly9GYXN0Q2xpY2suYXR0YWNoKCRkb2N1bWVudC5ib2R5KTtcblx0XHRcblx0XHQvL2xvYWQgdXNlckRhdGEgbG9jYWxseSBvciBmcm9tIGRiXG5cdFx0Y3VycmVudFVzZXIubG9hZEJpbygkcm91dGVQYXJhbXMudWlkKVxuXHRcdC50aGVuKGZ1bmN0aW9uKG9idGFpbmVkVXNlckRhdGEpIHtcblx0XHRcdC8vYXNzaWduIHVzZXIgdmFsdWVzXG5cdFx0XHR2bS51c2VyID0gb2J0YWluZWRVc2VyRGF0YTtcblxuXHRcdFx0Ly9idWlsZCB0ZW1wQmlydGhkYXlcblx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKG9idGFpbmVkVXNlckRhdGEuZG9iKSAmJiBvYnRhaW5lZFVzZXJEYXRhLmRvYiAhPT0gJycpIHtcblx0XHRcdFx0dm0udGVtcEJpcnRoZGF5ID0gdW5peFRpbWVUb0RhdGVUaW1lKG9idGFpbmVkVXNlckRhdGEuZG9iKVxuXHRcdFx0fVxuXG5cdFx0fSk7XG5cdFxuXHR9XG5cblx0Ly9ydW4gcHJvY2Vzc2VzXG5cdGluaXRpYWxpemUoKTsgLy93aXRoIGludGVybmV0IHVzZSB0aGUgZXZlbnQgbGlzdGVuZXIgaW5zdGVhZFxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ2F1dGhTZXJ2aWNlJywgYXV0aFNlcnZpY2UpO1xuXG5hdXRoU2VydmljZS4kaW5qZWN0ID0gWyckbG9nJywgJ2JhY2tlbmRTZXJ2aWNlcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGF1dGhTZXJ2aWNlKCRsb2csIGJhY2tlbmRTZXJ2aWNlcykge1xuXG5cdHZhciBhbGxBdXRoU2VydmljZXMgPSB7XG5cdFx0aXNMb2dnZWRJbjogaXNMb2dnZWRJblxuXHR9O1xuXG5cdGZ1bmN0aW9uIGlzTG9nZ2VkSW4oKSB7XG5cdFx0Ly9jaGVjayB0aGUgdXNlciBhdXRoZW50aWNhaW9uIHN0YXRlXG5cdFx0dmFyIGRiQXV0aGVudGljYXRpb24gPSBiYWNrZW5kU2VydmljZXM7XG5cdFx0XG5cdFx0ZGJBdXRoZW50aWNhdGlvbi5jaGVja0xvZ2luU3RhdHVzKClcblx0XHQudGhlbihmdW5jdGlvbihzdGF0dXMpIHtcblx0XHRcdHJldHVybiBzdGF0dXM7XG5cdFx0fSlcblx0XHQuY2F0Y2goZnVuY3Rpb24oc3RhdHVzKSB7XG5cdFx0XHRyZXR1cm4gc3RhdHVzO1xuXHRcdH0pXG5cdH1cblx0XG5cdHJldHVybiBhbGxBdXRoU2VydmljZXM7XG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5mYWN0b3J5KCdiYWNrZW5kU2VydmljZXMnLCBiYWNrZW5kU2VydmljZXMpO1xuXG5iYWNrZW5kU2VydmljZXMuJGluamVjdCA9IFsnJGxvZycsICckcScsICckd2luZG93J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYmFja2VuZFNlcnZpY2VzKCRsb2csICRxLCAkd2luZG93KSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgYWxsQmFja2VuZFNlcnZpY2VzID0ge1xuXHRcdHV0ZjhfdG9fYjY0OiB1dGY4X3RvX2I2NCwgXHRcdFx0XHRcdFx0Ly9sb2NhbCBmdW5jdGlvbnMgdG8gY29udmVydCBkYXRlc1xuXHRcdGI2NF90b191dGY4OiBiNjRfdG9fdXRmOCxcblx0XHR1bml4VGltZVRvRGF0ZVRpbWU6IHVuaXhUaW1lVG9EYXRlVGltZSxcblx0XHRkYXRlVGltZVRvVW5peFRpbWU6IGRhdGVUaW1lVG9Vbml4VGltZSxcblxuXHRcdExvZ2luUmVnaXN0ZXJlZFVzZXI6IExvZ2luUmVnaXN0ZXJlZFVzZXIsXHRcdC8vYXV0aGVudGljYWlvblxuXHRcdGNoZWNrTG9naW5TdGF0dXM6IGNoZWNrTG9naW5TdGF0dXMsXG5cdFx0bG9nVXNlck91dDogbG9nVXNlck91dCxcblxuXHRcdGRvd25sb2FkVXNlckRhdGE6IGRvd25sb2FkVXNlckRhdGEsXHRcdFx0XHQvL2dldHRlciBtZXRob2RzXG5cdFx0Z2V0VXNlckJpbzogZ2V0VXNlckJpbyxcblx0XHRnZXRVc2VyRXZlbnRzOiBnZXRVc2VyRXZlbnRzLFxuXHRcdGdldEFIb3N0ZWRFdmVudDogZ2V0QUhvc3RlZEV2ZW50LFxuXHRcdGdldEFuSW52aXRlZEV2ZW50OiBnZXRBbkludml0ZWRFdmVudCxcblx0XHRmaW5kR3Vlc3RVSUQ6IGZpbmRHdWVzdFVJRCxcblx0XHRnZXRHdWVzdExpc3RGb3JFdmVudDogZ2V0R3Vlc3RMaXN0Rm9yRXZlbnQsXG5cblx0XHRjcmVhdGVOZXdVc2VyOiBjcmVhdGVOZXdVc2VyLFx0XHRcdFx0XHQvL3NldHRlciBNZXRob2RzXG5cdFx0YWRkTmV3VXNlclRvRGF0YWJhc2U6IGFkZE5ld1VzZXJUb0RhdGFiYXNlLFxuXHRcdGFkZE5ld1VzZXJUb1JlZ1VzZXJzTGlzdDogYWRkTmV3VXNlclRvUmVnVXNlcnNMaXN0LFxuXHRcdHVwbG9hZFVzZXJEYXRhOiB1cGxvYWRVc2VyRGF0YSxcblx0XHR1cGxvYWRVc2VyQmlvOiB1cGxvYWRVc2VyQmlvLFxuXHRcdGNyZWF0ZUhvc3RlZEV2ZW50OiBjcmVhdGVIb3N0ZWRFdmVudCxcblx0XHRhZGRHdWVzdFRvSG9zdEd1ZXN0TGlzdG9uREI6IGFkZEd1ZXN0VG9Ib3N0R3Vlc3RMaXN0b25EQixcblx0XHQvL2FkZFBlbmRpbmdFdmVudEZvclVzZXI6IGFkZFBlbmRpbmdFdmVudEZvclVzZXIsXG5cdFx0Ly9hZGRQZW5kaW5nRXZlbnRGb3JHdWVzdDogYWRkUGVuZGluZ0V2ZW50Rm9yR3Vlc3QsXG5cblx0XHRkZWxldGVVcGRhdGVGaWVsZDogZGVsZXRlVXBkYXRlRmllbGQsXHRcdFx0Ly9kZWxldGUgbWV0aG9kc1xuXG5cdFx0dGhlcmVXYXNBblVwZGF0ZUZpZWxkOiB0aGVyZVdhc0FuVXBkYXRlRmllbGRcdC8vbW9kZWwgbWFpbnRhaW5hbmNlXG5cdH07XG5cblx0ZnVuY3Rpb24gdXRmOF90b19iNjQoc3RyKSB7XG5cdFx0cmV0dXJuIGJ0b2Eoc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NF90b191dGY4KHN0cikge1xuICAgIFx0cmV0dXJuIGF0b2Ioc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHVuaXhUaW1lVG9EYXRlVGltZSh1bml4VGltZSkge1xuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh1bml4VGltZSkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlTmV3VXNlcihlbWFpbCwgcGFzc3dvcmQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGZpcmVCYXNlQWNjb3VudHMgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdFxuXHRcdC8vcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFxuXHRcdFx0ZmlyZUJhc2VBY2NvdW50cy5jcmVhdGVVc2VyKHtcblx0XHRcdFx0XG5cdFx0XHRcdGVtYWlsOiBlbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0XHRcblx0XHRcdH0sZnVuY3Rpb24oZXJyb3IsIHVzZXJEYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KCdFcnJvciBjcmVhdGluZyB1c2VyOiAnICsgZXJyb3IpO1xuXG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSh1c2VyRGF0YSk7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkTmV3VXNlclRvRGF0YWJhc2UodWlkLCBuYW1lLCBlbWFpbCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgYXBwVXNlcnMgPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKTtcblx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0Ly9yZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHRhcHBVc2Vycy5zZXQoeyBcblx0XHRcdFx0J2Jpbyc6IHtcblx0XHRcdFx0XHQndWlkJzogdWlkLFxuXHRcdFx0XHRcdCduYW1lJzogbmFtZSxcblx0XHRcdFx0XHQnZW1haWwnOiBlbWFpbFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQnZXZlbnRzJzoge1xuXHRcdFx0XHRcdCdwZW5kaW5nJzoge1xuXHRcdFx0XHRcdFx0J3VwZGF0ZWQnOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQnaG9zdGluZyc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2F0dGVuZGluZyc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2NvbXBsZXRlZCc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnRGF0YSBjb3VsZCBub3QgYmUgc2F2ZWQ6ICcgKyBlcnJvcik7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbHNlIHJlc29sdmUoJ0RhdGEgc2F2ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3QodWlkLCBlbWFpbCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgYjY0RW1haWwgPSB1dGY4X3RvX2I2NChlbWFpbCk7XG5cdFx0dmFyIFJlZ2lzdGVyZWRVc2Vyc0xpc3QgPSBhcHAuY2hpbGQoJ1VpZHMnKS5jaGlsZChiNjRFbWFpbCk7XG5cblx0XHQvL3JldHVybiBhIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdFJlZ2lzdGVyZWRVc2Vyc0xpc3Quc2V0KHVpZCwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdChcIkRhdGEgY291bGQgbm90IGJlIHNhdmVkLiBcIiArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKFwidWlkIGNyZWF0ZWQgc3VjZXNzZnVsbHkuXCIpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gTG9naW5SZWdpc3RlcmVkVXNlcihlbWFpbCwgcGFzc3dvcmQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0XG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvL2F1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0YXBwLmF1dGhXaXRoUGFzc3dvcmQoe1xuXG5cdFx0XHRcdGVtYWlsOiBlbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yLCBhdXRoRGF0YSkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoJ0Vycm9yIExvZ2dpbmcgSW46ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdMb2dnZWQgSW4gc3VjY2Vzc2Z1bGx5OiAnICsgYXV0aERhdGEudWlkKTtcblx0XHRcdFx0XHRyZXNvbHZlKGF1dGhEYXRhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHRcdFxuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tMb2dpblN0YXR1cygpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdGFwcC5vbkF1dGgoZnVuY3Rpb24oYXV0aERhdGEpIHtcblx0XHRcdFx0aWYgKGF1dGhEYXRhKSB7XG5cdFx0XHRcdCAgICAkbG9nLmluZm8oXCJVc2VyIFwiICsgYXV0aERhdGEudWlkICsgXCIgaXMgbG9nZ2VkIGluIHdpdGggXCIgKyBhdXRoRGF0YS5wcm92aWRlcik7XG5cdFx0XHRcdCAgICByZXNvbHZlKHRydWUpO1xuXHRcdFx0XHQgIH0gZWxzZSB7XG5cdFx0XHRcdCAgICAkbG9nLmluZm8oXCJVc2VyIGlzIGxvZ2dlZCBvdXRcIik7XG5cdFx0XHRcdCAgICByZXNvbHZlKGZhbHNlKTtcblx0XHRcdFx0ICB9XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gbG9nVXNlck91dCgpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0XHQkbG9nLmluZm8oJ2xvZ2dpbmcgdXNlciBvdXQnKTtcblx0XHRhcHAudW5hdXRoKCk7XG5cdH1cblxuXHRmdW5jdGlvbiB1cGxvYWRVc2VyRGF0YShhbGxVc2VyRGF0YSkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgdWlkID0gYWxsVXNlckRhdGEudWlkO1xuXHRcdHZhciByZW1vdGVVc2VyID0gYXBwLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdGhlIGFjdHVhbCBjYWxsXG5cdFx0XHRyZW1vdGVVc2VyLnVwZGF0ZShhbGxVc2VyRGF0YSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnVGhlcmUgd2FzIGEgcHJvYmxlbSB1cGRhdGluZyB0aGF0IHJlY29yZDogJyArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdhbGwgdXNlciBkYXRhIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblx0XHRcblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZFVzZXJCaW8oY3VycmVudFVzZXJCaW8pIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIHVpZCA9IChjdXJyZW50VXNlckJpby51aWQpLnRvU3RyaW5nKCk7XG5cdFx0dmFyIHJlbW90ZVVzZXJCaW8gPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnYmlvJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9jYWxsIHRvIHRoZSBkYlxuXHRcdFx0cmVtb3RlVXNlckJpby51cGRhdGUoY3VycmVudFVzZXJCaW8sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoJ1RoZXJlIHdhcyBhIHByb2JsZW0gdXBkYXRpbmcgdGhhdCByZWNvcmQ6ICcgKyBlcnJvcik7XG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSgnYWxsIHVzZXIgYmlvIGRhdGEgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9KVxuXG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBkb3dubG9hZFVzZXJEYXRhKCkge1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyQmlvKHVpZCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgdXNlckJpbyA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdiaW8nKTtcblxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90aGUgYWN0dWFsIGNhbGxcblx0XHRcdHVzZXJCaW8ub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0XHQvL3doZW4gdGhlIGNhbGwgaXMgc3VjY2Vzc2Z1bCByZXR1cm4gdGhlIGRhdGFcblx0XHRcdFx0cmVzb2x2ZShzbmFwc2hvdC52YWwoKSk7XG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0gXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlSG9zdGVkRXZlbnQodWlkLCBuZXdFdmVudCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgZXZlbnRJRCA9IG5ld0V2ZW50LmlkO1xuXHRcdHZhciBuZXdIb3N0ZWRFdmVudCA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgnaG9zdGluZycpLmNoaWxkKGV2ZW50SUQpO1xuXG5cdFx0Ly9yZXR1cm4gdGhlIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdC8vY2FsbCB0byBmaXJlYmFzZVxuXHRcdFx0bmV3SG9zdGVkRXZlbnQuc2V0KG5ld0V2ZW50LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3I6ICcgKyBlcnJvcik7XG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSgnTmV3IGV2ZW50IHNhdmVkIHRvIERCIHN1Y2Nlc3NmdWxseScpO1xuXHRcdFx0fSlcblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWRkR3Vlc3RUb0hvc3RHdWVzdExpc3RvbkRCKG5hbWUsIGd1aWVzdElkLCBldmVudElkLCB1aWQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIGd1ZXN0TGlzdCA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgnaG9zdGluZycpLmNoaWxkKGV2ZW50SWQpLmNoaWxkKCdndWVzdExpc3QnKS5jaGlsZChndWllc3RJZCk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9jYWxsIHRvIHRoZSBkYlxuXHRcdFx0Z3Vlc3RMaXN0LnNldCh7XG5cdFx0XHRcdHJzdnBkOiBmYWxzZSxcblx0XHRcdFx0c3RhdHVzOiAncGVuZGluZycsXG5cdFx0XHRcdG5hbWU6IG5hbWVcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvcjogJyArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdOZXcgZXZlbnQgc2F2ZWQgdG8gREIgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9KVxuXG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyRXZlbnRzKHVpZCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgdXNlckV2ZW50cyA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKTtcblx0XHRcblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdGhlIGFjdHVhbCBjYWxsXG5cdFx0XHR1c2VyRXZlbnRzLm9yZGVyQnlLZXkoKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdHZhciB1c2VyUHJvZmlsZSA9IHNuYXBzaG90LnZhbCgpO1xuXG5cdFx0XHRcdC8vd2hlbiB0aGUgY2FsbCBpcyBzdWNjZXNzZnVsIHJldHVybiB0aGUgZGF0YVxuXHRcdFx0XHR2YXIgZXZlbnRzUGFja2FnZSA9IHtcblx0XHRcdFx0XHRob3N0aW5nOiB1c2VyUHJvZmlsZS5ob3N0aW5nLFxuXHRcdFx0XHRcdGF0dGVuZGluZzogdXNlclByb2ZpbGUuYXR0ZW5kaW5nLFxuXHRcdFx0XHRcdHBlbmRpbmc6IHVzZXJQcm9maWxlLnBlbmRpbmcsXG5cdFx0XHRcdFx0Y29tcGxldGVkOiB1c2VyUHJvZmlsZS5jb21wbGV0ZWRcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRyZXNvbHZlKGV2ZW50c1BhY2thZ2UpO1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9IFxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEFIb3N0ZWRFdmVudCh1aWQsIGV2ZW50SWQpIHtcblxuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgaG9zdGVkRXZlbnQgPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ2hvc3RpbmcnKS5jaGlsZChldmVudElkKTtcblxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90aGUgYWN0dWFsIGNhbGxcblx0XHRcdGhvc3RlZEV2ZW50Lm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdFx0dmFyIHNlbGVjdEV2ZW50ID0gc25hcHNob3QudmFsKCk7XG5cblx0XHRcdFx0cmVzb2x2ZShzZWxlY3RFdmVudCk7XG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KGVycm9yKTtcblx0XHRcdH0pXG5cdFx0fSlcblx0fVxuXG5cdGZ1bmN0aW9uIGZpbmRHdWVzdFVJRChndWVzdGI2NEVtYWlsKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciB1aWRzID0gYXBwLmNoaWxkKCdVaWRzJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vY2FsbCB0byBkYlxuXHRcdFx0dWlkcy5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdC8vZGlzdGlsbCByZXN1bHRzXG5cdFx0XHRcdHZhciBhbGxVc2VycyA9IHNuYXBzaG90LnZhbCgpO1xuXG5cdFx0XHRcdE9iamVjdC5rZXlzKGFsbFVzZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnZnJvbSBsaXN0OiAnICsga2V5ICsgJywgbWF0Y2hpbmcgdG86ICcgKyBndWVzdGI2NEVtYWlsKTtcblx0XHRcdFx0XHQvL2NoZWNrIGVhY2ggdXNlclxuXHRcdFx0XHRcdGlmKGtleSA9PSBndWVzdGI2NEVtYWlsKSB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKGFsbFVzZXJzW2tleV0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZWplY3QoJ05vIHVzZXIgYnkgdGhhdCBlbWFpbCcpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0R3Vlc3RMaXN0Rm9yRXZlbnQoaG9zdElkLCBldmVudElkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBndWVzdExpc3QgPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQoaG9zdElkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ2hvc3RpbmcnKS5jaGlsZChldmVudElkKS5jaGlsZCgnZ3Vlc3RMaXN0Jyk7XG5cblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdC8vY2FsbCB0aGUgZGJcblx0XHRcdGd1ZXN0TGlzdC5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdC8vbG9jYWwgdmFyaWFibGVcblx0XHRcdFx0dmFyIHRoZUxpc3QgPSBzbmFwc2hvdC52YWwoKTtcblxuXHRcdFx0XHRyZXNvbHZlKHRoZUxpc3QpO1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgdGhlIGd1ZXN0IGxpc3Q6ICcgKyAgZXJyb3IpO1xuXHRcdFx0fSlcblx0XHR9KVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0QW5JbnZpdGVkRXZlbnQoaG9zdElkLCB1aWQsIGV2ZW50SWQpIHt9XG5cblx0Lypcblx0ZnVuY3Rpb24gYWRkUGVuZGluZ0V2ZW50Rm9yVXNlcih1aWQsIGhvc3RJZCwgZXZlbnRJZCwgZXZlbnQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIHVzZXJQZW5kaW5nTGlzdCA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgncGVuZGluZycpO1xuXG5cdFx0Ly9tYW5nZSB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9jYWxsIHRoZSBkYlxuXHRcdFx0dXNlclBlbmRpbmdMaXN0LnNldCh7XG5cdFx0XHRcdGhvc3RJZDoge1xuXHRcdFx0XHRcdGV2ZW50SWQ6IHtcblx0XHRcdFx0XHRcdGV2ZW50XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KFwiRXJyb3IgYWRkaW5nIHRvIHVzZXIgcGVuZGluZyBsaXN0OiBcIiArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXR1cm4gcmVzb2x2ZSgnQWRkZWQgdG8gdXNlciBwZW5kaW5nIGxpc3Qgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9KVxuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFBlbmRpbmdFdmVudEZvckd1ZXN0KHVpZCwgaG9zdElkLCBldmVudElkLCBldmVudCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgZ3Vlc3RzUGVuZGluZ0xpc3QgPSBhcHAuY2hpbGQoJ1VucmVnaXN0ZXJlZCcpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdwZW5kaW5nJyk7XG5cblx0XHQvL21hbmdlIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvL2NhbGwgdGhlIGRiXG5cdFx0XHR1c2VyUGVuZGluZ0xpc3Quc2V0KHtcblx0XHRcdFx0aG9zdElkOiB7XG5cdFx0XHRcdFx0ZXZlbnRJZDoge1xuXHRcdFx0XHRcdFx0ZXZlbnRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoXCJFcnJvciBhZGRpbmcgdG8gdXNlciBwZW5kaW5nIGxpc3Q6IFwiICsgZXJyb3IpO1xuXHRcdFx0XHRlbHNlIHJldHVybiByZXNvbHZlKCdBZGRlZCB0byB1c2VyIHBlbmRpbmcgbGlzdCBzdWNjZXNzZnVsbHknKTtcblx0XHRcdH0pXG5cblx0XHR9KTtcblxuXHR9Ki9cblxuXHRmdW5jdGlvbiBkZWxldGVVcGRhdGVGaWVsZChjYXRlZ29yeSwgdWlkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBjYXRSZW1vdmluZ0Zyb20gPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoY2F0ZWdvcnkpLmNoaWxkKCd1cGRhdGVkJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdGNhdFJlbW92aW5nRnJvbS5zZXQobnVsbCwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIGRlbGV0aW5nIHVwZGF0ZSBmaWVsZDogJyArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdEZWxldGVkIHVwZGF0ZSBzdWNjZXNzZnVsbHknKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRoZXJlV2FzQW5VcGRhdGVGaWVsZChjYXRlZ29yeSwgdWlkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBjYXRUb0NoZWNrID0gYXBwLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKGNhdGVnb3J5KTtcblxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9jYWxsIHRoZSBkYlxuXHRcdFx0Y2F0VG9DaGVjay5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdC8vc2F2ZSB0aGUgcmVzcG9uc2Vcblx0XHRcdFx0dmFyIGN1cnJlbnRDYXRNb2RlbCA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0XHQvL3Nob3cgd2hhdCB3YXMgZm91bmRcblx0XHRcdFx0Ly9sb29rIGZvciB0aGUgdXBkYXRlIGZpZWxkXG5cdFx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGN1cnJlbnRDYXRNb2RlbFsndXBkYXRlZCddKSkgcmVzb2x2ZSh0cnVlKTtcblx0XHRcdFx0ZWxzZSByZWplY3QoZmFsc2UpO1xuXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KGVycm9yKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cblxuXHQvL3JldHVybiB0aGUgb2JqZWN0XG5cdHJldHVybiBhbGxCYWNrZW5kU2VydmljZXM7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuZmFjdG9yeSgndHJhZmZpY1ZhbGV0JywgdHJhZmZpY1ZhbGV0KTtcblxudHJhZmZpY1ZhbGV0LiRpbmplY3QgPSBbJyRsb2cnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdHJhZmZpY1ZhbGV0KCRsb2csICRsb2NhdGlvbikge1xuXHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdHZhciBhbGxUcmFmZmljQ29udHJvbHMgPSB7XG5cdFx0cmVkaXJlY3RUbzogcmVkaXJlY3RUbyxcblx0XHRldmVudFJvdXRlOiBldmVudFJvdXRlXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVkaXJlY3RUbyhwYXRoLCBwYXJhbTEsIHBhcmFtMiwgcGFyYW0zKSB7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQocGFyYW0xKSkge1xuXHRcdFx0cGF0aCA9IHBhdGggKyAnLycgKyBwYXJhbTE7XG5cblx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHBhcmFtMikpIHtcblx0XHRcdFx0Ly9nbyB0byBwYXRoIHdpdGggMiBwYXJhbXNcblx0XHRcdFx0cGF0aCA9IHBhdGggKyAnLycgKyBwYXJhbTI7XG5cblx0XHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQocGFyYW0zKSkge1xuXHRcdFx0XHRcdHBhdGggPSBwYXRoICsgJy8nICsgcGFyYW0zO1xuXG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyBub3cgdG8gJyArIHBhdGgpO1xuXHRcdFx0XHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyBub3cgdG8gJyArIHBhdGgpO1xuXHRcdFx0XHQkbG9jYXRpb24ucGF0aChwYXRoKTtcblx0XHRcdH1cblx0XHRcdC8vZ28gd2l0aCAxIHBhcmFtXG5cdFx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIG5vdyB0byAnICsgcGF0aCk7XG5cdFx0XHQkbG9jYXRpb24ucGF0aChwYXRoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly9qdXN0IGdvIHRvIHBhdGhcblx0XHRcdCRsb2cuaW5mbygncmVkaXJlY3Rpbmcgbm93IHRvICcgKyBwYXRoKTtcblx0XHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZXZlbnRSb3V0ZShldmVudElkLCBob3N0SWQsIHVzZXJJZCwgc2VjdGlvbikge1xuXHRcdCRsb2cuaW5mbygnVHJhZmZpYyB2YWxldCBhY2Nlc3NlZCcpO1xuXHRcdCRsb2cuaW5mbygnZXZlbnRJZDogJyArIGV2ZW50SWQpO1xuXHRcdCRsb2cuaW5mbygnaG9zdElkOiAnICsgaG9zdElkKTtcblx0XHQkbG9nLmluZm8oJ3VzZXJJZDogJyArIHVzZXJJZCk7XG5cblx0XHQvL2lmIHRoZXJlIGlzbid0IGEgc2VjdGlvbiBzZXQgdG8gZGVmYXVsdFxuXHRcdGlmKGFuZ3VsYXIuaXNVbmRlZmluZWQoc2VjdGlvbikpIHNlY3Rpb24gPSAxO1xuXG5cdFx0Ly9pZiB0aGUgaG9zdElkIGFuZCB1c2VySWQgbWF0Y2gsIGxhdW5jaCBob3N0IHZpZXdcblx0XHRpZihob3N0SWQgPT09IHVzZXJJZCkgeyBcblx0XHRcdHZhciBwYXRoID0gJy9ldmVudC9ob3N0LycgKyBldmVudElkICsgJy8nICsgdXNlcklkICsgJy8nKyBzZWN0aW9uO1xuXHRcdFx0JGxvZy5pbmZvKHBhdGgpO1xuXHRcdFx0Ly9yZWRpcmVjdFxuXHRcdFx0JGxvY2F0aW9uLnBhdGgocGF0aCk7XG5cdFx0fVxuXHRcdC8vaWYgdGhlIGhvc3RJZCBhbmQgdXNlcklkIERPTidUIG1hdGNoLCBsYXVuY2ggZ3Vlc3Qgdmlld1xuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIHBhdGggPSAnL2V2ZW50L2d1ZXN0LycgKyBldmVudElkICsgJy8nICsgdXNlcklkICsgJy8nICsgaG9zdElkO1xuXHRcdFx0JGxvZy5pbmZvKHBhdGgpO1xuXHRcdFx0Ly9yZWRpcmVjdFxuXHRcdFx0JGxvY2F0aW9uLnBhdGgocGF0aCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGFsbFRyYWZmaWNDb250cm9scztcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5mYWN0b3J5KCd1c2VyRGF0YScsIHVzZXJEYXRhKTtcblxudXNlckRhdGEuJGluamVjdCA9IFsnJGxvZycsICckcScsICdiYWNrZW5kU2VydmljZXMnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB1c2VyRGF0YSgkbG9nLCAkcSwgYmFja2VuZFNlcnZpY2VzKSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIGN1cnJlbnRVc2VyID0ge1xuXHRcdGJpbzogeyBcblx0XHRcdHVpZDogJycsXG5cdFx0XHRuYW1lOiAnJyxcblx0XHRcdGVtYWlsOiAnJyxcblx0XHRcdGNvbXBhbnk6ICcnLFxuXHRcdFx0dGl0bGU6ICcnLFxuXHRcdFx0ZG9iOiAwXG5cdFx0fSxcblx0XHRldmVudHM6IHtcblx0XHRcdGhvc3Rpbmc6IHt9LFxuXHRcdFx0cGVuZGluZzoge30sXG5cdFx0XHRhdHRlbmRpbmc6IHt9LFxuXHRcdFx0Y29tcGxldGVkOiB7fVxuXHRcdH1cblx0fTtcblxuXHQvL2xvY2FsIGZ1bmN0aW9uc1xuXHRmdW5jdGlvbiB1dGY4X3RvX2I2NChzdHIpIHtcblx0XHRyZXR1cm4gYnRvYShzdHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYjY0X3RvX3V0Zjgoc3RyKSB7XG4gICAgXHRyZXR1cm4gYXRvYihzdHIpO1xuXHR9XG5cblx0dmFyIGFsbFVzZXJEYXRhID0ge1xuXHRcdGJpb1ByaW1hcmllc0FyZUNvbXBsZXRlTG9jYWxseTogYmlvUHJpbWFyaWVzQXJlQ29tcGxldGVMb2NhbGx5LFx0XHQvL21vZGFsIGFuYWx5c2lzXG5cdFx0ZXZlbnRFeGlzdHNMb2NhbGx5OiBldmVudEV4aXN0c0xvY2FsbHksXG5cdFx0dGhpc0lzVGhlSG9zdEVtYWlsOiB0aGlzSXNUaGVIb3N0RW1haWwsXG5cdFx0Z3Vlc3RJbnZpdGVkQWxyZWFkeTogZ3Vlc3RJbnZpdGVkQWxyZWFkeSxcblxuXHRcdGNsZWFuRXZlbnRzOiBjbGVhbkV2ZW50cyxcdFx0XHRcdFx0XHRcdC8vbW9kZWwgbWFpbnRhaW5hbmNlXG5cblx0XHRnZXRVSURMb2NhbGx5OiBnZXRVSURMb2NhbGx5LFx0XHRcdFx0XHRcdC8vZ2V0dGVyIE1ldGhvZHNcblx0XHRnZXROYW1lTG9jYWxseTogZ2V0TmFtZUxvY2FsbHksXG5cdFx0Z2V0RW1haWxMb2NhbGx5OiBnZXRFbWFpbExvY2FsbHksXG5cdFx0Z2V0Q29tcGFueUxvY2FsbHk6IGdldENvbXBhbnlMb2NhbGx5LFxuXHRcdGdldFRpdGxlTG9jYWxseTogZ2V0VGl0bGVMb2NhbGx5LFxuXHRcdGdldERPQkxvY2FsbHk6IGdldERPQkxvY2FsbHksXG5cdFx0Z2V0RnVsbEJpb0xvY2FsbHk6IGdldEZ1bGxCaW9Mb2NhbGx5LFxuXHRcdGdldE9uZVVzZXJFdmVudExvY2FsbHk6IGdldE9uZVVzZXJFdmVudExvY2FsbHksXG5cdFx0Z2V0VXNlckV2ZW50c0xvY2FsbHk6IGdldFVzZXJFdmVudHNMb2NhbGx5LFxuXHRcdGdldEFsbFVzZXJFdmVudHNMb2NhbGx5OiBnZXRBbGxVc2VyRXZlbnRzTG9jYWxseSxcblxuXHRcdHNldFVJRExvY2FsbHk6IHNldFVJRExvY2FsbHksXHRcdFx0XHRcdFx0Ly9zZXR0ZXIgTWV0aG9kc1xuXHRcdHNldE5hbWVMb2NhbGx5OiBzZXROYW1lTG9jYWxseSxcblx0XHRzZXRFbWFpbExvY2FsbHk6IHNldEVtYWlsTG9jYWxseSxcblx0XHRzZXRDb21wYW55TG9jYWxseTogc2V0Q29tcGFueUxvY2FsbHksXG5cdFx0c2V0VGl0bGVMb2NhbGx5OiBzZXRUaXRsZUxvY2FsbHksXG5cdFx0c2V0RE9CTG9jYWxseTogc2V0RE9CTG9jYWxseSxcblx0XHRzZXRQcmltYXJpZXNMb2NhbGx5OiBzZXRQcmltYXJpZXNMb2NhbGx5LFxuXHRcdHVwZGF0ZVVzZXJFdmVudHNMb2NhbGx5OiB1cGRhdGVVc2VyRXZlbnRzTG9jYWxseSxcblx0XHR1cGRhdGVBbGxVc2VyRXZlbnRzTG9jYWxseTogdXBkYXRlQWxsVXNlckV2ZW50c0xvY2FsbHksXG5cdFx0dXBkYXRlQmlvTG9jYWxseTogdXBkYXRlQmlvTG9jYWxseSxcblx0XHRhZGRHdWVzdFRvSG9zdEd1ZXN0TGlzdDogYWRkR3Vlc3RUb0hvc3RHdWVzdExpc3QsXG5cblx0XHRyZW1vdmVVc2VyRXZlbnRzTG9jYWxseTogcmVtb3ZlVXNlckV2ZW50c0xvY2FsbHksIFx0Ly9yZW1vdmUgZGF0YVxuXHRcdFxuXHRcdGdldEZ1bGxSZW1vdGVEQmZvckxvY2FsOiBnZXRGdWxsUmVtb3RlREJmb3JMb2NhbCxcdC8vbG9jYWwtcmVtb3RlIGludGVyYWNpb25zXG5cdFx0Z2V0UmVtb3RlQmlvRm9yTG9jYWw6IGdldFJlbW90ZUJpb0ZvckxvY2FsLFx0XHRcdFxuXHRcdGdldFJlbW90ZUV2ZW50c0ZvckxvY2FsOiBnZXRSZW1vdGVFdmVudHNGb3JMb2NhbCxcblx0XHRnZXRPbmVSZW1vdGVFdmVudEZvckxvY2FsOiBnZXRPbmVSZW1vdGVFdmVudEZvckxvY2FsLFxuXHRcdHNldEZ1bGxSZW1vdGVEQmZyb21Mb2NhbDogc2V0RnVsbFJlbW90ZURCZnJvbUxvY2FsLFxuXHRcdHNldFJlbW90ZUJpb0Zyb21Mb2NhbDogc2V0UmVtb3RlQmlvRnJvbUxvY2FsLFxuXHRcdHNldFJlbW90ZUV2ZW50c0Zyb21Mb2NhbDogc2V0UmVtb3RlRXZlbnRzRnJvbUxvY2FsLFxuXHRcdGNsZWFuREJFdmVudHNDYXRlZ29yeTogY2xlYW5EQkV2ZW50c0NhdGVnb3J5LFxuXHRcdGdldFVzZXJJZEZvckd1ZXN0OiBnZXRVc2VySWRGb3JHdWVzdCxcblx0XHRnZXRFdmVudEd1ZXN0TGlzdDogZ2V0RXZlbnRHdWVzdExpc3QsXG5cblx0XHRsb2FkQmlvOiBsb2FkQmlvLFx0XHRcdFx0XHRcdFx0XHRcdC8vZXh0ZXJuYWwgbWV0aG9kc1xuXHRcdGxvYWRFdmVudHNQcm9ncmVzc2l2ZWx5OiBsb2FkRXZlbnRzUHJvZ3Jlc3NpdmVseSxcblx0XHRsb2FkQW5FdmVudFByb2dyZXNzaXZlbHk6IGxvYWRBbkV2ZW50UHJvZ3Jlc3NpdmVseSxcblx0XHRjcmVhdGVOZXdFdmVudDogY3JlYXRlTmV3RXZlbnQsXG5cdFx0dXBkYXRlUGVuZGluZ0V2ZW50c0xpc3RGb3JHdWVzdDogdXBkYXRlUGVuZGluZ0V2ZW50c0xpc3RGb3JHdWVzdFxuXHR9XG5cblx0Ly9hbmFseXNpcyBtZXRob2RzXG5cdGZ1bmN0aW9uIGJpb1ByaW1hcmllc0FyZUNvbXBsZXRlTG9jYWxseSgpIHtcblx0XHRpZiggY3VycmVudFVzZXIuYmlvLnVpZCAhPT0gJycgJiZcblx0XHRcdGN1cnJlbnRVc2VyLmJpby5uYW1lICE9PSAnJyAmJlxuXHRcdFx0Y3VycmVudFVzZXIuYmlvLmVtYWlsICE9PSAnJ1xuXHRcdFx0KVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBldmVudEV4aXN0c0xvY2FsbHkodHlwZSwgZXZlbnRJZCkge1xuXHRcdCRsb2cuaW5mbygnY2hlY2tpbmcgaWYgdGhlIGV2ZW50IGV4aXRzJyk7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoY3VycmVudFVzZXIuZXZlbnRzW3R5cGVdW2V2ZW50SWRdKSkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiB0aGlzSXNUaGVIb3N0RW1haWwoZW1haWwsIGV2ZW50SWQpIHtcblx0XHQkbG9nLmluZm8oJ2N1cnJlbnQgdXNlciBiaW8gaXM6Jyk7XG5cdFx0JGxvZy5pbmZvKGN1cnJlbnRVc2VyLmJpbyk7XG5cdFx0Ly9jaGVjayBpZiBhIGJpbyBpcyBsb2FkZWRcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChjdXJyZW50VXNlci5iaW8uZW1haWwpKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2VtYWlsIGlzIGRlZmluZWQnKTtcblx0XHRcdGlmKGN1cnJlbnRVc2VyLmJpby5lbWFpbCAhPSAnJykge1xuXHRcdFx0XHQvL2NoZWNrIGZvciBhIG1hdGNoXG5cdFx0XHRcdGlmKGVtYWlsID09IGN1cnJlbnRVc2VyLmJpby5lbWFpbCkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnZW1haWwgbWF0Y2hlcycpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnZW1haWwgZG9lcyBub3QgbWF0Y2gnKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBcblx0XHRcdFxuXHRcdH0gXG5cdFx0XG5cdFx0Ly9pZiB0aGF0IGRpZG4ndCB3b3JrIGNoZWNrIHRoZSBjdXJyZW50IGV2ZW50XG5cdFx0JGxvZy5pbmZvKCdjdXJyZW50IGV2ZW50IGlzOicpO1xuXHRcdCRsb2cuaW5mbyhjdXJyZW50VXNlci5ldmVudHMuaG9zdGluZ1tldmVudElkXSk7XG5cdFx0aWYoY3VycmVudFVzZXIuZXZlbnRzLmhvc3RpbmdbZXZlbnRJZF0uaG9zdC5lbWFpbCA9PSBlbWFpbCkge1xuXHRcdFx0JGxvZy5pbmZvKCdldmVudCBob3N0IGVtYWlsIG1hdGNoZXMnKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkbG9nLmluZm8oJ2V2ZW50IGhvc3QgZW1haWwgRE9FU05cXCdUIG5vdCBtYXRjaCcpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRcblx0fVxuXG5cdGZ1bmN0aW9uIGd1ZXN0SW52aXRlZEFscmVhZHkoZW1haWwsIGV2ZW50SWQpIHtcblx0XHQvL2ZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIGEgZ3Vlc3QgbGlzdFxuXHRcdCRsb2cuaW5mbyhjdXJyZW50VXNlci5ldmVudHMuaG9zdGluZ1tldmVudElkXSk7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoY3VycmVudFVzZXIuZXZlbnRzLmhvc3RpbmdbZXZlbnRJZF0uZ3Vlc3RMaXN0KSkge1xuXHRcdFx0Ly9pZiB0aGVyZSBpcyBhIGxpc3QsIGNoZWNrIGZvciB0aGUgZW1haWxcblx0XHRcdCRsb2cuaW5mbygndGhlcmUgaXMgYSBndWVzdCBsaXN0Jyk7XG5cblx0XHRcdC8vY29udmVydCBlbWFpbCBmb3IgZXZhbHVhdGlvblxuXHRcdFx0cmVmRW1haWwgPSB1dGY4X3RvX2I2NChlbWFpbCk7XG5cblx0XHRcdC8vcnVuIHRocm91Z2ggZWFjaCBndWVzdCBhbmQgY29tcGFyZVxuXHRcdFx0T2JqZWN0LmtleXMoY3VycmVudFVzZXIuZXZlbnRzLmhvc3RpbmdbZXZlbnRJZF0uZ3Vlc3RMaXN0KS5mb3JFYWNoKGZ1bmN0aW9uKGI2NEVtYWlsKSB7XG5cdFx0XHRcdGlmKHJlZkVtYWlsID09IGI2NEVtYWlsKSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdhbiBlbWFpbCBtYXRjaCB3YXMgZm91bmQsIHRoaXMgZ3Vlc3QgaGFzIGJlZW4gaW52aXRlZCBhbHJlYWR5Jyk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdubyBlbWFpbCBtYXRjaCBmb3VuZCwgb2sgdG8gaW52aXRlIGd1ZXN0Jyk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vaWYgbm8gZ3Vlc3QgbGlzdCB0aGFuIGNhbid0IGFscmVhZHkgYmUgb24gaXRcblx0XHRcdCRsb2cuaW5mbygnbm8gZ3Vlc3RsaXN0Jyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdH1cblxuXHQvL21vZGVsIG1haW50YWluYW5jZVxuXHRmdW5jdGlvbiBjbGVhbkV2ZW50cyh0eXBlKSB7XG5cdFx0Ly9pdGVyYXRlIHRocm91Z2ggb2JqZWN0cyBpbiBvYmplY3Rcblx0XHRPYmplY3Qua2V5cyhjdXJyZW50VXNlci5ldmVudHNbdHlwZV0pLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHQvL2lmIGFueSBhcmUgbm9uLW9iamVjdHMsIGRlbGV0ZSB0aGVtXG5cdFx0XHRpZighYW5ndWxhci5pc09iamVjdChjdXJyZW50VXNlci5ldmVudHNbdHlwZV1ba2V5XSkpIHtcblx0XHRcdFx0ZGVsZXRlIGN1cnJlbnRVc2VyLmV2ZW50c1t0eXBlXVtrZXldO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly9nZXR0ZXIgbWV0aG9kc1xuXHRmdW5jdGlvbiBnZXRVSURMb2NhbGx5KCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5iaW8udWlkO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TmFtZUxvY2FsbHkoKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmJpby5uYW1lO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RW1haWxMb2NhbGx5KCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5iaW8uZW1haWw7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRDb21wYW55TG9jYWxseSgpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXIuYmlvLmNvbXBhbnk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUaXRsZUxvY2FsbHkoKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmJpby50aXRsZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0RE9CTG9jYWxseSgpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXIuYmlvLmRvYjtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEZ1bGxCaW9Mb2NhbGx5KCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR1aWQ6IGN1cnJlbnRVc2VyLmJpby51aWQsXG5cdFx0XHRuYW1lOiBjdXJyZW50VXNlci5iaW8ubmFtZSxcblx0XHRcdGVtYWlsOiBjdXJyZW50VXNlci5iaW8uZW1haWwsXG5cdFx0XHRjb21wYW55OiBjdXJyZW50VXNlci5iaW8uY29tcGFueSxcblx0XHRcdHRpdGxlOiBjdXJyZW50VXNlci5iaW8udGl0bGUsXG5cdFx0XHRkb2I6IGN1cnJlbnRVc2VyLmJpby5kb2Jcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0T25lVXNlckV2ZW50TG9jYWxseSh0eXBlLCBldmVudElkKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmV2ZW50c1t0eXBlXVtldmVudElkXTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFVzZXJFdmVudHNMb2NhbGx5KHR5cGUpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXIuZXZlbnRzW3R5cGVdO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0QWxsVXNlckV2ZW50c0xvY2FsbHkoKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmV2ZW50cztcblx0fVxuXG5cdC8vc2V0dGVyIG1ldGhvZHNcblx0ZnVuY3Rpb24gc2V0VUlETG9jYWxseSh1aWQpIHtcblx0XHRjdXJyZW50VXNlci5iaW8udWlkID0gdWlkO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TmFtZUxvY2FsbHkobmFtZSkge1xuXHRcdGN1cnJlbnRVc2VyLmJpby5uYW1lID0gbmFtZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldEVtYWlsTG9jYWxseShlbWFpbCkge1xuXHRcdGN1cnJlbnRVc2VyLmJpby5lbWFpbCA9IGVtYWlsO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0Q29tcGFueUxvY2FsbHkoY29tcGFueSkge1xuXHRcdGN1cnJlbnRVc2VyLmJpby5jb21wYW55ID0gY29tcGFueTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc2V0VGl0bGVMb2NhbGx5KHRpdGxlKSB7XG5cdFx0Y3VycmVudFVzZXIuYmlvLnRpdGxlID0gdGl0bGU7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRET0JMb2NhbGx5KGRvYikge1xuXHRcdGN1cnJlbnRVc2VyLmJpby5kb2IgPSBkb2I7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRQcmltYXJpZXNMb2NhbGx5KGVtYWlsLCBuYW1lLCB1aWQpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChlbWFpbCkpIHNldEVtYWlsTG9jYWxseShlbWFpbCk7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQobmFtZSkpIGdldE5hbWVMb2NhbGx5KG5hbWUpO1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHVpZCkpIHNldFVJRExvY2FsbHkodWlkKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVVzZXJFdmVudHNMb2NhbGx5KHR5cGUsIGV2ZW50KSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBldmVudElEID0gZXZlbnQuaWQ7XG5cblx0XHQvL2NoZWNrIGlmIHRoZSBtb2RlbCBuZWVkcyB0byBiZSBjbGVhbmVkXG5cdFx0Y2xlYW5FdmVudHModHlwZSk7XG5cdFx0Ly90aGVuIGxvYWQgdGhlIG5ldyBldmVudFxuXHRcdGN1cnJlbnRVc2VyLmV2ZW50c1t0eXBlXVtldmVudElEXSA9IGV2ZW50O1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQWxsVXNlckV2ZW50c0xvY2FsbHkoYWxsVXNlckV2ZW50cykge1xuXHRcdGN1cnJlbnRVc2VyLmV2ZW50cyA9IGFsbFVzZXJFdmVudHM7XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVCaW9Mb2NhbGx5KHVzZXJCaW8pIHtcblx0XHQvL3VwZGF0ZSBsb2NhbCB2YWx1ZXNcblx0XHRzZXROYW1lTG9jYWxseSh1c2VyQmlvLm5hbWUpO1xuXHRcdHNldEVtYWlsTG9jYWxseSh1c2VyQmlvLmVtYWlsKTtcblx0XHRzZXRDb21wYW55TG9jYWxseSh1c2VyQmlvLmNvbXBhbnkpO1xuXHRcdHNldFRpdGxlTG9jYWxseSh1c2VyQmlvLnRpdGxlKTtcblx0XHRzZXRET0JMb2NhbGx5KHVzZXJCaW8uZG9iKTtcblx0XHQvL3NhdmUgdG8gZGJcblx0XHRzZXRSZW1vdGVCaW9Gcm9tTG9jYWwoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEd1ZXN0VG9Ib3N0R3Vlc3RMaXN0KG5hbWUsIGVtYWlsLCBndWVzdElkLCBldmVudElkLCB1aWQpIHtcblx0XHQvL2NhbGwgdG8gdGhlIGRiIHNvIHJldHVybiBhIHByb21pc2Vcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL2NvbnZlcnQgdGhlIGVtYWlsIGlmIG9uZSB3YXMgcGFzc2VkXG5cdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChlbWFpbCkpIHtcblx0XHRcdFx0Z3Vlc3RJZCA9IHV0ZjhfdG9fYjY0KGVtYWlsKTtcblx0XHRcdH1cblxuXHRcdFx0ZGIuYWRkR3Vlc3RUb0hvc3RHdWVzdExpc3RvbkRCKG5hbWUsIGd1ZXN0SWQsIGV2ZW50SWQsIHVpZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHBvc2l0aXZlUmVzdWx0KSB7XG5cdFx0XHRcdHJlc29sdmUocG9zaXRpdmVSZXN1bHQpO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihuZWdhdGl2ZVJlc3VsdCkge1xuXHRcdFx0XHRyZWplY3QobmVnYXRpdmVSZXN1bHQpO1xuXHRcdFx0fSlcblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VXNlcklkRm9yR3Vlc3QoZW1haWwpIHtcblx0XHQvL2NhbGwgdG8gdGhlIGRiIHNvIHJldHVybiBhIHByb21pc2Vcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL2NvbnZlcnQgdGhlIGVtYWlsXG5cdFx0XHRndWVzdEVtYWlsID0gdXRmOF90b19iNjQoZW1haWwpO1xuXG5cdFx0XHRkYi5maW5kR3Vlc3RVSUQoZ3Vlc3RFbWFpbClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHVpZCkge1xuXHRcdFx0XHRyZXNvbHZlKHVpZCk7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yUmVzcG9uc2UpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yUmVzcG9uc2UpO1xuXHRcdFx0fSlcblxuXHRcdH0pO1xuXHR9XG5cblx0Ly9kZWxldGUgTWV0aG9kc1xuXHRmdW5jdGlvbiByZW1vdmVVc2VyRXZlbnRzTG9jYWxseSh0eXBlLCBldmVudCkge1xuXHRcdC8vZG9lcyB0aGlzIHdvcms/XG5cdFx0ZGVsZXRlIGN1cnJlbnRVc2VyLmV2ZW50c1t0eXBlXVtldmVudC5pZF07XG5cdH1cblxuXHQvL3JlbW90ZS1sb2NhbCBpbnRlcmFjdGlvbiBNZXRob2RzXG5cdGZ1bmN0aW9uIGdldEZ1bGxSZW1vdGVEQmZvckxvY2FsKCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0ZGIuZG93bmxvYWRVc2VyRGF0YSgpXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVtb3RlVXNlckRhdGEpIHtcblx0XHRcdGN1cnJlbnRVc2VyID0gcmVtb3RlVXNlckRhdGE7XG5cdFx0fSlcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFJlbW90ZUJpb0ZvckxvY2FsKHVpZCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXHRcdFx0XHRcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL2dvIG91dCB0byB0aGUgZGIgYmVmb3JlIHJlc29sdmluZ1xuXHRcdFx0ZGIuZ2V0VXNlckJpbyh1aWQpXG5cdFx0XHQudGhlbihmdW5jdGlvbih1c2VyQmlvKSB7XG5cblx0XHRcdFx0cmVzb2x2ZSh1c2VyQmlvKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcmVhZGluZyB0aGUgdXNlciBiaW86ICcgKyBlcnJvcik7XG5cdFx0XHR9KVxuXHRcdH0pO1xuXHRcdFxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UmVtb3RlRXZlbnRzRm9yTG9jYWwoKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cdFx0XHRcdFxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9nbyBvdXQgdG8gdGhlIGRiIGJlZm9yZSByZXNvbHZpbmdcblx0XHRcdGRiLmdldFVzZXJFdmVudHMoZ2V0VUlETG9jYWxseSgpKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ob2J0YWluZWRVc2VyRXZlbnRzKSB7XG5cblx0XHRcdFx0Ly9zYXZlIHRoZSByZXN1bHRzIHRvIHRoZSBsb2NhbCBkYXRhYnNlXG5cdFx0XHRcdE9iamVjdC5rZXlzKG9idGFpbmVkVXNlckV2ZW50cykuZm9yRWFjaChmdW5jdGlvbihldmVudFR5cGUpIHtcblx0XHRcdFx0XHQvL3dpdGhpbiBlYWNoIGV2ZW50IHR5cGUgaXRlcmF0ZSB0aHJvdWdoIHRoZSBhY3R1YWwgZXZlbnRzXG5cdFx0XHRcdFx0T2JqZWN0LmtleXMob2J0YWluZWRVc2VyRXZlbnRzW2V2ZW50VHlwZV0pLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0XHRcdC8vb25jZSB3ZSBzZWUgdGhlIGV2ZW50cywgc2F2ZSB0aGVtIHRvIHRoZSBsb2NhbCBtb2RlbFxuXG5cdFx0XHRcdFx0XHR1cGRhdGVVc2VyRXZlbnRzTG9jYWxseShldmVudFR5cGUsIG9idGFpbmVkVXNlckV2ZW50c1tldmVudFR5cGVdW2V2ZW50XSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9yZXR1cm4gdGhlIHJlc3VsdHMgdG8gdGhlIHJlcXVlc3Rpbmcgb2JqZWN0XG5cdFx0XHRcdHJlc29sdmUob2J0YWluZWRVc2VyRXZlbnRzKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcmVhZGluZyB0aGUgdXNlciBldmVudHM6ICcgKyBlcnJvcik7XG5cdFx0XHR9KVxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0T25lUmVtb3RlRXZlbnRGb3JMb2NhbChldmVudElkKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdC8vZ29pbmcgdG8gYmFja2VuZCBzZXJ2aWNlc1xuXHRcdFx0ZGIuZ2V0QUhvc3RlZEV2ZW50KGdldFVJRExvY2FsbHkoKSwgZXZlbnRJZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKG9idGFpbmVkRXZlbnQpIHtcblxuXHRcdFx0XHQvL3NhdmUgdGhlIHJlc3VsdCB0byB0aGUgbG9jYWwgbW9kZWxcblx0XHRcdFx0JGxvZy5pbmZvKG9idGFpbmVkRXZlbnQpO1xuXHRcdFx0XHQvL3JldHVybiB0aGUgcmVzdWx0IHRvIHRoZSByZXF1ZXN0aW5nIG9iamVjdFxuXHRcdFx0XHRyZXNvbHZlKG9idGFpbmVkRXZlbnQpO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvciByZWFkaW5nIHRoZSB1c2VyIGV2ZW50OiAnICsgZXJyb3IpO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldEZ1bGxSZW1vdGVEQmZyb21Mb2NhbCgpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblxuXHRcdGRiLnVwbG9hZFVzZXJEYXRhKGN1cnJlbnRVc2VyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldFJlbW90ZUJpb0Zyb21Mb2NhbCgpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblxuXHRcdGRiLnVwbG9hZFVzZXJCaW8oY3VycmVudFVzZXIuYmlvKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldFJlbW90ZUV2ZW50c0Zyb21Mb2NhbCgpIHt9XG5cblx0ZnVuY3Rpb24gY2xlYW5EQkV2ZW50c0NhdGVnb3J5KGNhdGVnb3J5KSB7XG5cdFx0Ly9kZWNsYXIgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0Ly9yZW1vdmUgJ3VwZGF0ZWQnIG9iamVjdCBpZiBuZWVkIGJlXG5cdFx0Ly9kYiBjYWxsIHNvIHJldHVybiBhIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL2NoZWNrIGZvciBvYmplY3Rcblx0XHRcdGRiLnRoZXJlV2FzQW5VcGRhdGVGaWVsZChjYXRlZ29yeSwgZ2V0VUlETG9jYWxseSgpKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24oYWZmaXJtYXRpdmVSZXNwb25zZSkge1xuXHRcdFx0XHQvL2lmIHRoZXJlIHdhcyBhbiB1cGRhdGUgZmllbGQsIGRlbGV0ZSBpdFxuXHRcdFx0XHRkYi5kZWxldGVVcGRhdGVGaWVsZChjYXRlZ29yeSwgZ2V0VUlETG9jYWxseSgpKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihhZmZpcm1hdGl2ZVJlc3BvbnNlKSB7ICRsb2cuaW5mbyhhZmZpcm1hdGl2ZVJlc3BvbnNlKTsgfSApXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbihlcnJvclJlc3BvbnNlKSB7ICRsb2cuaW5mbyhlcnJvclJlc3BvbnNlKTsgfSApXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yUmVzcG9uc2UpIHtcblx0XHRcdFx0JGxvZy5pbmZvKGVycm9yUmVzcG9uc2UpXG5cdFx0XHR9KVxuXG5cdFx0fSk7XG5cdFx0Ly9pZiBpdCBpcyB0aGVyZSwgcmVtb3ZlIGl0XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRFdmVudEd1ZXN0TGlzdChob3N0SWQsIGV2ZW50SWQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9nZXQgdGhlIG9iamVjdFxuXHRcdFx0ZGIuZ2V0R3Vlc3RMaXN0Rm9yRXZlbnQoaG9zdElkLCBldmVudElkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ob2J0YWluZWRMaXN0KSB7XG5cdFx0XHRcdHJlc29sdmUob2J0YWluZWRMaXN0KTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3JSZXNwb25zZSkge1xuXHRcdFx0XHRyZWplY3QoZXJyb3JSZXNwb25zZSk7XG5cdFx0XHR9KVxuXHRcdH0pXG5cdH1cblxuXHRmdW5jdGlvbiBsb2FkQmlvKHVpZCkge1xuXG5cdFx0Ly9taWdodCBuZWVkIHRvIGdvIG91dCB0byB0aGUgZGIgc28gcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9jaGVjayBmb3IgYmlvIGxvY2FsbHkgZmlyc3Rcblx0XHRcdGlmKGJpb1ByaW1hcmllc0FyZUNvbXBsZXRlTG9jYWxseSgpKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL3Bhc3MgaXQgYmFjayBhcyBzdWNjZXNzXG5cdFx0XHRcdHJlc29sdmUoZ2V0RnVsbEJpb0xvY2FsbHkoKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvL2lmIHRoZXkncmUgbm90IGNvbXBsZXRlIGxvY2FsbHksIGNoZWNrIHRoZSBzZXJ2ZXJcblx0XHRcdFx0Z2V0UmVtb3RlQmlvRm9yTG9jYWwodWlkKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihiaW9Gcm9tUmVtb3RlREIpIHtcblx0XHRcdFx0XHRyZXNvbHZlKGJpb0Zyb21SZW1vdGVEQik7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gbG9hZEFuRXZlbnRQcm9ncmVzc2l2ZWx5KHVpZCwgZXZlbnRJZCkge1xuXHRcdC8vdXBkYXRlIHVpZCBpZiBuZWVkIGJlXG5cdFx0c2V0VUlETG9jYWxseSh1aWQpO1xuXG5cdFx0Ly9nb2luZyBvdXQgdGhlIHRoZSBkYiBzbyByZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvL3JlYWNoIG91dCB0byBkYlxuXHRcdFx0Z2V0T25lUmVtb3RlRXZlbnRGb3JMb2NhbChldmVudElkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ob2J0YWluZWRVc2VyRXZlbnQpIHtcblx0XHRcdFx0Ly93aGVuIHRoZSBkYiByZXN1bHRzIGNvbWUgYmFjaywgcmV0dXJuIGl0XG5cdFx0XHRcdHJlc29sdmUob2J0YWluZWRVc2VyRXZlbnQpXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKClcblxuXHRcdFx0Ly9maXJzdCByZXR1cm4gd2hhdGV2ZXIgZXZlbnQgaW5mbyBpcyBzdG9yZWQgbG9jYWxseVxuXHRcdFx0Ly9jaGVjayBpZiB0aGUgZXZlbnQgaXMgYXZhaWxhYmxlIGxvY2FsbHlcblx0XHRcdGlmKGV2ZW50RXhpc3RzTG9jYWxseSgnaG9zdGluZycsIGV2ZW50SWQpKSByZXNvbHZlKGdldE9uZVVzZXJFdmVudExvY2FsbHkoJ2hvc3RpbmcnLCBldmVudElkKSk7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGxvYWRFdmVudHNQcm9ncmVzc2l2ZWx5KHVpZCkge1xuXHRcdHZhciBldmVudFR5cGVzID0gWydhdHRlbmRpbmcnLCAncGVuZGluZycsICdob3N0aW5nJywgJ2NvbXBsZXRlZCddO1xuXHRcdHZhciBhbGxFdmVudHMgPSB7fTtcblxuXHRcdC8vd2lsbCBnbyBvdXQgdG8gdGhlIGRiIHNvIHJldHVybiBhIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdGdldFJlbW90ZUV2ZW50c0ZvckxvY2FsKClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKG9idGFpbmVkVXNlckV2ZW50cykge1xuXHRcdFx0XHQvL3doZW4gdGhlIGRiIHJlc3VsdHMgY29tZSBiYWNrLCByZXR1cm4gdGhvc2Vcblx0XHRcdFx0cmVzb2x2ZShvYnRhaW5lZFVzZXJFdmVudHMpO1xuXHRcdFx0fSlcblxuXHRcdFx0Ly9idWlsZCB0aGUgbG9jYWwgbW9kZWxcblx0XHRcdGFsbEV2ZW50cyA9IGdldFVzZXJFdmVudHNMb2NhbGx5KHR5cGUpO1xuXG5cdFx0XHQvL2ZpcnN0IHJldHVybiB3aGF0ZXZlciBldmVudCBpbmZvIGlzIHN0b3JlZCBsb2NhbGx5XG5cdFx0XHRyZXNvbHZlKGFsbEV2ZW50cyk7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZU5ld0V2ZW50KGV2ZW50SUQpIHtcblx0XHQvL2RlY2xhciBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cdFx0dmFyIG5ld0V2ZW50ID0ge307XG5cblx0XHQvL2ZpcnN0IGNyZWF0ZSB0aGUgb2JqZWN0XG5cdFx0bmV3RXZlbnQgPSB7XG5cdFx0XHRpZDogZXZlbnRJRCxcblx0XHRcdG5hbWU6ICcnLFxuXHRcdFx0dHlwZTogJycsXG5cdFx0XHRob3N0OiB7XG5cdFx0XHRcdG5hbWU6IGN1cnJlbnRVc2VyLmJpby5uYW1lLFxuXHRcdFx0XHR1aWQ6IGN1cnJlbnRVc2VyLmJpby51aWQsXG5cdFx0XHRcdGVtYWlsOiBjdXJyZW50VXNlci5iaW8uZW1haWxcblx0XHRcdH0sXG5cdFx0XHRtZXNzYWdlOiAnJyxcblx0XHRcdGV2ZW50VGltZXM6IHtcblx0XHRcdFx0c3RhcnQ6IDAsXG5cdFx0XHRcdGVuZDogMFxuXHRcdFx0fSxcblx0XHRcdGFkZHJlc3M6IHtcblx0XHRcdFx0c3RyZWV0MDE6ICcnLFxuXHRcdFx0XHRzdHJlZXQwMjogJycsXG5cdFx0XHRcdHN0cmVldDAzOiAnJyxcblx0XHRcdFx0Y2l0eTogJycsXG5cdFx0XHRcdHN0YXRlOiAnJyxcblx0XHRcdFx0emlwOiAwXG5cdFx0XHR9LFxuXHRcdFx0Z3Vlc3RMaXN0OiB7fVxuXHRcdH07XG5cblx0XHQvL3NhdmUgaXQgbG9jYWxseVxuXHRcdHVwZGF0ZVVzZXJFdmVudHNMb2NhbGx5KCdob3N0aW5nJywgbmV3RXZlbnQpO1xuXG5cdFx0Ly90aGVuIGNyZWF0ZSBpdCBvbiB0aGUgc2VydmVyXG5cdFx0Ly93aWxsIGdvIG91dCB0byB0aGUgZGIgc28gcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFxuXHRcdFx0Ly9tYW5hZ2UgdGhlIHByb21pc2UgcmVzcG9uc2VzXG5cdFx0XHRkYi5jcmVhdGVIb3N0ZWRFdmVudChnZXRVSURMb2NhbGx5KCksIG5ld0V2ZW50KVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24obWVzc2FnZSkge1xuXHRcdFx0XHRyZXNvbHZlKG1lc3NhZ2UpO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSlcblxuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVQZW5kaW5nRXZlbnRzTGlzdEZvckd1ZXN0KGV2ZW50SWQpIHtcblx0XHQvL2RlY2xhciBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdC8vbWFuYWdlIHRoZSBkYiBwcm9taXNlXG5cdFx0XHQvL2RiLmFkZFBlbmRpbmdFdmVudEZvckd1ZXN0KGN1cnJlbnRVc2VyLmdldFVJRExvY2FsbHkoKSwgaG9zdElkLCBldmVudElkLCBjdXJyZW50VXNlci5nZXRVc2VyRXZlbnRzTG9jYWxseSgnJywgZXZlbnRJZCkpXG5cdFx0fSk7XG5cblx0fVxuXHRcblx0cmV0dXJuIGFsbFVzZXJEYXRhO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ3ZhbGlkYXRpb24nLCB2YWxpZGF0aW9uKTtcblxudmFsaWRhdGlvbi4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdmFsaWRhdGlvbigkbG9nKSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIG1pbmltdW1OYW1lTGVuZ3RoID0gMztcblx0dmFyIG1pbmltdW1QYXNzTGVuZ3RoID0gMTY7XG5cdHZhciBtYXhpbXVtUGFzc0xlbmd0aCA9IDEwMDtcblxuXHR2YXIgYWxsVmFsaWRhdGlvbnMgPSB7XG5cdFx0cmVxdWlyZWQ6IHJlcXVpcmVkLFxuXHRcdG1pbk5hbWVMZW5ndGg6IG1pbk5hbWVMZW5ndGgsXG5cdFx0bWluUGFzc0xlbmd0aDogbWluUGFzc0xlbmd0aCxcblx0XHRtYXhQYXNzTGVuZ3RoOiBtYXhQYXNzTGVuZ3RoLFxuXHRcdGF0TGVhc3RPbmVTeW1ib2w6IGF0TGVhc3RPbmVTeW1ib2wsXG5cdFx0YXRMZWFzdE9uZU51bWJlcjogYXRMZWFzdE9uZU51bWJlcixcblx0XHRhdExlYXN0T25lTG93ZXJjYXNlOiBhdExlYXN0T25lTG93ZXJjYXNlLFxuXHRcdGF0TGVhc3RPbmVVcHBlcmNhc2U6IGF0TGVhc3RPbmVVcHBlcmNhc2UsXG5cdFx0aWxsZWdhbENoYXJhY3RlcjogaWxsZWdhbENoYXJhY3Rlcixcblx0XHRlbWFpbDogZW1haWwsXG5cdFx0ZGF0ZU9mQmlydGg6IGRhdGVPZkJpcnRoXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVxdWlyZWQodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuICdUaGlzIGlzIGEgcmVxdWlyZWQgZmllbGQnO1xuXHRcdH0gXG5cdH1cblxuXHRmdW5jdGlvbiBtaW5OYW1lTGVuZ3RoKHZhbHVlKSB7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHRpZih2YWx1ZS5sZW5ndGggPCBtaW5pbXVtTmFtZUxlbmd0aCkgcmV0dXJuICgnTmFtZSBzaG91bGQgYmUgYXQgbGVhc3QgJyArIG1pbmltdW1OYW1lTGVuZ3RoICsgJyBjaGFyYWN0ZXJzJyk7XG5cdFx0fSBcblx0fVxuXG5cdGZ1bmN0aW9uIG1pblBhc3NMZW5ndGgodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdGlmKCEodmFsdWUubGVuZ3RoIDwgbWluaW11bVBhc3NMZW5ndGgpKSByZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWF4UGFzc0xlbmd0aCh2YWx1ZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0aWYoISh2YWx1ZS5sZW5ndGggPiBtYXhpbXVtUGFzc0xlbmd0aCkpIHJldHVybiB0cnVlO1xuXHRcdH0gXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXRMZWFzdE9uZVN5bWJvbCh2YWx1ZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0Ly8gYnVpbGQgcmVnZXhcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIltcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9mYWlsdXJlOiBkaWRuJ3QgZmluZCBhbnkgc3BjaWFsIGNoYXJhY3RlcnNcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGF0TGVhc3RPbmVOdW1iZXIodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbMC05XVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuICAgIGZ1bmN0aW9uIGF0TGVhc3RPbmVMb3dlcmNhc2UodmFsdWUpIHtcbiAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0Ly8gYnVpbGQgcmVnZXhcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlthLXpdXCIsIFwiXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9mYWlsdXJlOiBkaWRuJ3QgZmluZCBhbnkgc3BjaWFsIGNoYXJhY3RlcnNcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdExlYXN0T25lVXBwZXJjYXNlKHZhbHVlKSB7XG4gICAgXHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbQS1aXVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaWxsZWdhbENoYXJhY3Rlcih2YWx1ZSkge1xuICAgIFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHQvLyBidWlsZCByZWdleFxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW15BLXowLTlcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdXCIsIFwiXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZW1haWwodmFsdWUpIHtcbiAgICBcdC8vZGVmaW5lIGNvbnN0cmFpbnRzXG4gICAgXHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG4gICAgXHRcbiAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSAmJiAhY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuICAgIFx0XHRyZXR1cm4gJ05vdCBhIHZhbGlkIGVtYWlsJztcbiAgICBcdH1cbiAgICBcdC8vaWYoIWNvbnN0cmFpbnQudGVzdCh2YWx1ZSkpIHJldHVybiAnTm90IGEgdmFsaWQgZS1tYWlsIGFkZHJlc3MnXG4gICAgXHRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXRlT2ZCaXJ0aCh2YWx1ZSkge31cblxuXHRyZXR1cm4gYWxsVmFsaWRhdGlvbnM7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29uZmlnKGNvbmZpZyk7XG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlcikgeyAgIFxuICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgLndoZW4oJy8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbGFuZGluZ1BhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ0xhbmRpbmdQYWdlQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9zaWdudXAnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbmV3VXNlclNpZ251cC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnTmV3VXNlclNpZ25VcENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcmVnaXN0ZXJlZFVzZXJMb2dpbi5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnUmVnVXNlckxvZ2luQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy91c2VySW5mb3JtYXRpb24vOnVpZD8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdXNlckluZm9ybWF0aW9uLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VySW5mb3JtYXRpb25Db250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZTogdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZVxuICAgICAgICB9XG4gICAgfSlcbiAgICAud2hlbignL3VzZXJFdmVudHMvOnVpZD8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvdXNlckV2ZW50cy5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnVXNlckV2ZW50c0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlOiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC53aGVuKCcvZXZlbnQvaG9zdC86ZXZlbnRJZC86dWlkLzpzZWN0aW9uJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2hvc3RFdmVudC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnSG9zdEV2ZW50Q29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2U6IHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC53aGVuKCcvZXZlbnQvZ3Vlc3QvOmV2ZW50SWQvOnVpZC86aG9zdElkJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2d1ZXN0RXZlbnQuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ0d1ZXN0RXZlbnRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZTogdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9ldmVudC86ZXZlbnRJZD8vOmhvc3RJZD8vOnVpZD8vOnNlY3Rpb24/Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2FuRXZlbnQuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ0FuRXZlbnRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZTogdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgICAgIGV2ZW50Vmlld0NoYW5nZXI6IGV2ZW50Vmlld0NoYW5nZXJcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLm90aGVyd2lzZSh7XG4gICAgICAgIHJlZGlyZWN0VG86ICcvJ1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlKGF1dGhTZXJ2aWNlKSB7XG4gICAgYXV0aFNlcnZpY2UuaXNMb2dnZWRJbigpO1xufTtcblxuZnVuY3Rpb24gZXZlbnRWaWV3Q2hhbmdlcih0cmFmZmljVmFsZXQsICRyb3V0ZSkge1xuICAgIHRyYWZmaWNWYWxldC5ldmVudFJvdXRlKCRyb3V0ZS5jdXJyZW50LnBhcmFtcy5ldmVudElkLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm91dGUuY3VycmVudC5wYXJhbXMuaG9zdElkLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm91dGUuY3VycmVudC5wYXJhbXMudWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5zZWN0aW9uKTtcbn07IiwiXG5jb25maWcuJGluamVjdCA9IFtcIiRyb3V0ZVByb3ZpZGVyXCJdO1xudXNlckF1dGhlbnRpY2F0aW9uU2VydmljZS4kaW5qZWN0ID0gW1wiYXV0aFNlcnZpY2VcIl07XG5ldmVudFZpZXdDaGFuZ2VyLiRpbmplY3QgPSBbXCJ0cmFmZmljVmFsZXRcIiwgXCIkcm91dGVcIl07YW5ndWxhclxuXHQubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcsIFtcblx0XHQnbmdSb3V0ZScsXG5cdFx0J25nVG91Y2gnLFxuXHRcdCdmaXJlYmFzZSdcblx0XSk7XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdBbkV2ZW50Q29udHJvbGxlcicsIEFuRXZlbnRDb250cm9sbGVyKTtcblxuQW5FdmVudENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCBdO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIEFuRXZlbnRDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcykge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHRcblx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0dm0udGVtcFRpbWUgPSB7c3RhcnQ6ICcnLCBlbmQ6ICcnfTtcblx0dm0udXNlcklzSG9zdCA9IGZhbHNlO1xuXG5cblx0Ly9Mb2NhbCBNZXRob2RzXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cdFx0Ly9kZWNsYXJlIGFuZCBpbml0aWFsaXplIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZtLnRlbXBEYXRlVGltZSA9IHtzdGFydDogJycsIGVuZDogJyd9O1xuXHRcdHZtLm5ld0d1ZXN0ID0ge25hbWU6ICcnLCBlbWFpbDp7YWRkcmVzczonJywgdmFsaWQ6ZmFsc2UsIHN0eWxlOntjb2xvcjonJ319fTtcblx0XHR2bS5zaG93SWZIb3N0ID0gZmFsc2U7XG5cdFx0dm0uaGlkZUlmQXR0ZW5kaW5nID0gdHJ1ZTtcblx0XHQvL3NlY3Rpb25zXG5cdFx0dm0ubWFuYWdlU2VjdGlvbnMgPSB7XG5cdFx0XHQxOiB7YWN0aXZlOiB0cnVlLCBjb21wbGV0ZTogZmFsc2UsIHN0eWxlOntjb2xvcjonYmxhY2snLCAnYmFja2dyb3VuZC1jb2xvcic6J3llbGxvdyd9fSxcblx0XHRcdDI6IHthY3RpdmU6IGZhbHNlLCBjb21wbGV0ZTogZmFsc2UsIHN0eWxlOntjb2xvcjond2hpdGUnLCAnYmFja2dyb3VuZC1jb2xvcic6J2dyYXknfX0sXG5cdFx0XHQzOiB7YWN0aXZlOiBmYWxzZSwgY29tcGxldGU6IGZhbHNlLCBzdHlsZTp7Y29sb3I6J3doaXRlJywgJ2JhY2tncm91bmQtY29sb3InOidncmF5J319XG5cdFx0fTtcblxuXHRcdC8vY2hlY2sgdXNlciB0byBkZXRlcm1pbmUgc3RhdGVcblx0XHRjaGVja0Zvckhvc3QoKTtcblx0XHRjaGVja0lmR3Vlc3RJc0F0dGVuZGluZygpO1xuXG5cdFx0Ly9vcGVuIHVwIHNlY3Rpb25zXG5cdFx0aWYoIXZtLnNob3dJZkhvc3QpIG9wZW5BbGxTZWN0aW9ucygpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXRmOF90b19iNjQoc3RyKSB7XG5cdFx0cmV0dXJuIGJ0b2Eoc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NF90b191dGY4KHN0cikge1xuICAgIFx0cmV0dXJuIGF0b2Ioc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRhdGVUaW1lVG9Vbml4VGltZShkYXRlVGltZSkge1xuXHRcdHJldHVybiBEYXRlLnBhcnNlKGRhdGVUaW1lKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNsZWFuTmV3R3Vlc3RWYXJpYWJsZSgpIHtcblx0XHR2bS5uZXdHdWVzdCA9IHtuYW1lOiAnJywgZW1haWw6e2FkZHJlc3M6JycsIHZhbGlkOmZhbHNlLCBzdHlsZTp7Y29sb3I6Jyd9fX07XG5cdH1cblxuXHRmdW5jdGlvbiBpbnZpdGVBUmVnaXN0ZXJlZFVzZXIodWlkKSB7XG5cdFx0JGxvZy5pbmZvKCdhZGRpbmcgdGhlbSB0byB0aGUgcmVnaXN0ZXJlZCB1c2VycyBsaXN0ICcgKyB1aWQpO1xuXHRcdC8vc2V0IHRoZSBuZXcgZXZlbnRcblx0XHRyZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ3BlbmRpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS5jaGlsZCgkcm91dGVQYXJhbXMuZXZlbnRJZCkuc2V0KHtcblx0XHRcdGlkOiAkcm91dGVQYXJhbXMuZXZlbnRJZCxcblx0XHRcdGV2ZW50VGltZXM6IHtcblx0XHRcdFx0c3RhcnQ6IHZtLmV2ZW50LmV2ZW50VGltZXMuc3RhcnQsXG5cdFx0XHRcdGVuZDogdm0uZXZlbnQuZXZlbnRUaW1lcy5lbmRcblx0XHRcdH0sXG5cdFx0XHRuYW1lOiB2bS5ldmVudC5uYW1lLFxuXHRcdFx0aG9zdDogJHJvdXRlUGFyYW1zLnVpZFxuXHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKCd0aGVyZSB3YXMgYW4gZXJyb3InICsgZXJyb3IpO1xuXHRcdH0pO1xuXHRcdC8vaWYgdGhlcmUgd2FzIGFuIHVwZGF0ZWQgcGxhY2UgaG9sZGVyLCByZW1vdmUgaXRcblx0XHRyZWYuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ3BlbmRpbmcnKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHR2YXIgY2hlY2tGb3JQbGFjZWhvbGRlciA9IHNuYXBzaG90LnZhbCgpXG5cdFx0XHQkbG9nLmluZm8oc25hcHNob3QudmFsKCkpO1xuXG5cdFx0XHRpZihjaGVja0ZvclBsYWNlaG9sZGVyLnVwZGF0ZWQpIHtcblx0XHRcdFx0JGxvZy5pbmZvKCdkZWxldGluZyB1cGRhdGVkJyk7XG5cdFx0XHRcdHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgncGVuZGluZycpLmNoaWxkKCd1cGRhdGVkJykucmVtb3ZlKGZ1bmN0aW9uKGVycm9yT2JqZWN0KSB7XG5cdFx0XHRcdFx0aWYoZXJyb3JPYmplY3QpICRsb2cuaW5mbyhcIkRlbGV0aW5nIGZhaWxlZDogXCIgKyBlcnJvck9iamVjdC5jb2RlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgJGxvZy5pbmZvKCdub3RoaW5nIHRvIGRvJyk7XG5cblx0XHR9LCBmdW5jdGlvbihlcnJvck9iamVjdCkge1xuXHRcdFx0aWYoZXJyb3JPYmplY3QpICRsb2cuaW5mbyhcIlRoZSByZWFkIGZhaWxlZDogXCIgKyBlcnJvck9iamVjdC5jb2RlKTtcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGludml0ZUFuVW5yZWdpc3RlcmVkVXNlcih1c2VyS2V5KSB7XG5cdFx0JGxvZy5pbmZvKCdhZGRpbmcgdGhlbSB0byB0aGUgVU5SRUdJU1RFUkVEIHVzZXJzIGxpc3QgJyArIHVzZXJLZXkpO1xuXHRcdHJlZi5jaGlsZCgnVW5yZWdpc3RlcmVkVXNlcnMnKS5jaGlsZCh1c2VyS2V5KS5jaGlsZCgncGVuZGluZycpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLmNoaWxkKCRyb3V0ZVBhcmFtcy5ldmVudElkKS5zZXQoe1xuXHRcdFx0aWQ6ICRyb3V0ZVBhcmFtcy5ldmVudElkLFxuXHRcdFx0aG9zdDogJHJvdXRlUGFyYW1zLnVpZCxcblx0XHRcdGV2ZW50VGltZXM6IHtcblx0XHRcdFx0c3RhcnQ6IHZtLmV2ZW50LmV2ZW50VGltZXMuc3RhcnQsXG5cdFx0XHRcdGVuZDogdm0uZXZlbnQuZXZlbnRUaW1lcy5lbmRcblx0XHRcdH0sXG5cdFx0XHRuYW1lOiB2bS5ldmVudC5uYW1lXG5cdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdGlmKGVycm9yKSAkbG9nLmluZm8oJ3RoZXJlIHdhcyBhbiBlcnJvcicgKyBlcnJvcik7XG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBjaGVja0Zvckhvc3QoKSB7XG5cdFx0Ly9jaGVjayBldmVudCBob3N0XG5cdFx0dmFyIGF1dGhEYXRhID0gcmVmLmdldEF1dGgoKTtcblxuXHRcdGlmKGF1dGhEYXRhLnVpZCA9PSAkcm91dGVQYXJhbXMuaG9zdElkKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2lzIHRoZSBob3N0Jyk7XG5cdFx0XHR2bS5zaG93SWZIb3N0ID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JGxvZy5pbmZvKCdub3QgdGhlIGhvc3QnKTtcblx0XHRcdHZtLnNob3dJZkhvc3QgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBjaGVja0lmR3Vlc3RJc0F0dGVuZGluZygpIHtcblx0XHRpZighdm0uc2hvd0lmSG9zdCkge1xuXHRcdFx0JGxvZy5pbmZvKCdjaGVjayBndWVzdCBhdHRlbmRhbmNlJyk7XG5cdFx0XHR1c2VyRXZlbnRzLmNoaWxkKCdndWVzdExpc3QnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0XHR2YXIgYWxsR3Vlc3RzID0gc25hcHNob3QudmFsKCk7XG5cdFx0XHRcdHZtLmhpZGVJZkF0dGVuZGluZyA9ICFhbGxHdWVzdHNbJHJvdXRlUGFyYW1zLnVpZF0uYXR0ZW5kaW5nO1xuXHRcdFx0XHRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIG9wZW5BbGxTZWN0aW9ucygpIHtcblx0XHR2bS5tYW5hZ2VTZWN0aW9uc1sxXS5hY3RpdmUgPSB0cnVlO1xuXHRcdHZtLm1hbmFnZVNlY3Rpb25zWzJdLmFjdGl2ZSA9IHRydWU7XG5cdFx0dm0ubWFuYWdlU2VjdGlvbnNbM10uYWN0aXZlID0gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNhdmVFdmVudCgpIHtcblx0XHR2bS5ldmVudC4kc2F2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2V2ZW50IHNhdmVkJyk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdCRsb2cuaW5mbygnZXJyb3IhICcgKyBlcnJvcik7XG5cdFx0fSk7XG5cdH1cblxuXHQvL3ZpZXcgTWV0aG9kXG5cdHZtLnNldFRlbXBUaW1lID0gZnVuY3Rpb24oZW5kcG9pbnQpIHtcblx0XHRpZihlbmRwb2ludCA9PSAnc3RhcnQnKSB2bS50ZW1wRGF0ZVRpbWUuc3RhcnQgPSBuZXcgRGF0ZSgpO1xuXHRcdGlmKGVuZHBvaW50ID09ICdlbmQnKSB2bS50ZW1wRGF0ZVRpbWUuZW5kID0gbmV3IERhdGUoKTtcblx0fVxuXG5cdHZtLnVuaXhUaW1lVG9EYXRlVGltZSA9IGZ1bmN0aW9uICh1bml4VGltZSkge1xuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh1bml4VGltZSkpO1xuXHR9O1xuXG5cdHZtLmRhdGVUaW1lVG9Vbml4VGltZSA9IGZ1bmN0aW9uIChkYXRlVGltZSkge1xuXHRcdHJldHVybiBEYXRlLnBhcnNlKGRhdGVUaW1lKTtcblx0fTtcblxuXHR2bS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcblx0XHQkbG9nLmluZm8oJ3N1Ym1pdHRpbmcgdGhlIGZvcm0gbm93IScpO1xuXHR9XG5cblx0dm0uYmFja1RvVXNlckV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdCRsb2NhdGlvbi5wYXRoKCcvdXNlckV2ZW50cy8nICsgJHJvdXRlUGFyYW1zLnVpZCArICcvJyArICRyb3V0ZVBhcmFtcy50b2tlbik7XG5cdH1cblxuXHR2bS5ldmVudFJlZGlyZWN0ID0gZnVuY3Rpb24ocGF0aCwgZXZlbnRJRCkge1xuXHRcdHZhciBmdWxsUGF0aCA9IHBhdGggKyAnLycgKyAkcm91dGVQYXJhbXMudWlkICsgJy8nICsgJHJvdXRlUGFyYW1zLnRva2VuO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0fVxuXG5cdHZtLmNoYW5nZVNlY3Rpb24gPSBmdW5jdGlvbih0YXJnZXRTZWN0aW9uKSB7XG5cdFx0JGxvZy5pbmZvKCdhcmUgd2UgaGVyZScpO1xuXHRcdGZvcihpID0gMTsgaSA8PTM7IGkrKykge1xuXHRcdFx0aWYoaT09dGFyZ2V0U2VjdGlvbikge1xuXHRcdFx0XHR2bS5tYW5hZ2VTZWN0aW9uc1tpXS5hY3RpdmUgPSB0cnVlO1xuXHRcdFx0XHR2bS5tYW5hZ2VTZWN0aW9uc1tpXS5zdHlsZVsnYmFja2dyb3VuZC1jb2xvciddID0neWVsbG93Jztcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uc3R5bGVbJ2NvbG9yJ10gPSdibGFjayc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS5tYW5hZ2VTZWN0aW9uc1tpXS5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0dm0ubWFuYWdlU2VjdGlvbnNbaV0uc3R5bGVbJ2JhY2tncm91bmQtY29sb3InXSA9J2dyYXknO1xuXHRcdFx0XHR2bS5tYW5hZ2VTZWN0aW9uc1tpXS5zdHlsZVsnY29sb3InXSA9J3doaXRlJztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR2bS5zYXZlRXZlbnRUaW1lID0gZnVuY3Rpb24oZGF0ZVRpbWUsIHRhcmdldCkge1xuXHRcdC8vaWYgdGhpcyBldmVudCBkaWRuJ3QgaGF2ZSBhIHN0YXJ0IHRpbWUsIGNyZWF0ZSBpdFxuXHRcdGlmKCF2bS5ldmVudC5ldmVudFRpbWVzKSB7IFxuXHRcdFx0dm0uZXZlbnQuZXZlbnRUaW1lcyA9IHtzdGFydDogJycsIGVuZDogJyd9O1xuXHRcdFx0dm0uZXZlbnQuZXZlbnRUaW1lcy5zdGFydCA9IHZtLmRhdGVUaW1lVG9Vbml4VGltZSh2bS50ZW1wRGF0ZVRpbWUuc3RhcnQpOyBcblx0XHRcdHZtLmV2ZW50LmV2ZW50VGltZXMuZW5kID0gdm0uZGF0ZVRpbWVUb1VuaXhUaW1lKHZtLnRlbXBEYXRlVGltZS5lbmQpO1xuXHRcdH1cblxuXHRcdGlmKCh2bS50ZW1wRGF0ZVRpbWUuZW5kIDwgdm0udGVtcERhdGVUaW1lLnN0YXJ0KSAmJiB0YXJnZXQgPT0gJ3N0YXJ0Jykgdm0udGVtcERhdGVUaW1lLmVuZCA9IHZtLnRlbXBEYXRlVGltZS5zdGFydDtcblx0XHRpZih0YXJnZXQgPT0gJ3N0YXJ0Jykgdm0uZXZlbnQuZXZlbnRUaW1lcy5zdGFydCA9IHZtLmRhdGVUaW1lVG9Vbml4VGltZShkYXRlVGltZSk7XG5cdFx0aWYodGFyZ2V0ID09ICdlbmQnKSB2bS5ldmVudC5ldmVudFRpbWVzLmVuZCA9IHZtLmRhdGVUaW1lVG9Vbml4VGltZShkYXRlVGltZSk7XG5cdH1cblxuXHR2bS5ndWVzdHNBcmVJbnZpdGVkID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYodm0uZXZlbnQuZ3Vlc3RMaXN0KSByZXR1cm4gdHJ1ZTtcblx0XHRlbHNlIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZtLnZhbGlkYXRlR3Vlc3RFbWFpbCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vaWYgdGhlcmUgaXMgYW4gZW1haWwgYWRkcmVzc1xuXHRcdGlmKHZtLm5ld0d1ZXN0LmVtYWlsLmFkZHJlc3MpIHtcblx0XHRcdC8vY2hlY2sgdmFsaWRpdHlcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1wiLCBcIlwiKTtcblxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZtLm5ld0d1ZXN0LmVtYWlsLmFkZHJlc3MpKSB7XG5cdFx0XHRcdHZtLm5ld0d1ZXN0LmVtYWlsLnZhbGlkID0gdHJ1ZTtcblx0XHRcdFx0dm0ubmV3R3Vlc3QuZW1haWwuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS5uZXdHdWVzdC5lbWFpbC52YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHR2bS5uZXdHdWVzdC5lbWFpbC5zdHlsZSA9IHtjb2xvcjonJ307XG5cdFx0XHR9XHRcdFx0XG5cdFx0fVxuXHR9XG5cblx0dm0uaXNTZWN0aW9uQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRmb3IoaT0wO2k8ODtpKyspIHtcblx0XHRcdCRsb2cuaW5mbyh2bS5yZXF1aXJlZElucHV0c1tpXSk7XG5cdFx0fVxuXHR9XG5cblx0dm0uc2F2ZUFuZEFkdmFuY2UgPSBmdW5jdGlvbigpIHtcblx0XHR2bS5ldmVudC4kc2F2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2V2ZW50IHNhdmVkJyk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdCRsb2cuaW5mbygnZXJyb3IhICcgKyBlcnJvcik7XG5cdFx0fSk7XG5cblx0XHQvL2NoZWNrIGZvciBjb21wbGV0ZW5lc1xuXHRcdHZtLmlzU2VjdGlvbkNvbXBsZXRlKCk7XG5cblx0XHRpZih2bS5tYW5hZ2VTZWN0aW9uc1sxXS5jb21wbGV0ZSA9PSB0cnVlICYmIHZtLm1hbmFnZVNlY3Rpb25zWzJdLmNvbXBsZXRlID09IHRydWUgJiYgdm0ubWFuYWdlU2VjdGlvbnNbM10uY29tcGxldGUgPT0gdHJ1ZSkge1xuXHRcdFx0dm0uZXZlbnRSZWRpcmVjdCgnL3VzZXJFdmVudHMnLCAkcm91dGVQYXJhbXMudWlkKTtcblx0XHR9IGVsc2UgaWYgKHZtLm1hbmFnZVNlY3Rpb25zWzFdLmFjdGl2ZSkgdm0uY2hhbmdlU2VjdGlvbigyKTtcblx0XHRlbHNlIGlmICh2bS5tYW5hZ2VTZWN0aW9uc1syXS5hY3RpdmUpIHZtLmNoYW5nZVNlY3Rpb24oMyk7XG5cdFx0ZWxzZSBpZiAodm0ubWFuYWdlU2VjdGlvbnNbM10uYWN0aXZlKSB2bS5jaGFuZ2VTZWN0aW9uKDEpO1xuXHR9XG5cblx0dm0uYWRkR3Vlc3RUb0hvc3RzTGlzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vZGVjbGFyZSBhbmQgaW5pdGlhbGl6ZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgdXNlcktleSA9IHV0ZjhfdG9fYjY0KHZtLm5ld0d1ZXN0LmVtYWlsLmFkZHJlc3MpO1xuXG5cdFx0Ly9pZiBlbWFpbCBpcyB2YWxpZCBhbmQgbmFtZSBleGlzdHNcblx0XHRpZiAodm0ubmV3R3Vlc3QubmFtZSAmJiB2bS5uZXdHdWVzdC5lbWFpbC52YWxpZCkge1xuXHRcdFx0Ly9pcyB0aGVyZSBhIGd1ZXN0IGxpc3QgYWxyZWFkeT8gSWYgbm90IGNyZWF0ZSBvbmVcblx0XHRcdGlmKCF2bS5ldmVudC5ndWVzdExpc3QpIHtcblx0XHRcdFx0dm0uZXZlbnQuZ3Vlc3RMaXN0ID0ge307XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvL2lmIHNvIGlzIHRoaXMgcGVyc29uIGFscmVhZHkgb24gdGhlIGxpc3Q/XG5cdFx0XHRcdHZhciBpID0wO1xuXHRcdFx0XHR3aGlsZSh2bS5ldmVudC5ndWVzdExpc3RbaV0pIHtcblx0XHRcdFx0XHRpZih2bS5ldmVudC5ndWVzdExpc3RbaV0uZW1haWwgPT0gYjY0X3RvX3V0ZjgodXNlcktleSkpIHtcblx0XHRcdFx0XHRcdCRsb2cuaW5mbygnVGhpcyBndWVzdCBpcyBhbHJlYWR5IG9uIHRoZSBsaXN0Jyk7XG5cdFx0XHRcdFx0XHRjbGVhbk5ld0d1ZXN0VmFyaWFibGUoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vaXMgdGhpcyBndWVzdCBhIHJlZ2lzdGVyZWQgdXNlcj9cblx0XHRcdGlmKHJlZ2lzdGVyZWRVc2Vyc1t1c2VyS2V5XSkge1xuXHRcdFx0XHQvL2lzIHRoZSByZWdpc3RlcmVkIHVzZXIgdGhlIGhvc3Q/XG5cdFx0XHRcdGlmKHJlZ2lzdGVyZWRVc2Vyc1t1c2VyS2V5XSA9PSAkcm91dGVQYXJhbXMudWlkKSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCd0cmllZCB0byByZWdpc3RlciB0aGUgaG9zdCcpO1xuXHRcdFx0XHRcdGNsZWFuTmV3R3Vlc3RWYXJpYWJsZSgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvL2FkZCB0aGVtIHRvIHRoZSBhcHByb3ByaWF0ZSByZWdpc3RlcmVkIHVzZXJzJyBsaXN0IG9mIGV2ZW50IGludml0ZXNcblx0XHRcdFx0XHRpbnZpdGVBUmVnaXN0ZXJlZFVzZXIocmVnaXN0ZXJlZFVzZXJzW3VzZXJLZXldKTtcblxuXHRcdFx0XHRcdC8vYWRkIHRoZSBndWVzdCB0byB0aGUgbGlzdFxuXHRcdFx0XHRcdHZtLmV2ZW50Lmd1ZXN0TGlzdFtyZWdpc3RlcmVkVXNlcnNbdXNlcktleV1dID0ge1xuXHRcdFx0XHRcdFx0YXR0ZW5kaW5nOiBmYWxzZSwgXG5cdFx0XHRcdFx0XHRzdGF0dXM6J3BlbmRpbmcnLCBcblx0XHRcdFx0XHRcdG5hbWU6IHZtLm5ld0d1ZXN0Lm5hbWUsIFxuXHRcdFx0XHRcdFx0ZW1haWw6dm0ubmV3R3Vlc3QuZW1haWwuYWRkcmVzcyxcblx0XHRcdFx0XHR9O1x0XHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9hZGQgdGhlIGludml0ZSB0byB0aGUgbm9uLXJlZ2lzdGVyZWQgdXNlcnMgbGlzdCBvZiBldmVudCBpbnZpdGVzXG5cdFx0XHRcdGludml0ZUFuVW5yZWdpc3RlcmVkVXNlcih1c2VyS2V5KTtcblxuXHRcdFx0XHQvL2FkZCB0aGUgZ3Vlc3QgdG8gdGhlIGxpc3Rcblx0XHRcdFx0dm0uZXZlbnQuZ3Vlc3RMaXN0W3VzZXJLZXldID0ge1xuXHRcdFx0XHRcdFx0YXR0ZW5kaW5nOiBmYWxzZSwgXG5cdFx0XHRcdFx0XHRzdGF0dXM6J3BlbmRpbmcnLCBcblx0XHRcdFx0XHRcdG5hbWU6IHZtLm5ld0d1ZXN0Lm5hbWUsIFxuXHRcdFx0XHRcdFx0ZW1haWw6dm0ubmV3R3Vlc3QuZW1haWwuYWRkcmVzcyxcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXG5cdFx0XHQvL3NhdmUgdGhlIGV2ZW50XG5cdFx0XHR2bS5zYXZlRXZlbnQoKTtcblx0XHRcdC8vY2xlYXIgdGhlIHRlbXAgdmFsdWVzXG5cdFx0XHRjbGVhbk5ld0d1ZXN0VmFyaWFibGUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JGxvZy5pbmZvKCd5b3UgZGlkblxcJ3QgZW50ZXIgYSBuYW1lIGFuZCBvciBlbWFpbCcpO1xuXHRcdH1cblx0fVxuXG5cdHZtLmd1ZXN0V2lsbEF0dGVuZCA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cdFx0dmFyIGN1cnJlbnRVc2VyID0gcmVmLmNoaWxkKCdVc2VycycpLmNoaWxkKCRyb3V0ZVBhcmFtcy51aWQpLmNoaWxkKCdldmVudHMnKTtcblx0XHR2YXIgdG90YWxQZW5kaW5nSW52aXRhdGlvbnMgPSAwO1xuXHRcdHZhciByZW1vdmVBdHRlbmRpbmdVcGRhdGVkID0gZmFsc2U7XG5cdFx0XG5cdFx0Ly9jaGFuZ2UgYXR0ZW5kaW5nIHRvIHRydWUgaW4gaG9zdCdzIGd1ZXN0TGlzdFxuXHRcdHZtLmV2ZW50Lmd1ZXN0TGlzdFskcm91dGVQYXJhbXMudWlkXS5hdHRlbmRpbmcgPSByZXNwb25zZTtcblx0XHQvL2NoYW5nZSBzdGF0dXMgdG8gJ2F0dGVuZGluZycgaW4gaG9zdCdzIGd1ZXN0TGlzdFxuXHRcdHZtLmV2ZW50Lmd1ZXN0TGlzdFskcm91dGVQYXJhbXMudWlkXS5zdGF0dXMgPSAnYXR0ZW5kaW5nJztcblx0XHRcblx0XHQvL2dldCB0aGUgaW52aXRhdGlvbiBkZXRhaWxzXG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ3BlbmRpbmcnKS5vbigndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFsYmVcblx0XHRcdHZhciBpbnZpdGF0aW9ucyA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0Ly9sb2cgc3RhcnRpbmcgdmFsdWVzXG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnMpO1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zWyRyb3V0ZVBhcmFtcy5ob3N0SWRdKTtcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9uc1skcm91dGVQYXJhbXMuaG9zdElkXVskcm91dGVQYXJhbXMuZXZlbnRJZF0pO1xuXG5cdFx0XHR2YXIgdGhpc0ludml0YXRpb24gPSBpbnZpdGF0aW9uc1skcm91dGVQYXJhbXMuaG9zdElkXVskcm91dGVQYXJhbXMuZXZlbnRJZF07XG5cdFx0XHRcblx0XHRcdCRsb2cuaW5mbyh0aGlzSW52aXRhdGlvbik7XG5cdFx0XHRcblx0XHRcdC8vY2hlY2sgIyBvZiBpbml2aWF0aW9uc1xuXHRcdFx0Zm9yKGludml0YXRpb24gaW4gaW52aXRhdGlvbnMpIHtcblx0XHRcdFx0dG90YWxQZW5kaW5nSW52aXRhdGlvbnMrKztcblx0XHRcdH1cblxuXHRcdFx0Ly9yZXBvcnQgIyBvZiBpbnZpdGF0aW9uc1xuXHRcdFx0JGxvZy5pbmZvKFwidG90YWwgYXR0ZW5kaW5nOiBcIiArIHRvdGFsUGVuZGluZ0ludml0YXRpb25zKTtcblx0XHRcdFxuXHRcdFx0Ly9hZGQgdGhlIGV2ZW50IHRvIHRoZSBndWVzdCdzIGF0dGVuZGluZyBsaXN0XG5cdFx0XHRpZihyZXNwb25zZSkgY3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLmNoaWxkKCRyb3V0ZVBhcmFtcy5ob3N0SWQpLmNoaWxkKCRyb3V0ZVBhcmFtcy5ldmVudElkKS5zZXQodGhpc0ludml0YXRpb24sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSAkbG9nLmluZm8oZXJyb3IpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHRcdC8vaWYgdGhlIHVwZGF0ZWQgcGxhY2Vob2xkZXIgd2FzIG9uIHRoZSBhdHRlbmRpbmcgbGlzdCByZW1vdmUgaXRcblx0XHRjdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0XHR2YXIgYXR0ZW5kaW5nTGlzdCA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0XG5cdFx0XHQvL3JlcG9ydCBhY3Rpb25zXG5cdFx0XHQkbG9nLmluZm8oJ3RoaXMgaXMgdGhlIGF0dGVuZGluZyBsaXN0Jyk7XG5cdFx0XHQkbG9nLmluZm8oYXR0ZW5kaW5nTGlzdCk7XG5cdFx0XHRcblx0XHRcdC8vdGhyb3cgZmxhZyBmb3IgbGF0ZXJcblx0XHRcdGlmKGF0dGVuZGluZ0xpc3QudXBkYXRlZCkgcmVtb3ZlQXR0ZW5kaW5nVXBkYXRlZCA9IHRydWU7XG5cblx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0Ly9pZiB0aGVyIHdhcyBhbiBlcnJvciByZXBvcnQgaXRcblx0XHRcdGlmKGVycm9yKSAkbG9nLmluZm8oZXJyb3IpO1xuXHRcdH0pO1xuXG5cdFx0Ly9pZiB0aGlzIGlzIHRoZSBsYXN0IHBlbmRpbmcgZXZlbnQgb24gdGhlIGd1ZXN0J3MgcGVuZGluZyBsaXN0LCBhZGQgdGhlIHVwZGF0ZWQgcGxhY2Vob2xkZXJcblx0XHRpZih0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucyA8IDIpIHtcblx0XHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0XHQvL3JlcGxhY2Ugd2l0aCB1cGRhdGVkIGZpZWxkXG5cdFx0XHRjdXJyZW50VXNlci5jaGlsZCgncGVuZGluZycpLnVwZGF0ZSh7XG5cdFx0XHRcdHVwZGF0ZWQ6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSAkbG9nLmluZm8oZXJyb3IpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly9yZW1vdmUgdGhlIGV2ZW50IGZyb20gdGhlIGd1ZXN0J3MgcGVuZGluZyBsaXN0XG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ3BlbmRpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMuaG9zdElkKS5yZW1vdmUoKTtcblxuXHRcdC8vaWYgdGhlcmUgd2FzIGFuIHVwZGF0ZWQgZmllbGQgaW4gYXR0ZW5kaW5nLCByZW1vdmUgaXRcblx0XHRpZihyZW1vdmVBdHRlbmRpbmdVcGRhdGVkKSB7XG5cdFx0XHQkbG9nLmluZm8oJ3JlbW92aW5nIHRoZSB1cGRhdGVkIHBsYWNlaG9sZGVyJyk7XG5cdFx0XHQvL2N1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5jaGlsZCgndXBkYXRlZCcpLnJlbW92ZSgpO1xuXHRcdH1cblxuXHRcdC8vc2F2ZSBjaGFuZ2VzXG5cdFx0dm0uZXZlbnQuJHNhdmUoKTtcblx0fVxuXG5cdHZtLnVwZGF0ZVVwZGF0ZWRQYXJhbSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdXJyZW50VXNlciA9IHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS5jaGlsZCgnZXZlbnRzJyk7XG5cdFx0XG5cdFx0JGxvZy5pbmZvKCd1cGRhdGluZyB0aGUgcGFyYW0nKTtcblx0XHRjdXJyZW50VXNlci5jaGlsZCgnYXR0ZW5kaW5nJykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdCRsb2cuaW5mbyhzbmFwc2hvdC52YWwoKSk7XG5cdFx0fSk7XG5cdFx0Y3VycmVudFVzZXIuY2hpbGQoJ2F0dGVuZGluZycpLmNoaWxkKCd1cGRhdGVkJykucmVtb3ZlKCk7XG5cdH1cblxuXHR2bS5hZGRJbnZpdGF0aW9uVG9BdHRlbmRpbmcgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdHZhciBjdXJyZW50VXNlciA9IHJlZi5jaGlsZCgnVXNlcnMnKS5jaGlsZCgkcm91dGVQYXJhbXMudWlkKS5jaGlsZCgnZXZlbnRzJyk7XG5cdFx0dmFyIHRvdGFsUGVuZGluZ0ludml0YXRpb25zID0gMDtcblxuXHRcdC8vZ2V0IHRoZSBpbnZpdGF0aW9uIGRldGFpbHNcblx0XHRjdXJyZW50VXNlci5jaGlsZCgncGVuZGluZycpLm9uKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWxiZVxuXHRcdFx0dmFyIGludml0YXRpb25zID0gc25hcHNob3QudmFsKCk7XG5cdFx0XHR2YXIgdGhpc0ludml0YXRpb24gPSBpbnZpdGF0aW9uc1skcm91dGVQYXJhbXMuaG9zdElkXVskcm91dGVQYXJhbXMuZXZlbnRJZF07XG5cdFx0XHRcblx0XHRcdC8vbG9nIHN0YXJ0aW5nIHZhbHVlc1xuXHRcdFx0JGxvZy5pbmZvKGludml0YXRpb25zKTtcblx0XHRcdCRsb2cuaW5mbyhpbnZpdGF0aW9uc1skcm91dGVQYXJhbXMuaG9zdElkXSk7XG5cdFx0XHQkbG9nLmluZm8oaW52aXRhdGlvbnNbJHJvdXRlUGFyYW1zLmhvc3RJZF1bJHJvdXRlUGFyYW1zLmV2ZW50SWRdKTtcblx0XHRcdFxuXHRcdFx0Ly9jaGVjayAjIG9mIGluaXZpYXRpb25zXG5cdFx0XHRmb3IoaW52aXRhdGlvbiBpbiBpbnZpdGF0aW9ucykge1xuXHRcdFx0XHR0b3RhbFBlbmRpbmdJbnZpdGF0aW9ucysrO1xuXHRcdFx0fVxuXG5cdFx0XHQvL3JlcG9ydCAjIG9mIGludml0YXRpb25zXG5cdFx0XHQkbG9nLmluZm8oXCJ0b3RhbCBwZW5kaW5nIGludml0YXRpb25zOiBcIiArIHRvdGFsUGVuZGluZ0ludml0YXRpb25zKTtcblx0XHRcdFxuXHRcdFx0JGxvZy5pbmZvKHJlc3BvbnNlKTtcblx0XHRcdC8vYWRkIHRoZSBldmVudCB0byB0aGUgZ3Vlc3QncyBhdHRlbmRpbmcgbGlzdFxuXHRcdFx0aWYocmVzcG9uc2UpIGN1cnJlbnRVc2VyLmNoaWxkKCdhdHRlbmRpbmcnKS5jaGlsZCgkcm91dGVQYXJhbXMuaG9zdElkKS5jaGlsZCgkcm91dGVQYXJhbXMuZXZlbnRJZCkuc2V0KHRoaXNJbnZpdGF0aW9uLCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKGVycm9yKTtcblx0XHRcdH0pO1xuXG5cblxuXHRcdH0pO1xuXHR9XG5cblx0Ly9zdGFydCBydW5cblx0aW5pdCgpO1xufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb250cm9sbGVyKCdHdWVzdEV2ZW50Q29udHJvbGxlcicsIEd1ZXN0RXZlbnRDb250cm9sbGVyKTtcblxuR3Vlc3RFdmVudENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIEd1ZXN0RXZlbnRDb250cm9sbGVyKCRsb2cpIHtcblx0JGxvZy5pbmZvKCdpbnRvIHRoZSBHdWVzdEV2ZW50Q29udHJvbGxlcicpO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignSG9zdEV2ZW50Q29udHJvbGxlcicsIEhvc3RFdmVudENvbnRyb2xsZXIpO1xuXG5Ib3N0RXZlbnRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJ3VzZXJEYXRhJywgJ3RyYWZmaWNWYWxldCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIEhvc3RFdmVudENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCB1c2VyRGF0YSwgdHJhZmZpY1ZhbGV0KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdFxuXHQvL2xvY2FsIHZhcmlhYmxlc1xuXHR2YXIgaG9zdGVkRXZlbnRTaGVycGEgPSB0cmFmZmljVmFsZXQ7XG5cdHZhciB0aGlzRXZlbnRNYW5hZ2VyID0gdXNlckRhdGE7XG5cblx0Ly92aWV3IG1vZGVsIHZhcmlhYmxlc1xuXHR2bS5hY3RpdmVTZWN0aW9uID0gMTtcblx0dm0udGVtcFRpbWUgPSB7c3RhcnQ6ICcnLCBlbmQ6ICcnLCBkdXJhdGlvbjonJ307XG5cdHZtLnByb2dyZXNzQmFyID0gMzk7XG5cdHZtLnRlbXBFdmVudCA9IHt9O1xuXG5cdC8vbG9jYWwgbWV0aG9kc1xuXHRmdW5jdGlvbiB1bml4VGltZVRvRGF0ZVRpbWUodW5peFRpbWUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0fTtcblxuXHRmdW5jdGlvbiBkYXRlVGltZVRvVW5peFRpbWUoZGF0ZVRpbWUpIHtcblx0XHRyZXR1cm4gRGF0ZS5wYXJzZShkYXRlVGltZSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gY2FsY3VsYXRlRHVyYXRpb24oc3RhcnQsIGVuZCkge1xuXHRcdHJldHVybiAoZGF0ZVRpbWVUb1VuaXhUaW1lKGVuZCkgLSBkYXRlVGltZVRvVW5peFRpbWUoc3RhcnQpKSAvICg2MCoxMDAwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRFdmVudFRpbWVzKCkge1xuXHRcdC8vYnVpbGQgbmV3IHRlbXAgdGltZXNcblx0XHR2YXIgbm93ID0gbmV3IERhdGUoKTtcblxuXHRcdC8vcm91bmQgdG8gdGhlIG5lYXJlc3QgaG91ciwgY3V0IG9mZiBhbnl0aGluZyBzbWFsbGVyXG5cdFx0bm93LnNldEhvdXJzKG5vdy5nZXRIb3VycygpICsgTWF0aC5yb3VuZChub3cuZ2V0TWludXRlcygpLzYwKSk7XG5cdFx0bm93LnNldE1pbnV0ZXMoMCk7XG5cdFx0bm93LnNldFNlY29uZHMoMCk7XG5cdFx0bm93LnNldE1pbGxpc2Vjb25kcygwKTtcblxuXHRcdHZtLnRlbXBUaW1lLnN0YXJ0ID0gbm93O1xuXHRcdHZtLnRlbXBUaW1lLmVuZCA9IG5vdztcblxuXHRcdHZtLnRlbXBUaW1lLmR1cmF0aW9uID0gY2FsY3VsYXRlRHVyYXRpb24odm0udGVtcFRpbWUuc3RhcnQsIHZtLnRlbXBUaW1lLmVuZCk7XG5cdFx0XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVUZW1wVGltZUZyb21Nb2RlbCgpIHtcblx0XHQvL2lmIHN0YXJ0IHRpbWVzIGFyZSBhdmFpbGFibGVcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2bS50ZW1wRXZlbnQuZXZlbnRUaW1lcy5zdGFydCkpIHtcblx0XHRcdC8vc2V0IHRoZSB0ZW1wVGltZSBtb2RlbFxuXHRcdFx0dm0udGVtcFRpbWUuc3RhcnQgPSB1bml4VGltZVRvRGF0ZVRpbWUodm0udGVtcEV2ZW50LmV2ZW50VGltZXMuc3RhcnQpO1xuXHRcdFx0dm0udGVtcFRpbWUuZW5kID0gdW5peFRpbWVUb0RhdGVUaW1lKHZtLnRlbXBFdmVudC5ldmVudFRpbWVzLmVuZCk7XG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdFxuXHRcdC8vbG9hZCBldmVudCBkZXRhaWxzXG5cdFx0dGhpc0V2ZW50TWFuYWdlci5sb2FkQW5FdmVudFByb2dyZXNzaXZlbHkoJHJvdXRlUGFyYW1zLnVpZCwgJHJvdXRlUGFyYW1zLmV2ZW50SWQpXG5cdFx0LnRoZW4oZnVuY3Rpb24odGhlRXZlbnQpIHtcblx0XHRcdC8vYWRkIHRoaXMgZXZlbnQgbW9kZWwgdG8gdGhlIHZpZXcgbW9kZWwgZXZlbnRcblx0XHRcdHZtLnRlbXBFdmVudCA9IHRoZUV2ZW50O1xuXG5cdFx0XHQvL3VwZGF0ZSB0ZW1wVGltZVxuXHRcdFx0dXBkYXRlVGVtcFRpbWVGcm9tTW9kZWwoKTtcblx0XHR9KVxuXHRcdC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0JGxvZygndGhlIGVycm9yIGlzOiAnICsgZXJyb3IpO1xuXHRcdH0pXG5cblx0XHQvL2xvYWQgc3BlY2lmaWVkIHNlY3Rpb25cblx0XHR2bS5hY3RpdmVTZWN0aW9uID0gcGFyc2VJbnQoJHJvdXRlUGFyYW1zLnNlY3Rpb24pO1xuXHRcdC8vc2V0IHRlbXBUaW1lc1xuXHRcdGluaXRFdmVudFRpbWVzKCk7XG5cdH1cblxuXHQvL3ZpZXcgbW9kZWwgbWV0aG9kc1xuXHR2bS5mb3JtYXREdXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vY2FsYyBkdXJhdGlvblxuXHRcdHZtLnRlbXBUaW1lLmR1cmF0aW9uID0gY2FsY3VsYXRlRHVyYXRpb24odm0udGVtcFRpbWUuc3RhcnQsIHZtLnRlbXBUaW1lLmVuZCk7XG5cdFx0JGxvZy5pbmZvKHZtLnRlbXBUaW1lLmR1cmF0aW9uKTtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBob3VycyA9IE1hdGguZmxvb3Iodm0udGVtcFRpbWUuZHVyYXRpb24vKDYwKSk7XG5cdFx0dmFyIG1pbiA9IHZtLnRlbXBUaW1lLmR1cmF0aW9uICUgNjA7XG5cdFx0dmFyIGZyYWN0aW9uID0gKE1hdGgucm91bmQobWluLzE1KS80KTtcblxuXHRcdCRsb2cuaW5mbyhob3VycyArICcgJyArIG1pbiArICcgJyArIGZyYWN0aW9uKTtcblx0XHRyZXR1cm4gKGhvdXJzK2ZyYWN0aW9uKSArICcgaCc7XG5cdH1cblxuXHR2bS5zZXR0aW5nVGVtcFN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0udGVtcFRpbWUuZW5kID0gdm0udGVtcFRpbWUuc3RhcnQ7XG5cdH1cblxuXHR2bS5zZXR0aW5nVGVtcEVuZCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vc2V0IHZhbGlkIGVuZCB3aXRoIHN0YXJ0XG5cdFx0aWYodm0udGVtcFRpbWUuc3RhcnQgPiB2bS50ZW1wVGltZS5lbmQpIHZtLnRlbXBUaW1lLnN0YXJ0ID0gdm0udGVtcFRpbWUuZW5kO1xuXHRcdC8vY2FsYyBkdXJhdGlvblxuXHRcdHZtLnRlbXBUaW1lLmR1cmF0aW9uID0gY2FsY3VsYXRlRHVyYXRpb24odm0udGVtcFRpbWUuc3RhcnQsIHZtLnRlbXBUaW1lLmVuZCk7XG5cdH1cblxuXHR2bS5iYWNrVG9Vc2VyRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9zZW5kIHRoZSB1c2VyIGJhY2sgdG8gdGhlIHBhZ2UgdGhleSBjYW1lIGZyb21cblx0XHRob3N0ZWRFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvdXNlckV2ZW50cycsICRyb3V0ZVBhcmFtcy51aWQpO1xuXHR9XG5cblx0dm0uc2VjdGlvbkJhY2sgPSBmdW5jdGlvbigpIHtcblx0XHQvL21vdmUgYmFja1xuXHRcdHRhcmdldFNlY3Rpb24gPSB2bS5hY3RpdmVTZWN0aW9uIC0gMTtcblx0XHRob3N0ZWRFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvZXZlbnQvaG9zdCcsICRyb3V0ZVBhcmFtcy5ldmVudElkLCAkcm91dGVQYXJhbXMudWlkLCB0YXJnZXRTZWN0aW9uKTtcblx0fVx0XG5cblx0dm0uc2VjdGlvbkZvcndhcmQgPSBmdW5jdGlvbigpIHtcblx0XHQvL21vdmUgZm9yd2FyZFxuXHRcdHRhcmdldFNlY3Rpb24gPSB2bS5hY3RpdmVTZWN0aW9uICsgMTtcblx0XHRob3N0ZWRFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvZXZlbnQvaG9zdCcsICRyb3V0ZVBhcmFtcy5ldmVudElkLCAkcm91dGVQYXJhbXMudWlkLCB0YXJnZXRTZWN0aW9uKTtcblx0fVxuXG5cdC8vdGFrZSBhY3Rpb25cblx0aW5pdCgpO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignTGFuZGluZ1BhZ2VDb250cm9sbGVyJywgTGFuZGluZ1BhZ2VDb250cm9sbGVyKTtcblxuTGFuZGluZ1BhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJyRsb2NhdGlvbicsICckZG9jdW1lbnQnLCAnJHdpbmRvdyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIExhbmRpbmdQYWdlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgJGRvY3VtZW50LCAkd2luZG93KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBmYlVSTCA9ICdodHRwczovL21lZXR1cHBsYW5uZXIuZmlyZWJhc2Vpby5jb20vJztcblx0dmFyIGF1dGhEYXRhID0ge307XG5cdHZhciBjdXJyZW50VXNlckRhdGEgPSB7fTtcblxuXHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0dm0uc2hvd1JlcXVpcm5tZW50cyA9IGZhbHNlO1xuXHR2bS52YWxpZE5ld05hbWUgPSB7J3ZhbGlkJzpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6Jyd9fTtcblx0dm0udmFsaWROZXdFbWFpbCA9IHsndmFsaWQnOmZhbHNlLCAnc3R5bGUnOntjb2xvcjonJ319O1xuXHR2bS5zZWN1cmVQYXNzd29yZCA9IHsnc2VjdXJlJzpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6Jyd9fTtcblx0dm0udW5sb2NrQ3JlYXRlVXNlckJ0biA9IHsndXNhYmxlJzpmYWxzZSwgJ2NsYXNzJzonYnRuIGJ0bi13YXJuaW5nJ307XG5cdHZtLm1lc3NhZ2UgPSAndGVzdGluZyc7XG5cblx0XG5cdHZtLnZhbGlkVXNlckVtYWlsID0geyd2YWxpZCc6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOicnfX07XG5cdHZtLnZhbGlkVXNlclBhc3N3b3JkID0geyd2YWxpZCc6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOicnfX07XG5cdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4gPSB7J3VzYWJsZSc6ZmFsc2UsICdjbGFzcyc6J2J0biBidG4td2FybmluZyd9O1xuXHR2bS5wYXNzd29yZFJlcXVpcm5tZW50cyA9IHtcblx0XHQwOnsnY29uc3RyYWludCc6J0lzIGF0IGxlYXN0IDE2IGNoYXJhY3RlcnMgbG9uZycsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDE6eydjb25zdHJhaW50JzonSXMgbm8gbG9uZ2VyIHRoYW4gMTAwIGNoYXJhY3RlcnMnLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQyOnsnY29uc3RyYWludCc6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSByZXF1aXJlZCBzeW1ib2wgKFxcIVxcQFxcI1xcJFxcJVxcXlxcJlxcKiknLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQzOnsnY29uc3RyYWludCc6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBudW1iZXInLCAnc3R5bGUnOntjb2xvcjoncmVkJ30sICdtZXQnOmZhbHNlfSxcblx0XHQ0OnsnY29uc3RyYWludCc6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBsb3dlcmNhc2UgbGV0dGVyJywgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9LCAnbWV0JzpmYWxzZX0sXG5cdFx0NTp7J2NvbnN0cmFpbnQnOidDb250YWlucyBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlcicsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9LFxuXHRcdDY6eydjb25zdHJhaW50JzpcIkRvZXNuJ3QgaGF2ZSBhbnkgaWxsZWdhbCBjaGFyYWN0ZXJzXCIsICdzdHlsZSc6e2NvbG9yOidyZWQnfSwgJ21ldCc6ZmFsc2V9XG5cdH07XG5cblx0Ly92YXIgdGhlVGVzdEJveCA9IGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnQpLmZpbmQoJyN0ZXN0Qm94Jyk7XG5cblx0Ly90aGVUZXN0Qm94LmNoZWNrVmFsaWRpdHkoKTtcblx0Ly9zZXRDdXN0b21WYWxpZGl0eSgneW91IG5lZWQgc29tZXRoaW5nIGVsc2UnKTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblx0ZnVuY3Rpb24gdXRmOF90b19iNjQoc3RyKSB7XG5cdFx0cmV0dXJuIGJ0b2Eoc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NF90b191dGY4KHN0cikge1xuICAgIFx0cmV0dXJuIGF0b2Ioc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHVuaXhUaW1lVG9EYXRlVGltZSh1bml4VGltZSkge1xuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh1bml4VGltZSkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9XG5cblx0Ly9kZWZpbmUgY29udHJvbGxlciBtZXRob2RzXG5cdHZtLmRpc3BsYXlQYXNzUmVxcyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHZtLm5ld05hbWUgJiYgdm0ubmV3RW1haWwpIHtcblx0XHRcdHZtLnNob3dSZXF1aXJubWVudHMgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS5zaG93UmVxdWlybm1lbnRzID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0dm0uY2hlY2tOZXdOYW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0aWYodm0ubmV3TmFtZSkge1xuXHRcdFx0aWYodm0ubmV3TmFtZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZtLnZhbGlkTmV3TmFtZS52YWxpZCA9IHRydWU7XG5cdFx0XHRcdHZtLnZhbGlkTmV3TmFtZS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLnZhbGlkTmV3TmFtZS52YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHR2bS52YWxpZE5ld05hbWUuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZtLm9wZW5DcmVhdGVVc2VyQnV0dG9uKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld0VtYWlsID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmKHZtLm5ld0VtYWlsKSB7XG5cdFx0XHQvL2NoZWNrIHZhbGlkaXR5XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG5cblx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2bS5uZXdFbWFpbCkpIHtcblx0XHRcdFx0dm0udmFsaWROZXdFbWFpbC52YWxpZCA9IHRydWU7XG5cdFx0XHRcdHZtLnZhbGlkTmV3RW1haWwuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS52YWxpZE5ld0VtYWlsLnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnZhbGlkTmV3RW1haWwuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHRcdFx0fVx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHR2bS5vcGVuQ3JlYXRlVXNlckJ1dHRvbigpO1xuXHR9XG5cblx0dm0uY2hlY2tVc2VyRW1haWwgPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS51c2VyRW1haWwpIHtcblx0XHRcdC8vY2hlY2sgdmFsaWRpdHlcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1wiLCBcIlwiKTtcblxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZtLnVzZXJFbWFpbCkpIHtcblx0XHRcdFx0dm0udmFsaWRVc2VyRW1haWwudmFsaWQgPSB0cnVlO1xuXHRcdFx0XHR2bS52YWxpZFVzZXJFbWFpbC5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZtLnZhbGlkVXNlckVtYWlsLnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnZhbGlkVXNlckVtYWlsLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2bS5vcGVuVXNlckxvZ2luQnRuKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld1Bhc3N3b3JkcyA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vZm9yIGVhY2ggcGFzc3dvcmQgZGVmaW5lIHRoZSBwYXR0ZXJuIHRoYXQgdGhlIHBhc3N3b3JkIG11c3QgbWF0Y2hcblx0XHR2YXIgY29uc3RyYWludHMgPSB7XG5cdCBcdFx0MDogWycnLCAnIHlvdXIgcGFzc3dvcmQgbmVlZHMgdG8gYmUgMTYgY2hhcmFjdGVycyBvciBsb25nZXInXSxcblx0IFx0XHQxOiBbJycsICcgeW91ciBwYXNzd29yZCBuZWVkcyB0byBiZSBsZXNzIHRoYW4gMTAwIGNoYXJhY3RlcnMnXSxcblx0IFx0XHQyOiBbJ1tcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdJywgXCIgbm8gcmVxdWlyZWQgc3ltYm9scyBmb3VuZFwiXSxcblx0IFx0XHQzOiBbJ1swLTldJywgXCIgbm8gbnVtYmVycyBmb3VuZFwiXSxcblx0IFx0XHQ0OiBbJ1thLXpdJywgXCIgbm8gbG93ZXJjYXNlIGxldHRlcnMgZm91bmRcIl0sXG5cdCBcdFx0NTogWydbQS1aXScsIFwiIG5vIHVwcGVyY2FzZSBsZXR0ZXJzIGZvdW5kXCJdLFxuXHQgXHRcdDY6IFsnW15BLXowLTlcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdJywgXCIgaWxsZWdhbCBjaGFyYWN0ZXJzIGZvdW5kXCJdLFxuIFx0XHR9O1xuIFx0XHRcbiBcdFx0Ly9jaGVjayBmb3IgbGVuZ3RoXG4gXHRcdGlmKHZtLm5ld1Bhc3N3b3JkKSB7XG4gXHRcdFx0aWYodm0ubmV3UGFzc3dvcmQubGVuZ3RoID4gMTUpIHsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1swXS5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTsgXG4gXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1swXS5tZXQgPSB0cnVlOyBcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMF0uc3R5bGUgPSB7Y29sb3I6J3JlZCd9OyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzBdLm1ldCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZih2bS5uZXdQYXNzd29yZC5sZW5ndGggPD0gMTAwKSB7IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0uc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307IFxuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0ubWV0ID0gdHJ1ZTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMV0uc3R5bGUgPSB7Y29sb3I6J3JlZCd9OyBcbiBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzFdLm1ldCA9IGZhbHNlO1xuIFx0XHRcdH1cblxuIFx0XHRcdC8vY2hlY2sgY29uc3RyYWludHMgMi01XG4gXHRcdFx0Zm9yKGkgPSAyOyBpIDwgNjsgaSsrKSB7XG5cdCBcdFx0XHQvL2NoZWNrIGZvciByZXF1aXJlZCBzeW1ib2xzLCB1cHBlcmNhc2UsIGxvc2VyY2FzZSwgYW5kIGNoYXJhY3RlcnNcblx0IFx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChjb25zdHJhaW50c1tpXVswXSwgXCJcIik7XHRcblxuXHQgXHRcdFx0Ly90ZXN0IGVhY2ggY29uc3RyYXRpbnRcblx0IFx0XHRcdGlmKGNvbnN0cmFpbnQudGVzdCh2bS5uZXdQYXNzd29yZCkpIHtcblx0IFx0XHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbaV0uc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdCBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzW2ldLm1ldCA9IHRydWU7XG5cdCBcdFx0XHR9IGVsc2Uge1xuXHQgXHRcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1tpXS5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdCBcdFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzW2ldLm1ldCA9IGZhbHNlO1xuXHQgXHRcdFx0fVxuXHQgXHRcdH1cblxuXHQgXHRcdC8vY2hlY2sgaWxsZWdhbCBjaGFyYWN0ZXJzXG5cdCBcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKGNvbnN0cmFpbnRzWzZdWzBdLCBcIlwiKTtcblxuXHQgXHRcdC8vcnVuIHRoZSBjaGVja1xuXHQgXHRcdGlmKCFjb25zdHJhaW50LnRlc3Qodm0ubmV3UGFzc3dvcmQpKSB7XG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5zdHlsZSA9IHtjb2xvcjoncmVkJ307XG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5tZXQgPSBmYWxzZTtcblx0IFx0XHR9IGVsc2Uge1xuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNl0uc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s2XS5tZXQgPSB0cnVlO1xuXHQgXHRcdH1cblxuXHQgXHRcdC8vaWYgYWxsIGNvbnN0cmFpbnMgbWV0LCB0aHJvdyB2YWxpZCBwYXNzIGZsYWdcblx0IFx0XHRpZiggdm0ucGFzc3dvcmRSZXF1aXJubWVudHNbMF0ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1sxXS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzJdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbM10ubWV0ICYmXG5cdCBcdFx0XHR2bS5wYXNzd29yZFJlcXVpcm5tZW50c1s0XS5tZXQgJiZcblx0IFx0XHRcdHZtLnBhc3N3b3JkUmVxdWlybm1lbnRzWzVdLm1ldCAmJlxuXHQgXHRcdFx0dm0ucGFzc3dvcmRSZXF1aXJubWVudHNbNl0ubWV0KSB7XG5cdCBcdFx0XHR2bS5zZWN1cmVQYXNzd29yZC5zZWN1cmUgPSB0cnVlXG5cdCBcdFx0fSBlbHNlIHtcblx0IFx0XHRcdHZtLnNlY3VyZVBhc3N3b3JkLnNlY3VyZSA9IGZhbHNlO1xuXHQgXHRcdH1cblxuXHQgXHRcdGlmKHZtLnNlY3VyZVBhc3N3b3JkLnNlY3VyZSkge1xuXHQgXHRcdFx0dm0uc2VjdXJlUGFzc3dvcmQuc3R5bGUgPSB7Y29sb3I6J2dyZWVuJ307XG5cdCBcdFx0fSBlbHNlIHtcblx0IFx0XHRcdHZtLnNlY3VyZVBhc3N3b3JkLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0IFx0XHR9XG4gXHRcdH1cbiBcdFx0XG4gXHRcdHZtLm9wZW5DcmVhdGVVc2VyQnV0dG9uKCk7XG5cdH1cblxuXHR2bS5jaGVja1VzZXJQYXNzd29yZHMgPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS51c2VyUGFzc3dvcmQpIHtcblx0XHRcdGlmKHZtLnVzZXJQYXNzd29yZC5sZW5ndGggPiAxNSkge1xuXHRcdFx0XHR2bS52YWxpZFVzZXJQYXNzd29yZC5zdHlsZSA9IHtjb2xvcjonZ3JlZW4nfTtcblx0XHRcdFx0dm0udmFsaWRVc2VyUGFzc3dvcmQudmFsaWQgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0udmFsaWRVc2VyUGFzc3dvcmQuc3R5bGUgPSB7Y29sb3I6J3JlZCd9O1xuXHRcdFx0XHR2bS52YWxpZFVzZXJQYXNzd29yZC52YWxpZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdFxuXHRcdHZtLm9wZW5Vc2VyTG9naW5CdG4oKTtcblx0fVxuXG5cdHZtLm9wZW5DcmVhdGVVc2VyQnV0dG9uID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYodm0udmFsaWROZXdOYW1lLnZhbGlkICYmIHZtLnZhbGlkTmV3RW1haWwudmFsaWQgJiYgdm0uc2VjdXJlUGFzc3dvcmQuc2VjdXJlKSB7XG5cdFx0XHR2bS51bmxvY2tDcmVhdGVVc2VyQnRuLmNsYXNzID0gJ2J0biBidG4tc3VjY2Vzcyc7XG5cdFx0XHR2bS51bmxvY2tDcmVhdGVVc2VyQnRuLnVzYWJsZSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4uY2xhc3MgPSAnYnRuIGJ0bi13YXJuaW5nJztcblx0XHRcdHZtLnVubG9ja0NyZWF0ZVVzZXJCdG4udXNhYmxlID0gZmFsc2U7XHRcblx0XHR9XG5cblx0fVxuXG5cdHZtLm9wZW5Vc2VyTG9naW5CdG4gPSBmdW5jdGlvbigpIHtcblx0XHRpZih2bS52YWxpZFVzZXJFbWFpbC52YWxpZCAmJiB2bS52YWxpZFVzZXJQYXNzd29yZC52YWxpZCkge1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi5jbGFzcyA9ICdidG4gYnRuLXN1Y2Nlc3MnO1xuXHRcdFx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0bi51c2FibGUgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLmNsYXNzID0gJ2J0biBidG4td2FybmluZyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSA9IGZhbHNlO1x0XG5cdFx0fVxuXHR9XG5cblx0dm0udXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9zZXQgdmFsdWVzXG5cdFx0dm0ubmV3TmFtZSA9ICRkb2N1bWVudC5maW5kKCcjbmV3TmFtZScpWzBdLnZhbHVlO1xuXHRcdHZtLm5ld0VtYWlsID0gJGRvY3VtZW50LmZpbmQoJyNuZXdFbWFpbCcpWzBdLnZhbHVlO1xuXHRcdHZtLnVzZXJFbWFpbCA9ICRkb2N1bWVudC5maW5kKCcjdXNlckVtYWlsJylbMF0udmFsdWU7XG5cdFx0XG5cdFx0dm0uY2hlY2tOZXdOYW1lKCk7XG5cdFx0dm0uY2hlY2tOZXdFbWFpbCgpO1xuXHRcdHZtLmNoZWNrVXNlckVtYWlsKCk7XG5cdH1cblxuXHRmdW5jdGlvbiByZWRpcmVjdChwYXRoLCB1c2VyRGF0YSkge1xuXHRcdHZhciBmdWxsUGF0aCA9IHBhdGggKyAnLycgKyBjdXJyZW50VXNlckRhdGEudWlkICsgJy8nICsgY3VycmVudFVzZXJEYXRhLnRva2VuO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdH1cblxuXHR2bS5jcmVhdGVOZXdVc2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvZy5pbmZvKCdDcmVhdGluZyBhIG5ldyB1c2VyIGFjY291bnQgbm93IScpO1xuXG5cdFx0aWYodm0udW5sb2NrQ3JlYXRlVXNlckJ0bi51c2FibGUpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblxuXHRcdFx0cmVmLmNyZWF0ZVVzZXIoe1xuXHRcdFx0XHRlbWFpbDp2bS5uZXdFbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6dm0ubmV3UGFzc3dvcmRcblx0XHRcdH0sZnVuY3Rpb24oZXJyb3IsIHVzZXJEYXRhKSB7XG5cdFx0XHRcdGlmKGVycm9yKSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdFcnJvciBjcmVhdGluZyB1c2VyOiAnICsgZXJyb3IpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vbG9nIHJlc3VsdHNcblx0XHRcdFx0XHQkbG9nLmluZm8odXNlckRhdGEpO1xuXG5cdFx0XHRcdFx0Ly9zYXZlIGFsbCB0aGUgZGF0YVxuXHRcdFx0XHRcdGN1cnJlbnRVc2VyRGF0YSA9IHVzZXJEYXRhO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vZ2VuZXJhdGUgdGhlIHVzZXIgcmVjb3JkXG5cdFx0XHRcdFx0dmFyIHVzZXJzUmVmID0gcmVmLmNoaWxkKCdVc2Vycy8nICsgdXNlckRhdGEudWlkKTtcblx0XHRcdFx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0XHRcdFx0Ly93cml0ZSBuZXcgdXNlciB0byB0aGUgZGF0YWJhc2Ugd2l0aCBiaW8gaW5mb1xuXHRcdFx0XHRcdHVzZXJzUmVmLnNldCh7IFxuXHRcdFx0XHRcdFx0J2Jpbyc6IHtcblx0XHRcdFx0XHRcdFx0J25hbWUnOiB2bS5uZXdOYW1lLFxuXHRcdFx0XHRcdFx0XHQnZW1haWwnOiB2bS5uZXdFbWFpbFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdCdldmVudHMnOiB7XG5cdFx0XHRcdFx0XHRcdCdwZW5kaW5nJzoge1xuXHRcdFx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHQnaG9zdGluZyc6IHtcblx0XHRcdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0J2F0dGVuZGluZyc6IHtcblx0XHRcdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0J2NvbXBsZXRlZCc6IHtcblx0XHRcdFx0XHRcdFx0XHQndXBkYXRlZCc6IGRhdGVUaW1lVG9Vbml4VGltZShjdXJyZW50RGF0ZSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdFx0XHQkbG9nLmluZm8oJ0RhdGEgY291bGQgbm90IGJlIHNhdmVkOiAnICsgZXJyb3IpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0JGxvZy5pbmZvKCdEYXRhIHNhdmVkIHN1Y2Nlc3NmdWxseS4nKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHQvL2FkZCB0aGlzIHVzZXIgdG8gdGhlIGxpc3Qgb2YgcmVnaXN0ZXJlZCB1c2Vyc1xuXHRcdFx0XHRcdHJlZi5jaGlsZCgnVWlkcycpLmNoaWxkKHV0ZjhfdG9fYjY0KHZtLm5ld0VtYWlsKSkuc2V0KGN1cnJlbnRVc2VyRGF0YS51aWQsIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRpZihlcnJvcikgJGxvZy5pbmZvKFwiRGF0YSBjb3VsZCBub3QgYmUgc2F2ZWQuIFwiICsgZXJyb3IpO1xuXHRcdFx0XHRcdFx0ZWxzZSAkbG9nLmluZm8oXCJ1aWQgY3JlYXRlZCBzdWNlc3NmdWxseS5cIik7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvL3JlZGlyZWN0IHRvIFVzZXJJbmZvcm1hdGlvblxuXHRcdFx0XHRcdHJlZGlyZWN0KCcvdXNlckluZm9ybWF0aW9uJywgY3VycmVudFVzZXJEYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR9XG5cdH1cblxuXHR2bS5sb2dpblJlZ2lzdGVyZWRVc2VyID0gZnVuY3Rpb24oKSB7XG5cblx0XHRpZih2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVcblx0XHRcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXG5cdFx0XHQvL2F1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0cmVmLmF1dGhXaXRoUGFzc3dvcmQoe1xuXHRcdFx0XHRlbWFpbDogdm0udXNlckVtYWlsLFxuXHRcdFx0XHRwYXNzd29yZDogdm0udXNlclBhc3N3b3JkXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvciwgYXV0aERhdGEpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0Vycm9yIExvZ2dpbmcgSW46ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdMb2dnZWQgSW4gc3VjY2Vzc2Z1bGx5OiAnICsgYXV0aERhdGEudWlkKTtcblx0XHRcdFx0XHQkbG9nLmluZm8oYXV0aERhdGEpO1xuXHRcdFx0XHRcdC8vc2F2ZSBhbGwgdGhlIGRhdGFcblx0XHRcdFx0XHRjdXJyZW50VXNlckRhdGEgPSBhdXRoRGF0YTtcblxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGJpb1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGV2ZW50c1xuXG5cdFx0XHRcdFx0Ly9yZWRpcmVjdFxuXHRcdFx0XHRcdHJlZGlyZWN0KCcvdXNlckluZm9ybWF0aW9uJywgY3VycmVudFVzZXJEYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR2bS5hbGVydE1lID0gZnVuY3Rpb24oKSB7XG5cdFx0YWxlcnQoJ3RoaXMgaXMgd29ya2luZyEgYW4gYWxlcnQhJyk7XG5cdH1cblxuXHR2bS5vblJlc2l6ZUZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlucHV0VGV4dCA9IGFuZ3VsYXIuZWxlbWVudCgnLmlucHV0VGV4dCcpO1xuXHRcdGlmKCR3aW5kb3cub3V0ZXJXaWR0aCA+ICR3aW5kb3cub3V0ZXJIZWlnaHQpIHtcblx0XHRcdGlucHV0VGV4dC5jc3MoJ2ZvbnQtc2l6ZScsICcyZW0nKTtcblx0XHRcdCRsb2cuaW5mbygnbWFraW5nIGJpZ2dlcicpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbnB1dFRleHQuY3NzKCdmb250LXNpemUnLCAnMS4yZW0nKTtcblx0XHR9XG5cdH1cblxuXHQvL2V2ZW50IGxpc3RlbmVyc1xuXHRpZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluICRkb2N1bWVudCkge1xuXHQgICAgJGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcblx0ICAgIFx0JGxvZy5pbmZvKCdhZGRpbmcgRmFzdENsaWNrJyk7XG5cdCAgICAgICAgRmFzdENsaWNrLmF0dGFjaCgkZG9jdW1lbnQuYm9keSk7XG5cdCAgICB9LCBmYWxzZSk7XG5cdH1cblxuXHRhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZCgncmVzaXplJywgZnVuY3Rpb24oKSB7XG5cdFx0dm0ub25SZXNpemVGdW5jdGlvbigpO1xuXHRcdC8vJHNjb3BlLiRhcHBseSgpO1xuXHR9KTtcblxuXHRhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRpZigkd2luZG93Lm91dGVyV2lkdGggPCA2MDApIHtcblx0XHRcdHZtLm9uUmVzaXplRnVuY3Rpb24oKTtcblx0XHRcdC8vJHNjb3BlLiRhcHBseSgpO1xuXHRcdH1cblx0fSlcblxuXG5cdCB2bS5tYXN0ZXIgPSB7fTtcblxuXHQgIHZtLnVwZGF0ZSA9IGZ1bmN0aW9uKHVzZXIpIHtcblx0ICAgIHZtLm1hc3RlciA9IGFuZ3VsYXIuY29weSh1c2VyKTtcblx0ICB9O1xuXG5cdCAgdm0ucmVzZXQgPSBmdW5jdGlvbihmb3JtKSB7XG5cdCAgICBpZiAoZm9ybSkge1xuXHQgICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xuXHQgICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcblx0ICAgIH1cblx0ICAgIHZtLnVzZXIgPSBhbmd1bGFyLmNvcHkodm0ubWFzdGVyKTtcblx0ICB9O1xuXG5cdCAgdm0ucmVzZXQoKTtcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgTWFpbkNvbnRyb2xsZXIpO1xuXG5NYWluQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRsb2NhdGlvbicsICckZG9jdW1lbnQnLCAnJHdpbmRvdyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIE1haW5Db250cm9sbGVyKCRsb2csICRsb2NhdGlvbiwgJGRvY3VtZW50LCAkd2luZG93KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBmYlVSTCA9ICdodHRwczovL21lZXR1cHBsYW5uZXIuZmlyZWJhc2Vpby5jb20vJztcblx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShmYlVSTCk7IFxuXG5cdGZ1bmN0aW9uIHJlc2l6ZUJHSW1hZ2UoKSB7XG5cdFx0dmFyIGJvZHkgPSBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50KTtcblx0XHQkZG9jdW1lbnQuY3NzKCdoaWdodCcsICR3aW5kb3cub3V0ZXJIZWlnaHQpXG5cdH1cblxuXHR2bS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcblx0XHRhbGVydCgnbG9nZ2luZyB5b3Ugb3V0IScpO1xuXHRcdHJlZi51bmF1dGgoKTtcblx0XHQkbG9jYXRpb24ucGF0aCgnLycpO1xuXHR9O1xuXG5cdGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdC8vRmFzdENsaWNrLmF0dGFjaCgkZG9jdW1lbnQuYm9keSk7XG5cdFx0cmVzaXplQkdJbWFnZSgpO1xuXHR9KVxufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignTmV3VXNlclNpZ25VcENvbnRyb2xsZXInLCBOZXdVc2VyU2lnblVwQ29udHJvbGxlcik7XG5cbk5ld1VzZXJTaWduVXBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ3ZhbGlkYXRpb24nLCAnYmFja2VuZFNlcnZpY2VzJywgJ3RyYWZmaWNWYWxldCcsICd1c2VyRGF0YSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIE5ld1VzZXJTaWduVXBDb250cm9sbGVyKCRzY29wZSwgJGxvZywgdmFsaWRhdGlvbiwgYmFja2VuZFNlcnZpY2VzLCB0cmFmZmljVmFsZXQsIHVzZXJEYXRhKSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9kZWZpbmUgdm0gaW5wdXQgdmFyaWFibGVzXG5cdHZtLmlucHV0cyA9IHtcblx0XHRuZXdOYW1lOiAnJyxcblx0XHRuZXdFbWFpbDogJycsXG5cdFx0bmV3UGFzc3dvcmQ6ICcnLFxuXHRcdHJlcXVpcmVkRmllbGRzRGVmaW5lZDogZmFsc2Vcblx0fVxuXHR2bS5lcnJvcnMgPSB7XG5cdFx0bmFtZTogJycsXG5cdFx0ZW1haWw6ICcnLFxuXHRcdHBhc3N3b3JkOiBmYWxzZSxcblx0XHRwYXNzZXNBbGxUZXN0czogZmFsc2Vcblx0fVxuXHR2bS5wYXNzUmVxcyA9IHtcblx0XHQwOiB7IGlkOicnLCByZXE6J0lzIGF0IGxlYXN0IDE2IGNoYXJhY3RlcnMgbG9uZycsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9fSxcblx0XHQxOiB7IGlkOicnLCByZXE6J0lzIG5vIGxvbmdlciB0aGFuIDEwMCBjaGFyYWN0ZXJzJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQyOiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBsb3dlcmNhc2UgbGV0dGVyJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQzOiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyJywgZnVsZmlsbGVkOmZhbHNlLCAnc3R5bGUnOntjb2xvcjoncmVkJ30gfSxcblx0XHQ0OiB7IGlkOicnLCByZXE6J0NvbnRhaW5zIGF0IGxlYXN0IG9uZSBudW1iZXInLCBmdWxmaWxsZWQ6ZmFsc2UsICdzdHlsZSc6e2NvbG9yOidyZWQnfSB9LFxuXHRcdDU6IHsgaWQ6JycsIHJlcTonQ29udGFpbnMgYXQgbGVhc3Qgb25lIHJlcXVpcmVkIHN5bWJvbCAoXFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqKScsIGZ1bGZpbGxlZDpmYWxzZSwgJ3N0eWxlJzp7Y29sb3I6J3JlZCd9IH0sXG5cdFx0NjogeyBpZDonJywgcmVxOlwiRG9lc24ndCBoYXZlIGFueSBpbGxlZ2FsIGNoYXJhY3RlcnNcIiwgZnVsZmlsbGVkOnRydWUsICdzdHlsZSc6e2NvbG9yOidyZWQnfSB9XG5cdH1cblx0dm0uc2hvd1JlcXNCb3ggPSBmYWxzZTtcblxuXHQvL2RlZmluZSByZXF1aXJlZCBmaWVsZCBjb25zdHJhaW50c1xuXHR2YXIgc2lnbnVwVmFsaWRhdGlvbiA9IHZhbGlkYXRpb247XG5cblx0Ly9kZWZpbmUgY29udHJvbGxlciBtZXRob2RzXG5cdGZ1bmN0aW9uIHZlcmlmeVJlcXVpcm5tZW50cygpIHtcblx0XHRpZih2bS5lcnJvcnMubmFtZSA9PSAnJyAmJiB2bS5lcnJvcnMuZW1haWwgPT0gJycgJiYgIXZtLmVycm9ycy5wYXNzd29yZCkgdm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzID0gdHJ1ZTtcblx0XHRlbHNlIHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyA9IGZhbHNlO1xuXG5cdFx0aWYoIGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5uZXdOYW1lKSAmJiB2bS5pbnB1dHMubmV3TmFtZSAhPT0gJycgJiZcblx0XHRcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5uZXdFbWFpbCkgJiYgdm0uaW5wdXRzLm5ld0VtYWlsICE9PSAnJyAmJlxuXHRcdFx0YW5ndWxhci5pc0RlZmluZWQodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSAmJiB2bS5pbnB1dHMubmV3UGFzc3dvcmQgIT09ICcnKSBcblx0XHRcdFx0dm0uaW5wdXRzLnJlcXVpcmVkRmllbGRzRGVmaW5lZCA9IHRydWU7XG5cdFx0ZWxzZSB2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkID0gZmFsc2U7XG5cdH1cblxuXHQvL2RlZmluZSB2bSBhY2Nlc3NpYmxlIG1ldGhvZHNcblx0dm0uY2hlY2tOZXdOYW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzTmFtZSA9IHNpZ251cFZhbGlkYXRpb24ucmVxdWlyZWQodm0uaW5wdXRzLm5ld05hbWUpO1xuXHRcdHZhciBsb25nRW5vdWdoID0gc2lnbnVwVmFsaWRhdGlvbi5taW5OYW1lTGVuZ3RoKHZtLmlucHV0cy5uZXdOYW1lKVxuXHRcdFxuXHRcdC8vbG9nIGVycm9yc1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGhhc05hbWUpKSBlcnJvcnMucHVzaChoYXNOYW1lKTtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChsb25nRW5vdWdoKSkgZXJyb3JzLnB1c2gobG9uZ0Vub3VnaCk7XG5cblx0XHQvL3VwZGF0ZSB0aGUgZXJyb3JzIG1vZGVsXG5cdFx0aWYoZXJyb3JzLmxlbmd0aCA+IDApIHZtLmVycm9ycy5uYW1lID0gZXJyb3JzLmpvaW4oJywgJyk7XG5cdFx0ZWxzZSB2bS5lcnJvcnMubmFtZSA9ICcnO1xuXG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld0VtYWlsID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzRW1haWwgPSBzaWdudXBWYWxpZGF0aW9uLnJlcXVpcmVkKHZtLmlucHV0cy5uZXdFbWFpbCk7XG5cdFx0dmFyIGlzQW5FbWFpbCA9IHNpZ251cFZhbGlkYXRpb24uZW1haWwodm0uaW5wdXRzLm5ld0VtYWlsKTtcblx0XHRcblx0XHQvL2xvZyBlcnJvcnNcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChoYXNFbWFpbCkpIGVycm9ycy5wdXNoKGhhc0VtYWlsKTtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChpc0FuRW1haWwpKSBlcnJvcnMucHVzaChpc0FuRW1haWwpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGVycm9ycyBtb2RlbFxuXHRcdGlmKGVycm9ycy5sZW5ndGggPiAwKSB2bS5lcnJvcnMuZW1haWwgPSBlcnJvcnMuam9pbignLCAnKTtcblx0XHRlbHNlIHZtLmVycm9ycy5lbWFpbCA9ICcnO1xuXG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5jaGVja05ld1Bhc3N3b3JkID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9mbGlwIG9uIHJlcXMgYm94XG5cdFx0dm0uc2hvd1JlcXNCb3ggPSB0cnVlO1xuXG5cdFx0Ly9sb2NhbCB2YXJpYWJsZVxuXHRcdHZhciBlcnJvcnMgPSBbXTtcblx0XHR2YXIgaGFzUGFzc3dvcmQgPSBzaWdudXBWYWxpZGF0aW9uLnJlcXVpcmVkKHZtLmlucHV0cy5uZXdQYXNzd29yZCk7XG5cdFx0dmFyIHNwZWNpZmljUmVxcyA9IFtcblx0XHRcdHNpZ251cFZhbGlkYXRpb24ubWluUGFzc0xlbmd0aCh2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5tYXhQYXNzTGVuZ3RoKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmF0TGVhc3RPbmVMb3dlcmNhc2Uodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24uYXRMZWFzdE9uZVVwcGVyY2FzZSh2bS5pbnB1dHMubmV3UGFzc3dvcmQpLFxuXHRcdFx0c2lnbnVwVmFsaWRhdGlvbi5hdExlYXN0T25lTnVtYmVyKHZtLmlucHV0cy5uZXdQYXNzd29yZCksXG5cdFx0XHRzaWdudXBWYWxpZGF0aW9uLmF0TGVhc3RPbmVTeW1ib2wodm0uaW5wdXRzLm5ld1Bhc3N3b3JkKSxcblx0XHRcdHNpZ251cFZhbGlkYXRpb24uaWxsZWdhbENoYXJhY3Rlcih2bS5pbnB1dHMubmV3UGFzc3dvcmQpXG5cdFx0XTtcblxuXHRcdC8vbG9nIGVycm9yc1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGhhc1Bhc3N3b3JkKSkgZXJyb3JzLnB1c2goaGFzUGFzc3dvcmQpO1xuXG5cdFx0Ly91cGRhdGUgdGhlIGVycm9ycyBtb2RlbFxuXHRcdGlmKGVycm9ycy5sZW5ndGggPiAwKSB2bS5lcnJvcnMucGFzc3dvcmQgPSBlcnJvcnMuam9pbignLCAnKTtcblx0XHRlbHNlIHZtLmVycm9ycy5lbWFpbCA9ICcnO1xuXG5cdFx0Ly91cGRhdGUgcmVxcyBtb2RlbFxuXHRcdHZhciBhbnlFcnJvcnMgPSBmYWxzZTtcblx0XHRmb3IoaT0wOyBpPDc7IGkrKykge1xuXHRcdFx0aWYoc3BlY2lmaWNSZXFzW2ldKSB7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLmZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLnN0eWxlID0ge2NvbG9yOidncmVlbid9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dm0ucGFzc1JlcXNbaV0uZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdHZtLnBhc3NSZXFzW2ldLnN0eWxlID0ge2NvbG9yOidyZWQnfTtcblx0XHRcdFx0YW55RXJyb3JzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2bS5lcnJvcnMucGFzc3dvcmQgPSBhbnlFcnJvcnM7XG5cdFx0dmVyaWZ5UmVxdWlybm1lbnRzKCk7XG5cdH1cblxuXHR2bS5leGl0UGFzc3dvcmQgPSBmdW5jdGlvbigpIHtcblx0XHR2bS5jaGVja05ld1Bhc3N3b3JkKCk7XG5cdFx0dm0uc2hvd1JlcXNCb3ggPSBmYWxzZTtcblx0fVxuXG5cdHZtLmNyZWF0ZU5ld1VzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBuZXdVc2VyU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXG5cdFx0Ly9jb25maXJtIGFsbCBmaWVsZHMgYXJlIHZhbGlkXG5cdFx0aWYodm0uZXJyb3JzLnBhc3Nlc0FsbFRlc3RzICYmIHZtLmlucHV0cy5yZXF1aXJlZEZpZWxkc0RlZmluZWQpIHtcblx0XHRcdFxuXHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGNyZWF0ZU5ld1VzZXIgPSBiYWNrZW5kU2VydmljZXM7XG5cdFx0XHR2YXIgbmV3VXNlckRhdGEgPSB1c2VyRGF0YTtcblx0XHRcdHZhciB0aGlzVUlEO1xuXG5cdFx0XHQvL2NyZWF0ZSB0aGUgbmV3IHVzZXIgaW4gdGhlIGRhdGFiYXNlXG5cdFx0XHRjcmVhdGVOZXdVc2VyLmNyZWF0ZU5ld1VzZXIodm0uaW5wdXRzLm5ld0VtYWlsLCB2bS5pbnB1dHMubmV3UGFzc3dvcmQpXG5cdFx0XHQudGhlbihmdW5jdGlvbihkYlVzZXJEYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL21haW50YWluIGxvY2FsIHZhbHVlcyB0byBzcGVlZCB1cCB1c2VyIGV4cGVyaWVuY2Vcblx0XHRcdFx0bmV3VXNlckRhdGEubG9hZFByaW1hcmllcyh2bS5pbnB1dHMubmV3RW1haWwsIHZtLmlucHV0cy5uZXdOYW1lLCBkYlVzZXJEYXRhLnVpZCk7XG5cblx0XHRcdFx0Ly9jcmVhdGUgYSB1c2VyIHByb2ZpbGUgaW4gdGhlIGRhdGFiYXNlXG5cdFx0XHRcdGNyZWF0ZU5ld1VzZXIuYWRkTmV3VXNlclRvRGF0YWJhc2UoZGJVc2VyRGF0YS51aWQsIHZtLmlucHV0cy5uZXdOYW1lLCB2bS5pbnB1dHMubmV3RW1haWwpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblxuXHRcdFx0XHRcdCRsb2cuaW5mbyhtZXNzYWdlKTtcblxuXHRcdFx0XHRcdC8vYWRkIHRoaXMgdXNlciB0byB0aGUgbGlzdCBvZiByZWdpc3RlcmVkIHVzZXJzXG5cdFx0XHRcdFx0Y3JlYXRlTmV3VXNlci5hZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3QoZGJVc2VyRGF0YS51aWQsIHZtLmlucHV0cy5uZXdFbWFpbClcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbihtZXNzYWdlKSB7XG5cblx0XHRcdFx0XHRcdC8vcmVkaXJlY3QgdXNpbmcgdGhlIHVpZFxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXh0IHBhZ2UgXG5cdFx0XHRcdFx0XHRuZXdVc2VyU2hlcnBhLnJlZGlyZWN0VG8oJy91c2VySW5mb3JtYXRpb24nLCBkYlVzZXJEYXRhLnVpZCk7XG5cdFx0XHRcdFx0XHQgXG5cdFx0XHRcdFx0XHQkbG9nLmluZm8obWVzc2FnZSk7IFxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24obWVzc2FnZSkgeyAkbG9nLmluZm8obWVzc2FnZSk7IH0pXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXHRcdFx0XG5cdFx0fVxuXG5cdH1cblx0XG5cdC8vcnVuIHRpbWUgYWN0aW9uc1xuXG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1JlZ1VzZXJMb2dpbkNvbnRyb2xsZXInLCBSZWdVc2VyTG9naW5Db250cm9sbGVyKTtcblxuUmVnVXNlckxvZ2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRkb2N1bWVudCcsICdiYWNrZW5kU2VydmljZXMnLCAndHJhZmZpY1ZhbGV0JywgJ3VzZXJEYXRhJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gUmVnVXNlckxvZ2luQ29udHJvbGxlcigkbG9nLCAkZG9jdW1lbnQsIGJhY2tlbmRTZXJ2aWNlcywgdHJhZmZpY1ZhbGV0LCB1c2VyRGF0YSkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vZGVmaW5lIHZtIGlucHV0IHZhcmlhYmxlc1xuXHR2bS5pbnB1dHMgPSB7XG5cdFx0ZW1haWw6ICcnLFxuXHRcdHBhc3N3b3JkOiAnJyxcblx0XHRyZXF1aXJlZEZpZWxkc0RlZmluZWQ6IGZhbHNlXG5cdH1cblx0dm0uZXJyb3JzID0ge1xuXHRcdG1lc3NhZ2U6ICcnLFxuXHRcdHBhc3Nlc0FsbFRlc3RzOiB0cnVlXG5cdH1cblx0dm0udW5jbG9ja1VzZXJMb2dpbkJ0biA9IHtcblx0XHQndXNhYmxlJzpmYWxzZSwgXG5cdFx0J2NsYXNzJzonYnRuIGJ0bi13YXJuaW5nJyxcblx0XHRtZXNzYWdlOiAnTmVlZCBFbWFpbCAmIFBhc3MnXG5cdH1cblxuXHQvL21ldGhvZHNcblx0ZnVuY3Rpb24gb3BlblVzZXJMb2dpbkJ0bigpIHtcblx0XHQvL2NoZWNrIHRoYXQgdGhlcmUgaXMgYW4gZW1haWwgYW5kIHRoZXJlIGlzIGEgcGFzc3dvcmRcblx0XHRpZihcdGFuZ3VsYXIuaXNEZWZpbmVkKHZtLmlucHV0cy5lbWFpbCkgJiYgdm0uaW5wdXRzLmVtYWlsICE9PSAnJyAmJlxuXHRcdFx0YW5ndWxhci5pc0RlZmluZWQodm0uaW5wdXRzLnBhc3N3b3JkKSAmJiB2bS5pbnB1dHMucGFzc3dvcmQgIT09ICcnKSBcblx0XHR7XG5cdFx0XHR2bS5pbnB1dHMucmVxdWlyZWRGaWVsZHNEZWZpbmVkID0gdHJ1ZTtcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4uY2xhc3MgPSAnYnRuIGJ0bi1zdWNjZXNzJztcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4ubWVzc2FnZSA9ICdMb2dpbic7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZtLmlucHV0cy5yZXF1aXJlZEZpZWxkc0RlZmluZWQgPSBmYWxzZTtcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4uY2xhc3MgPSAnYnRuIGJ0bi13YXJuaW5nJztcblx0XHRcdHZtLnVuY2xvY2tVc2VyTG9naW5CdG4ubWVzc2FnZSA9ICdOZWVkIEVtYWlsICYgUGFzcyc7XG5cdFx0XHR2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSA9IGZhbHNlO1xuXHRcdH1cblxuXHR9XG5cblx0Ly92aWV3IG1vZGVsIG1ldGhvZHNcblx0dm0udXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9zZXQgdmFsdWVzXG5cdFx0dm0uaW5wdXRzLmVtYWlsID0gJGRvY3VtZW50LmZpbmQoJyN1c2VyRW1haWwnKVswXS52YWx1ZTtcblx0XHR2bS5pbnB1dHMucGFzc3dvcmQgPSAkZG9jdW1lbnQuZmluZCgnI3VzZXJQYXNzd29yZCcpWzBdLnZhbHVlO1xuXHRcdFxuXHRcdG9wZW5Vc2VyTG9naW5CdG4oKTtcblx0fVxuXG5cdHZtLmxvZ2luUmVnaXN0ZXJlZFVzZXIgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHJlZ2lzdGVyZWRVc2VyU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXG5cdFx0Ly9jb25maXJtIGFsbCBmaWVsZHMgYXJlIHZhbGlkXG5cdFx0aWYodHJ1ZSkge1xuXHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGRhdGFiYXNlID0gYmFja2VuZFNlcnZpY2VzO1xuXHRcdFx0dmFyIHJlZ2lzdGVyZWRVc2VyRGF0YSA9IHVzZXJEYXRhO1xuXG5cdFx0XHQvL3ZlcmlmeSB1c2VycyBjcmVkZW50aWFsc1xuXHRcdFx0ZGF0YWJhc2UuTG9naW5SZWdpc3RlcmVkVXNlcih2bS5pbnB1dHMuZW1haWwsIHZtLmlucHV0cy5wYXNzd29yZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXJDcmVkZW50aWFscykge1xuXHRcdFx0XHQvL2lmIG5vIHRyb3VibGUgbG9nZ2luZyBpbiB1cGRhdGUgZXJyb3Igb2JqZWN0XG5cdFx0XHRcdHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyA9IHRydWU7XG5cblx0XHRcdFx0Ly9hZGQgcHJpbWFyeSBpbmZvcm1hdGlvbiB0byBsb2NhbCBtb2RlbFxuXHRcdFx0XHRyZWdpc3RlcmVkVXNlckRhdGEuc2V0UHJpbWFyaWVzTG9jYWxseSh2bS5pbnB1dHMuZW1haWwsIHZtLmlucHV0cy5uYW1lLCB1c2VyQ3JlZGVudGlhbHMudWlkKTtcblxuXHRcdFx0fSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkbG9nLmluZm8oXCJ1aWQgaXMgXCIgKyByZWdpc3RlcmVkVXNlckRhdGEuZ2V0VUlETG9jYWxseSgpKTtcblxuXHRcdFx0XHRkYXRhYmFzZS5nZXRVc2VyQmlvKHJlZ2lzdGVyZWRVc2VyRGF0YS5nZXRVSURMb2NhbGx5KCkpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHVzZXJCaW8pIHtcblx0XHRcdFx0XHQvL3VwZGF0ZSB1c2VyRGF0YSBtb2RlbCB3aXRoIHVzZXJCaW9cblx0XHRcdFx0XHRyZWdpc3RlcmVkVXNlckRhdGEudXBkYXRlQmlvTG9jYWxseSh1c2VyQmlvKTtcblxuXHRcdFx0XHRcdC8vbG9hZCB1c2VyIGV2ZW50c1xuXHRcdFx0XHRcdGRhdGFiYXNlLmdldFVzZXJFdmVudHMocmVnaXN0ZXJlZFVzZXJEYXRhLmdldFVJRExvY2FsbHkoKSlcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbihhbGxFdmVudHNGb3JUaGlzVXNlcikge1xuXHRcdFx0XHRcdFx0Ly91cGRhdGUgdXNlckRhdGEgbW9kZWwgd2l0aCB1c2VyRXZlbnRzXG5cdFx0XHRcdFx0XHRyZWdpc3RlcmVkVXNlckRhdGEudXBkYXRlQWxsVXNlckV2ZW50c0xvY2FsbHkoYWxsRXZlbnRzRm9yVGhpc1VzZXIpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKG1lc3NhZ2UpIHsgJGxvZy5pbmZvKG1lc3NhZ2UpOyB9KVxuXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaChmdW5jdGlvbihtZXNzYWdlKSB7ICRsb2cuaW5mbyhtZXNzYWdlKTsgfSlcblxuXHRcdFx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXh0IHBhZ2UgXG5cdFx0XHRcdHJlZ2lzdGVyZWRVc2VyU2hlcnBhLnJlZGlyZWN0VG8oJy91c2VySW5mb3JtYXRpb24nLCByZWdpc3RlcmVkVXNlckRhdGEuZ2V0VUlETG9jYWxseSgpKTtcblxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihtZXNzYWdlKSB7IFxuXHRcdFx0XHQvL2lmIHRoZXJlIHdhcyBhbiBlcnJvciBsb2dnaW5nIGluLCBsZXQgdGhlIHVzZXIga25vd1xuXHRcdFx0XHR2bS5lcnJvcnMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdFx0XHRcdHZtLmVycm9ycy5wYXNzZXNBbGxUZXN0cyA9IGZhbHNlO1xuXHRcdFx0fSlcblxuXHRcdFx0Ly91c2UgdWlkIHRvIGNvbGxlY3QgdXNlciBiaW9cblx0XHRcdFxuXHRcdH1cblxuXHR9XG5cblx0dm0uY2xpY2tlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB1c2VyQXV0aGVudGljYXRpb24gPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHR1c2VyQXV0aGVudGljYXRpb24ubG9nVXNlck91dCgpO1xuXHR9XG5cblx0Ly9ydW4gY29tbWFuZHNcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ3RvcE1lbnVDb250cm9sbGVyJywgdG9wTWVudUNvbnRyb2xsZXIpO1xuXG50b3BNZW51Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICckbG9jYXRpb24nLCAnJGRvY3VtZW50JywgJyR3aW5kb3cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0b3BNZW51Q29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgJGRvY3VtZW50LCAkd2luZG93KSB7XG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBmYlVSTCA9ICdodHRwczovL21lZXR1cHBsYW5uZXIuZmlyZWJhc2Vpby5jb20vJztcblx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0dm0ubG9nZ2VkSW4gPSBmYWxzZVxuXG5cdC8vc3R5bGVzIHZhcmlhYmxlc1xuXHRcblx0Ly9ldmVudCBsaXN0ZW5lcnNcblx0aWYgKCdhZGRFdmVudExpc3RlbmVyJyBpbiAkZG9jdW1lbnQpIHtcblx0ICAgICRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2cuaW5mbygnYWRkaW5nIEZhc3RDbGljaycpO1xuXHQgICAgICAgIEZhc3RDbGljay5hdHRhY2goJGRvY3VtZW50LmJvZHkpO1xuXHQgICAgfSwgZmFsc2UpO1xuXHR9XG5cblx0YW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuXHRcdHZtLm9uUmVzaXplRnVuY3Rpb24oKTtcblx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdH0pO1xuXG5cdGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdGlmKCR3aW5kb3cub3V0ZXJXaWR0aCA8IDYwMCkge1xuXHRcdFx0dm0ub25SZXNpemVGdW5jdGlvbigpO1xuXHRcdFx0JHNjb3BlLiRhcHBseSgpO1xuXHRcdH1cblx0fSlcblx0Ly9keW5hbWljYWxseSBzZXQgaW5wdXQgd2lkdGhcblxuXG5cdC8vIENyZWF0ZSBhIGNhbGxiYWNrIHdoaWNoIGxvZ3MgdGhlIGN1cnJlbnQgYXV0aCBzdGF0ZVxuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdHZtLm9uUmVzaXplRnVuY3Rpb24oKTtcblx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdH1cblxuXHRmdW5jdGlvbiBhdXRoRGF0YUNhbGxiYWNrKGF1dGhEYXRhKSB7XG5cdCAgaWYgKGF1dGhEYXRhKSB7XG5cdCAgICAkbG9nLmluZm8oXCJVc2VyIFwiICsgYXV0aERhdGEudWlkICsgXCIgaXMgbG9nZ2VkIGluIHdpdGggXCIgKyBhdXRoRGF0YS5wcm92aWRlcik7XG5cdCAgICB2bS5sb2dnZWRJbiA9IHRydWU7XG5cdCAgfSBlbHNlIHtcblx0ICAgICRsb2cuaW5mbyhcIlVzZXIgaXMgbG9nZ2VkIG91dFwiKTtcblx0ICAgIHZtLmxvZ2dlZEluID0gZmFsc2U7XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVkaXJlY3QocGF0aCwgdXNlckRhdGEpIHtcblx0XHR2YXIgZnVsbFBhdGggPSBwYXRoICsgJy8nICsgdXNlckRhdGEudWlkICsgJy8nICsgdXNlckRhdGEudG9rZW47XG5cdFx0Ly9yZWRpcmVjdFxuXHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86ICcgKyBmdWxsUGF0aCk7XG5cdFx0JGxvY2F0aW9uLnBhdGgoZnVsbFBhdGgpO1xuXHRcdC8vJHNjb3BlLiRhcHBseSgpO1xuXHR9XG5cblx0Ly92bSBhY2Nlc3NpYmxlIG1ldGhvZHNcblx0dm0ubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvZy5pbmZvKCdsb2dnaW5nIG91dCEnKTtcblx0XHR2bS5sb2dnZWRJbiA9IGZhbHNlO1xuXHRcdHJlZi51bmF1dGgoKTtcblx0XHRyZWRpcmVjdCgnLycsIHt1aWQ6JycsIHRva2VuOicnfSk7XG5cdH1cblxuXHR2bS5uYXZCYXJMb2dpblJlZ2lzdGVyZWRVc2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0JGxvZy5pbmZvKCdsYXVuY2hpbmcgbG9naW4nKTtcblx0XHRpZih0cnVlKSB7XG5cdFx0Ly9pZih2bS51bmNsb2NrVXNlckxvZ2luQnRuLnVzYWJsZSkge1xuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVcblx0XHRcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXG5cdFx0XHQvL2F1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0cmVmLmF1dGhXaXRoUGFzc3dvcmQoe1xuXHRcdFx0XHRlbWFpbDogdm0ubmF2YmFyVXNlckVtYWlsLFxuXHRcdFx0XHRwYXNzd29yZDogdm0ubmF2YmFyVXNlclBhc3Ncblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yLCBhdXRoRGF0YSkge1xuXHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnRXJyb3IgTG9nZ2luZyBJbjogJyArIGVycm9yKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ0xvZ2dlZCBJbiBzdWNjZXNzZnVsbHk6ICcgKyBhdXRoRGF0YS51aWQpO1xuXHRcdFx0XHRcdCRsb2cuaW5mbyhhdXRoRGF0YSk7XG5cdFx0XHRcdFx0Ly9zYXZlIGFsbCB0aGUgZGF0YVxuXG5cdFx0XHRcdFx0Ly9sb2FkIHVzZXIgYmlvXG5cdFx0XHRcdFx0Ly9sb2FkIHVzZXIgZXZlbnRzXG5cblx0XHRcdFx0XHQvL3JlZGlyZWN0XG5cdFx0XHRcdFx0cmVkaXJlY3QoJy91c2VySW5mb3JtYXRpb24nLCBhdXRoRGF0YSk7XG5cdFx0XHRcdFx0JHNjb3BlLiRhcHBseSgpO1xuXG5cdFx0XHRcdFx0Ly9jbGljayBjbG9zZWQgdGhlIG5hdmJhclxuXHRcdFx0XHRcdGFuZ3VsYXIuZWxlbWVudCgnLm5hdmJhci10b2dnbGUnKS5jbGljaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXG5cblx0XHR9XG5cblx0fVxuXG5cdHZtLm9uUmVzaXplRnVuY3Rpb24gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmF2YmFySW5wdXRzID0gYW5ndWxhci5lbGVtZW50KCcubmF2YmFySW5wdXRzJyk7XG5cdFx0bmF2YmFySW5wdXRzLmNzcygnd2lkdGgnLCAoJHdpbmRvdy5vdXRlcldpZHRoIC0gMjYpICsgJ3B4Jyk7XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY2FsbGJhY2sgdG8gYmUgZmlyZWQgZXZlcnkgdGltZSBhdXRoIHN0YXRlIGNoYW5nZXNcblx0cmVmLm9uQXV0aChhdXRoRGF0YUNhbGxiYWNrKTtcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1VzZXJFdmVudHNDb250cm9sbGVyJywgVXNlckV2ZW50c0NvbnRyb2xsZXIpO1xuXG5Vc2VyRXZlbnRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICd1c2VyRGF0YScsICd0cmFmZmljVmFsZXQnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBVc2VyRXZlbnRzQ29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsIHVzZXJEYXRhLCB0cmFmZmljVmFsZXQpIHtcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGN1cnJlbnRVc2VyID0gdXNlckRhdGE7XG5cblx0Ly9sb2NhbCB2aWV3IHZhcmlhYmxlc1xuXHR2bS5zaG93RGVjbGluZSA9IGZhbHNlO1x0Ly93aGF0IGlzIHRoaXMgYmVpbmcgdXNlZCBmb3I/XG5cdHZtLnVzZXJCaW8gPSB7fVxuXHR2bS5ldmVudHMgPSB7fTtcblx0dm0uc2VjdGlvbkF2YWlsYWJsZSA9IHtcblx0XHRwZW5kaW5nOiBmYWxzZSxcblx0XHRhdHRlbmRpbmc6IGZhbHNlLFxuXHRcdGhvc3Rpbmc6IGZhbHNlLFxuXHRcdGNvbXBsZXRlZDogZmFsc2Vcblx0fTtcblx0dm0uZXJyb3JzID0ge307XG5cblx0Ly9kZWNsYXJlIGxvY2FsIG1ldGhvZHNcblx0ZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIG5vT2ZIb3N0ZUV2ZW50cygpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVcblx0XHR2YXIgY291bnRlciA9IDA7XG5cblx0XHRmb3IoZXZlbnQgaW4gdm0uZXZlbnRzLmhvc3RpbmcpIGNvdW50ZXIrKztcblxuXHRcdHJldHVybiBjb3VudGVyO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVFdmVudElEKCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0dmFyIGV2ZW50SUQgPSAoZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGUpICogMTApICsgKG5vT2ZIb3N0ZUV2ZW50cygpKTtcblxuXHRcdHJldHVybiBldmVudElEO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tGb3JFdmVudHMoKSB7XG5cdFx0XG5cdFx0Ly9sb29wIHRocm91Z2ggYWxsIHRoZSBldmVudCBjYXRlZ29yaWVzXG5cdFx0T2JqZWN0LmtleXModm0uZXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGNhdGVnb3J5KSB7XG5cdFx0XHRcblx0XHRcdC8vaW5zaWRlIGVhY2ggY2F0ZWdvcnkgY291bnQgdGhlIG51bWJlciBvZiBldmVudCBvYmplY3RzLi4uTk9UIHVwZGF0ZWQgcGxhY2Vob2xkZXIgdGhvdWdoXG5cdFx0XHRPYmplY3Qua2V5cyh2bS5ldmVudHNbY2F0ZWdvcnldKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50SUQpIHtcblx0XHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHRcdHZhciBjb3VudGVyID0gMDtcblx0XHRcdFx0Ly9jb3VudCBldmVudHMgd2l0aCBpZCdzIC8gTk9UICd1cGRhdGVkJyBwbGFjZWhvbGRlcnNcblx0XHRcdFx0aWYoYW5ndWxhci5pc09iamVjdCh2bS5ldmVudHNbY2F0ZWdvcnldW2V2ZW50SURdKSkgY291bnRlcisrO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9pZiBhdCBsZWFzdCBvbmUgZXZlbnQgaWQgKG9iamVjdCkgd2FzIGNvdW50ZWQsIHRoZW4gc2hvdyB0aGUgc2VjdGlvblxuXHRcdFx0XHRpZihjb3VudGVyID4gMCkgdm0uc2VjdGlvbkF2YWlsYWJsZVtjYXRlZ29yeV0gPSB0cnVlO1xuXHRcdFx0XHRlbHNlIHZtLnNlY3Rpb25BdmFpbGFibGVbY2F0ZWdvcnldID0gZmFsc2U7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuXHRcdC8vbWFrZSBzdXJlIHRoZSB1aWQgaXMgc2V0XG5cdFx0Y3VycmVudFVzZXIuc2V0VUlETG9jYWxseSgkcm91dGVQYXJhbXMudWlkKTtcblxuXHRcdC8vbG9hZCB0aGUgdXNlciBiaW9cblx0XHRjdXJyZW50VXNlci5sb2FkQmlvKCRyb3V0ZVBhcmFtcy51aWQpXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmV0cmlldmVkQmlvKSB7XG5cdFx0XHR2bS51c2VyQmlvID0gcmV0cmlldmVkQmlvO1xuXHRcdH0pXG5cdFx0LmNhdGNoKClcblxuXHRcdC8vbG9hZCB1c2VyIGV2ZW50cyBwcm9ncmVzc2l2bGV5XG5cdFx0Ly9maXN0IHdoYXRldmVyIGlzIGluIHRoZSBtb2RlbCBhbHJlYWR5XG5cdFx0dm0uZXZlbnRzID0gY3VycmVudFVzZXIuZ2V0QWxsVXNlckV2ZW50c0xvY2FsbHkoKTtcblxuXHRcdC8vdGhlbiBjYWxsIHRvIHRoZSBkYiBhbmQgZ2V0IHRoZSBtb3N0IHVwIHRvIGRhdGUgaW5mb1xuXHRcdGN1cnJlbnRVc2VyLmdldFJlbW90ZUV2ZW50c0ZvckxvY2FsKClcblx0XHQudGhlbihmdW5jdGlvbihvYnRhaW5lZFVzZXJFdmVudHMpIHtcblxuXHRcdFx0Ly91cGRhdGUgdGhlIHZpZXcgbW9kZWwgd2l0aCB0aGUgdXBkYXRlZCBEQiByZXN1bHRzXG5cdFx0XHR2bS5ldmVudHMgPSBjdXJyZW50VXNlci5nZXRBbGxVc2VyRXZlbnRzTG9jYWxseSgpO1xuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQvL25vdyB0aGF0IGV2ZW50cyBhcmUgbG9hZGVkLCByZWZsZWN0IGl0IGluIHRoZSB2aWV3IG1vZGVsXG5cdFx0XHRjaGVja0ZvckV2ZW50cygpO1xuXHRcdH0pXG5cblx0fVxuXG5cdC8vZGVjbGFyZSB2aWV3IG1ldGhvZHNcblx0dm0uY3JlYXRlTmV3RXZlbnQgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZXZlbnRJRCA9IGdlbmVyYXRlRXZlbnRJRCgpO1xuXHRcdHZhciBuZXdFdmVudFNoZXJwYSA9IHRyYWZmaWNWYWxldDtcblxuXHRcdC8vYWRkIHRoZSBldmVudCB0byB0aGUgbW9kYWwgKGxvY2FsbHkgdGhlbiBvbiB0aGUgZGIpXG5cdFx0Y3VycmVudFVzZXIuY3JlYXRlTmV3RXZlbnQoZXZlbnRJRClcblx0XHQudGhlbihmdW5jdGlvbihhZmZpcm1hdGl2ZVJlc3BvbnNlKSB7XG5cdFx0XHQvL3JlcG9ydCB0aGUgc3VjY2Vzc1xuXHRcdFx0JGxvZy5pbmZvKGFmZmlybWF0aXZlUmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQvL2lmIHRoZXJlIHdhcyBhbiB1cGRhdGVkIGZpZWxkLCByZW1vdmUgaXQgbm93XG5cdFx0XHRjdXJyZW50VXNlci5jbGVhbkRCRXZlbnRzQ2F0ZWdvcnkoJ2hvc3RpbmcnKTtcblxuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yUmVzcG9uc2UpIHtcblx0XHRcdC8vcmVwb3J0IHRoZSBlcnJvclxuXHRcdFx0JGxvZy5pbmZvKGVycm9yUmVzcG9uc2UpO1xuXHRcdH0pXG5cdFx0XG5cblx0XHQvL3JlZGlyZWN0IHRvIHRoZSBuZXcgZXZlbnQgcGFnZVx0XHRcblx0XHRuZXdFdmVudFNoZXJwYS5yZWRpcmVjdFRvKCcvZXZlbnQnLCBldmVudElELCBjdXJyZW50VXNlci5nZXRVSURMb2NhbGx5KCksIGN1cnJlbnRVc2VyLmdldFVJRExvY2FsbHkoKSk7XG5cdH1cblxuXHQvL2V4ZWN1dGUgc2NyaXB0c1xuXHRpbml0aWFsaXplKCk7XG5cbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuY29udHJvbGxlcignVXNlckluZm9ybWF0aW9uQ29udHJvbGxlcicsIFVzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXIpO1xuXG5Vc2VySW5mb3JtYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJGRvY3VtZW50JywgJyRyb3V0ZVBhcmFtcycsJ3VzZXJEYXRhJywgJ3RyYWZmaWNWYWxldCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIFVzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXIoJGxvZywgJGRvY3VtZW50LCAkcm91dGVQYXJhbXMsIHVzZXJEYXRhLCB0cmFmZmljVmFsZXQpIHtcblx0dmFyIHZtID0gdGhpcztcblx0XG5cdC8vbG9jYWwgdmFyaWFibGVzXG5cdHZhciBjdXJyZW50VXNlciA9IHVzZXJEYXRhO1xuXG5cdC8vdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0dm0udXNlciA9IHt9O1xuXHR2bS50ZW1wQmlydGhkYXk7XG5cdHZtLnZpZXcgPSB7XG5cdFx0ZGF0YVRvU2F2ZTogZmFsc2UsXG5cdFx0aXNEYXRhOiBmYWxzZSxcblx0XHRidG5Nc3NnOiAnTW92ZSBPbi4uLicsXG5cdFx0cHJvY2VlZEJ0bjogJ2J0biBidG4tcHJpbWFyeSdcblx0fTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblx0ZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KHVuaXhUaW1lKSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9O1xuXG5cdC8vdmlldyBhY2Nlc3NpYmxlIG1ldGhvZHNcblx0dm0uY2hlY2tWYWx1ZXMgPSBmdW5jdGlvbigpIHtcblx0XHQvL3Rocm93IHRoZSBpc0RhdGEgZmxhZyBpZiBzb21ldGhpbmcgaXMgdXBkYXRlZFxuXHRcdHZtLnZpZXcuaXNEYXRhID0gdHJ1ZTtcblxuXHRcdGlmKCAhKGFuZ3VsYXIuaXNVbmRlZmluZWQodm0udXNlci5jb21wYW55KSB8fCB2bS51c2VyLmNvbXBhbnkgPT09ICcnKSB8fCBcblx0XHRcdCEoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS51c2VyLnRpdGxlKSB8fCB2bS51c2VyLnRpdGxlID09PSAnJykgfHwgXG5cdFx0XHQhKGFuZ3VsYXIuaXNVbmRlZmluZWQodm0udXNlci5kb2IpIHx8IHZtLnVzZXIuZG9iID09PSAnJykpIFxuXHRcdHtcblx0XHRcdHZtLnZpZXcuZGF0YVRvU2F2ZSA9IHRydWU7XG5cdFx0XHR2bS52aWV3LnByb2NlZWRCdG4gPSAnYnRuIGJ0bi1zdWNjZXNzJztcblx0XHRcdHZtLnZpZXcuYnRuTXNzZyA9ICdTYXZlICYgQ29udGludWUnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bS52aWV3LmRhdGFUb1NhdmUgPSBmYWxzZTtcblx0XHRcdHZtLnZpZXcucHJvY2VlZEJ0biA9ICdidG4gYnRuLXByaW1hcnknO1xuXHRcdFx0dm0udmlldy5idG5Nc3NnID0gJ01vdmUgT24uLi4nO1x0XG5cdFx0fVxuXG5cdH1cblxuXHR2bS51cGRhdGVET0IgPSBmdW5jdGlvbigpIHtcblx0XHR2bS51c2VyLmRvYiA9IGRhdGVUaW1lVG9Vbml4VGltZSh2bS50ZW1wQmlydGhkYXkpO1xuXHRcdHZtLmNoZWNrVmFsdWVzKCk7XG5cdH1cblxuXHR2bS5zYXZlQW5kTW92ZU9uID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgdXNlckluZm9TaGVycGEgPSB0cmFmZmljVmFsZXQ7XG5cdFx0dmFyIGN1cnJlbnRVaWQgPSBjdXJyZW50VXNlci5nZXRVSURMb2NhbGx5KCk7XG5cblx0XHQvL2NvbnZlcnQgRE9CIHRvIHVuaXhUaW1lIGFuZCBzYXZlXG5cdFx0aWYodm0udGVtcEJpcnRoZGF5ICE9PSAwKSB2bS51cGRhdGVET0IoKTtcblx0XHRcblx0XHQvL2lmIHRoZXJlIGlzbid0IGN1cnJlbnRseSBhIGRvYiwgZ3JhYiBmcm9tIHRoZSByb3V0ZSBwYXJhbXNcblx0XHRpZihjdXJyZW50VWlkID09ICcnIHx8IGFuZ3VsYXIuaXNVbmRlZmluZWQoY3VycmVudFVpZCkpIHtcblx0XHRcdGN1cnJlbnRVc2VyLnNldFVJRExvY2FsbHkoJHJvdXRlUGFyYW1zLnVpZCk7XG5cdFx0fVxuXG5cdFx0Ly9pZiB0aGVyZSBpcyBuZXcgZGF0YSwgc2F2ZSBpdFxuXHRcdGlmKHZtLnZpZXcuaXNEYXRhKSB7XG5cdFx0XHQkbG9nLmluZm8oJ3NhdmluZyB0aGUgbmV3IGRhdGEnKTtcblx0XHRcdGN1cnJlbnRVc2VyLnVwZGF0ZUJpb0xvY2FsbHkodm0udXNlcik7XG5cdFx0fVxuXHRcdFxuXHRcdC8vbW92ZSBvblxuXHRcdHVzZXJJbmZvU2hlcnBhLnJlZGlyZWN0VG8oJy91c2VyRXZlbnRzJywgdm0udXNlci51aWQpXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuXHRcdC8vbG9hZCBGYXN0Q2xpY2tcblx0XHQvL0Zhc3RDbGljay5hdHRhY2goJGRvY3VtZW50LmJvZHkpO1xuXHRcdFxuXHRcdC8vbG9hZCB1c2VyRGF0YSBsb2NhbGx5IG9yIGZyb20gZGJcblx0XHRjdXJyZW50VXNlci5sb2FkQmlvKCRyb3V0ZVBhcmFtcy51aWQpXG5cdFx0LnRoZW4oZnVuY3Rpb24ob2J0YWluZWRVc2VyRGF0YSkge1xuXHRcdFx0Ly9hc3NpZ24gdXNlciB2YWx1ZXNcblx0XHRcdHZtLnVzZXIgPSBvYnRhaW5lZFVzZXJEYXRhO1xuXG5cdFx0XHQvL2J1aWxkIHRlbXBCaXJ0aGRheVxuXHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQob2J0YWluZWRVc2VyRGF0YS5kb2IpICYmIG9idGFpbmVkVXNlckRhdGEuZG9iICE9PSAnJykge1xuXHRcdFx0XHR2bS50ZW1wQmlydGhkYXkgPSB1bml4VGltZVRvRGF0ZVRpbWUob2J0YWluZWRVc2VyRGF0YS5kb2IpXG5cdFx0XHR9XG5cblx0XHR9KTtcblx0XG5cdH1cblxuXHQvL3J1biBwcm9jZXNzZXNcblx0aW5pdGlhbGl6ZSgpOyAvL3dpdGggaW50ZXJuZXQgdXNlIHRoZSBldmVudCBsaXN0ZW5lciBpbnN0ZWFkXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5mYWN0b3J5KCdhdXRoU2VydmljZScsIGF1dGhTZXJ2aWNlKTtcblxuYXV0aFNlcnZpY2UuJGluamVjdCA9IFsnJGxvZycsICdiYWNrZW5kU2VydmljZXMnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhdXRoU2VydmljZSgkbG9nLCBiYWNrZW5kU2VydmljZXMpIHtcblxuXHR2YXIgYWxsQXV0aFNlcnZpY2VzID0ge1xuXHRcdGlzTG9nZ2VkSW46IGlzTG9nZ2VkSW5cblx0fTtcblxuXHRmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuXHRcdC8vY2hlY2sgdGhlIHVzZXIgYXV0aGVudGljYWlvbiBzdGF0ZVxuXHRcdHZhciBkYkF1dGhlbnRpY2F0aW9uID0gYmFja2VuZFNlcnZpY2VzO1xuXHRcdFxuXHRcdGRiQXV0aGVudGljYXRpb24uY2hlY2tMb2dpblN0YXR1cygpXG5cdFx0LnRoZW4oZnVuY3Rpb24oc3RhdHVzKSB7XG5cdFx0XHRyZXR1cm4gc3RhdHVzO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uKHN0YXR1cykge1xuXHRcdFx0cmV0dXJuIHN0YXR1cztcblx0XHR9KVxuXHR9XG5cdFxuXHRyZXR1cm4gYWxsQXV0aFNlcnZpY2VzO1xuXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5mYWN0b3J5KCdiYWNrZW5kU2VydmljZXMnLCBiYWNrZW5kU2VydmljZXMpO1xuXG5iYWNrZW5kU2VydmljZXMuJGluamVjdCA9IFsnJGxvZycsICckcScsICckd2luZG93J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYmFja2VuZFNlcnZpY2VzKCRsb2csICRxLCAkd2luZG93KSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIGZiVVJMID0gJ2h0dHBzOi8vbWVldHVwcGxhbm5lci5maXJlYmFzZWlvLmNvbS8nO1xuXHR2YXIgYWxsQmFja2VuZFNlcnZpY2VzID0ge1xuXHRcdHV0ZjhfdG9fYjY0OiB1dGY4X3RvX2I2NCwgXHRcdFx0XHRcdFx0Ly9sb2NhbCBmdW5jdGlvbnMgdG8gY29udmVydCBkYXRlc1xuXHRcdGI2NF90b191dGY4OiBiNjRfdG9fdXRmOCxcblx0XHR1bml4VGltZVRvRGF0ZVRpbWU6IHVuaXhUaW1lVG9EYXRlVGltZSxcblx0XHRkYXRlVGltZVRvVW5peFRpbWU6IGRhdGVUaW1lVG9Vbml4VGltZSxcblxuXHRcdExvZ2luUmVnaXN0ZXJlZFVzZXI6IExvZ2luUmVnaXN0ZXJlZFVzZXIsXHRcdC8vYXV0aGVudGljYWlvblxuXHRcdGNoZWNrTG9naW5TdGF0dXM6IGNoZWNrTG9naW5TdGF0dXMsXG5cdFx0bG9nVXNlck91dDogbG9nVXNlck91dCxcblxuXHRcdGRvd25sb2FkVXNlckRhdGE6IGRvd25sb2FkVXNlckRhdGEsXHRcdFx0XHQvL2dldHRlciBtZXRob2RzXG5cdFx0Z2V0VXNlckJpbzogZ2V0VXNlckJpbyxcblx0XHRnZXRVc2VyRXZlbnRzOiBnZXRVc2VyRXZlbnRzLFxuXHRcdGdldEFIb3N0ZWRFdmVudDogZ2V0QUhvc3RlZEV2ZW50LFxuXHRcdGdldEFuSW52aXRlZEV2ZW50OiBnZXRBbkludml0ZWRFdmVudCxcblx0XHRmaW5kR3Vlc3RVSUQ6IGZpbmRHdWVzdFVJRCxcblx0XHRnZXRHdWVzdExpc3RGb3JFdmVudDogZ2V0R3Vlc3RMaXN0Rm9yRXZlbnQsXG5cblx0XHRjcmVhdGVOZXdVc2VyOiBjcmVhdGVOZXdVc2VyLFx0XHRcdFx0XHQvL3NldHRlciBNZXRob2RzXG5cdFx0YWRkTmV3VXNlclRvRGF0YWJhc2U6IGFkZE5ld1VzZXJUb0RhdGFiYXNlLFxuXHRcdGFkZE5ld1VzZXJUb1JlZ1VzZXJzTGlzdDogYWRkTmV3VXNlclRvUmVnVXNlcnNMaXN0LFxuXHRcdHVwbG9hZFVzZXJEYXRhOiB1cGxvYWRVc2VyRGF0YSxcblx0XHR1cGxvYWRVc2VyQmlvOiB1cGxvYWRVc2VyQmlvLFxuXHRcdGNyZWF0ZUhvc3RlZEV2ZW50OiBjcmVhdGVIb3N0ZWRFdmVudCxcblx0XHRhZGRHdWVzdFRvSG9zdEd1ZXN0TGlzdG9uREI6IGFkZEd1ZXN0VG9Ib3N0R3Vlc3RMaXN0b25EQixcblx0XHQvL2FkZFBlbmRpbmdFdmVudEZvclVzZXI6IGFkZFBlbmRpbmdFdmVudEZvclVzZXIsXG5cdFx0Ly9hZGRQZW5kaW5nRXZlbnRGb3JHdWVzdDogYWRkUGVuZGluZ0V2ZW50Rm9yR3Vlc3QsXG5cblx0XHRkZWxldGVVcGRhdGVGaWVsZDogZGVsZXRlVXBkYXRlRmllbGQsXHRcdFx0Ly9kZWxldGUgbWV0aG9kc1xuXG5cdFx0dGhlcmVXYXNBblVwZGF0ZUZpZWxkOiB0aGVyZVdhc0FuVXBkYXRlRmllbGRcdC8vbW9kZWwgbWFpbnRhaW5hbmNlXG5cdH07XG5cblx0ZnVuY3Rpb24gdXRmOF90b19iNjQoc3RyKSB7XG5cdFx0cmV0dXJuIGJ0b2Eoc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NF90b191dGY4KHN0cikge1xuICAgIFx0cmV0dXJuIGF0b2Ioc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHVuaXhUaW1lVG9EYXRlVGltZSh1bml4VGltZSkge1xuXHRcdHJldHVybiBuZXcgRGF0ZShwYXJzZUludCh1bml4VGltZSkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGF0ZVRpbWVUb1VuaXhUaW1lKGRhdGVUaW1lKSB7XG5cdFx0cmV0dXJuIERhdGUucGFyc2UoZGF0ZVRpbWUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlTmV3VXNlcihlbWFpbCwgcGFzc3dvcmQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGZpcmVCYXNlQWNjb3VudHMgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdFxuXHRcdC8vcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFxuXHRcdFx0ZmlyZUJhc2VBY2NvdW50cy5jcmVhdGVVc2VyKHtcblx0XHRcdFx0XG5cdFx0XHRcdGVtYWlsOiBlbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0XHRcblx0XHRcdH0sZnVuY3Rpb24oZXJyb3IsIHVzZXJEYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KCdFcnJvciBjcmVhdGluZyB1c2VyOiAnICsgZXJyb3IpO1xuXG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSh1c2VyRGF0YSk7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkTmV3VXNlclRvRGF0YWJhc2UodWlkLCBuYW1lLCBlbWFpbCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgYXBwVXNlcnMgPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKTtcblx0XHR2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0Ly9yZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHRhcHBVc2Vycy5zZXQoeyBcblx0XHRcdFx0J2Jpbyc6IHtcblx0XHRcdFx0XHQndWlkJzogdWlkLFxuXHRcdFx0XHRcdCduYW1lJzogbmFtZSxcblx0XHRcdFx0XHQnZW1haWwnOiBlbWFpbFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQnZXZlbnRzJzoge1xuXHRcdFx0XHRcdCdwZW5kaW5nJzoge1xuXHRcdFx0XHRcdFx0J3VwZGF0ZWQnOiBkYXRlVGltZVRvVW5peFRpbWUoY3VycmVudERhdGUpXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQnaG9zdGluZyc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2F0dGVuZGluZyc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J2NvbXBsZXRlZCc6IHtcblx0XHRcdFx0XHRcdCd1cGRhdGVkJzogZGF0ZVRpbWVUb1VuaXhUaW1lKGN1cnJlbnREYXRlKVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnRGF0YSBjb3VsZCBub3QgYmUgc2F2ZWQ6ICcgKyBlcnJvcik7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbHNlIHJlc29sdmUoJ0RhdGEgc2F2ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhZGROZXdVc2VyVG9SZWdVc2Vyc0xpc3QodWlkLCBlbWFpbCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgYjY0RW1haWwgPSB1dGY4X3RvX2I2NChlbWFpbCk7XG5cdFx0dmFyIFJlZ2lzdGVyZWRVc2Vyc0xpc3QgPSBhcHAuY2hpbGQoJ1VpZHMnKS5jaGlsZChiNjRFbWFpbCk7XG5cblx0XHQvL3JldHVybiBhIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdFJlZ2lzdGVyZWRVc2Vyc0xpc3Quc2V0KHVpZCwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdChcIkRhdGEgY291bGQgbm90IGJlIHNhdmVkLiBcIiArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKFwidWlkIGNyZWF0ZWQgc3VjZXNzZnVsbHkuXCIpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gTG9naW5SZWdpc3RlcmVkVXNlcihlbWFpbCwgcGFzc3dvcmQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0XG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvL2F1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0YXBwLmF1dGhXaXRoUGFzc3dvcmQoe1xuXG5cdFx0XHRcdGVtYWlsOiBlbWFpbCxcblx0XHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yLCBhdXRoRGF0YSkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoJ0Vycm9yIExvZ2dpbmcgSW46ICcgKyBlcnJvcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKCdMb2dnZWQgSW4gc3VjY2Vzc2Z1bGx5OiAnICsgYXV0aERhdGEudWlkKTtcblx0XHRcdFx0XHRyZXNvbHZlKGF1dGhEYXRhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHRcdFxuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tMb2dpblN0YXR1cygpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdGFwcC5vbkF1dGgoZnVuY3Rpb24oYXV0aERhdGEpIHtcblx0XHRcdFx0aWYgKGF1dGhEYXRhKSB7XG5cdFx0XHRcdCAgICAkbG9nLmluZm8oXCJVc2VyIFwiICsgYXV0aERhdGEudWlkICsgXCIgaXMgbG9nZ2VkIGluIHdpdGggXCIgKyBhdXRoRGF0YS5wcm92aWRlcik7XG5cdFx0XHRcdCAgICByZXNvbHZlKHRydWUpO1xuXHRcdFx0XHQgIH0gZWxzZSB7XG5cdFx0XHRcdCAgICAkbG9nLmluZm8oXCJVc2VyIGlzIGxvZ2dlZCBvdXRcIik7XG5cdFx0XHRcdCAgICByZXNvbHZlKGZhbHNlKTtcblx0XHRcdFx0ICB9XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gbG9nVXNlck91dCgpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cblx0XHQkbG9nLmluZm8oJ2xvZ2dpbmcgdXNlciBvdXQnKTtcblx0XHRhcHAudW5hdXRoKCk7XG5cdH1cblxuXHRmdW5jdGlvbiB1cGxvYWRVc2VyRGF0YShhbGxVc2VyRGF0YSkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgdWlkID0gYWxsVXNlckRhdGEudWlkO1xuXHRcdHZhciByZW1vdGVVc2VyID0gYXBwLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdGhlIGFjdHVhbCBjYWxsXG5cdFx0XHRyZW1vdGVVc2VyLnVwZGF0ZShhbGxVc2VyRGF0YSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnVGhlcmUgd2FzIGEgcHJvYmxlbSB1cGRhdGluZyB0aGF0IHJlY29yZDogJyArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdhbGwgdXNlciBkYXRhIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScpO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblx0XHRcblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZFVzZXJCaW8oY3VycmVudFVzZXJCaW8pIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIHVpZCA9IChjdXJyZW50VXNlckJpby51aWQpLnRvU3RyaW5nKCk7XG5cdFx0dmFyIHJlbW90ZVVzZXJCaW8gPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnYmlvJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9jYWxsIHRvIHRoZSBkYlxuXHRcdFx0cmVtb3RlVXNlckJpby51cGRhdGUoY3VycmVudFVzZXJCaW8sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoJ1RoZXJlIHdhcyBhIHByb2JsZW0gdXBkYXRpbmcgdGhhdCByZWNvcmQ6ICcgKyBlcnJvcik7XG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSgnYWxsIHVzZXIgYmlvIGRhdGEgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9KVxuXG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBkb3dubG9hZFVzZXJEYXRhKCkge1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyQmlvKHVpZCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgdXNlckJpbyA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdiaW8nKTtcblxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90aGUgYWN0dWFsIGNhbGxcblx0XHRcdHVzZXJCaW8ub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkge1xuXHRcdFx0XHQvL3doZW4gdGhlIGNhbGwgaXMgc3VjY2Vzc2Z1bCByZXR1cm4gdGhlIGRhdGFcblx0XHRcdFx0cmVzb2x2ZShzbmFwc2hvdC52YWwoKSk7XG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0gXG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlSG9zdGVkRXZlbnQodWlkLCBuZXdFdmVudCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgZXZlbnRJRCA9IG5ld0V2ZW50LmlkO1xuXHRcdHZhciBuZXdIb3N0ZWRFdmVudCA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgnaG9zdGluZycpLmNoaWxkKGV2ZW50SUQpO1xuXG5cdFx0Ly9yZXR1cm4gdGhlIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdC8vY2FsbCB0byBmaXJlYmFzZVxuXHRcdFx0bmV3SG9zdGVkRXZlbnQuc2V0KG5ld0V2ZW50LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3I6ICcgKyBlcnJvcik7XG5cdFx0XHRcdGVsc2UgcmVzb2x2ZSgnTmV3IGV2ZW50IHNhdmVkIHRvIERCIHN1Y2Nlc3NmdWxseScpO1xuXHRcdFx0fSlcblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWRkR3Vlc3RUb0hvc3RHdWVzdExpc3RvbkRCKG5hbWUsIGd1aWVzdElkLCBldmVudElkLCB1aWQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIGd1ZXN0TGlzdCA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgnaG9zdGluZycpLmNoaWxkKGV2ZW50SWQpLmNoaWxkKCdndWVzdExpc3QnKS5jaGlsZChndWllc3RJZCk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9jYWxsIHRvIHRoZSBkYlxuXHRcdFx0Z3Vlc3RMaXN0LnNldCh7XG5cdFx0XHRcdHJzdnBkOiBmYWxzZSxcblx0XHRcdFx0c3RhdHVzOiAncGVuZGluZycsXG5cdFx0XHRcdG5hbWU6IG5hbWVcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvcjogJyArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdOZXcgZXZlbnQgc2F2ZWQgdG8gREIgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9KVxuXG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyRXZlbnRzKHVpZCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgdXNlckV2ZW50cyA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKTtcblx0XHRcblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdGhlIGFjdHVhbCBjYWxsXG5cdFx0XHR1c2VyRXZlbnRzLm9yZGVyQnlLZXkoKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdHZhciB1c2VyUHJvZmlsZSA9IHNuYXBzaG90LnZhbCgpO1xuXG5cdFx0XHRcdC8vd2hlbiB0aGUgY2FsbCBpcyBzdWNjZXNzZnVsIHJldHVybiB0aGUgZGF0YVxuXHRcdFx0XHR2YXIgZXZlbnRzUGFja2FnZSA9IHtcblx0XHRcdFx0XHRob3N0aW5nOiB1c2VyUHJvZmlsZS5ob3N0aW5nLFxuXHRcdFx0XHRcdGF0dGVuZGluZzogdXNlclByb2ZpbGUuYXR0ZW5kaW5nLFxuXHRcdFx0XHRcdHBlbmRpbmc6IHVzZXJQcm9maWxlLnBlbmRpbmcsXG5cdFx0XHRcdFx0Y29tcGxldGVkOiB1c2VyUHJvZmlsZS5jb21wbGV0ZWRcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRyZXNvbHZlKGV2ZW50c1BhY2thZ2UpO1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9IFxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEFIb3N0ZWRFdmVudCh1aWQsIGV2ZW50SWQpIHtcblxuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgaG9zdGVkRXZlbnQgPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ2hvc3RpbmcnKS5jaGlsZChldmVudElkKTtcblxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90aGUgYWN0dWFsIGNhbGxcblx0XHRcdGhvc3RlZEV2ZW50Lm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHtcblx0XHRcdFx0dmFyIHNlbGVjdEV2ZW50ID0gc25hcHNob3QudmFsKCk7XG5cblx0XHRcdFx0cmVzb2x2ZShzZWxlY3RFdmVudCk7XG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KGVycm9yKTtcblx0XHRcdH0pXG5cdFx0fSlcblx0fVxuXG5cdGZ1bmN0aW9uIGZpbmRHdWVzdFVJRChndWVzdGI2NEVtYWlsKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciB1aWRzID0gYXBwLmNoaWxkKCdVaWRzJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vY2FsbCB0byBkYlxuXHRcdFx0dWlkcy5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdC8vZGlzdGlsbCByZXN1bHRzXG5cdFx0XHRcdHZhciBhbGxVc2VycyA9IHNuYXBzaG90LnZhbCgpO1xuXG5cdFx0XHRcdE9iamVjdC5rZXlzKGFsbFVzZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnZnJvbSBsaXN0OiAnICsga2V5ICsgJywgbWF0Y2hpbmcgdG86ICcgKyBndWVzdGI2NEVtYWlsKTtcblx0XHRcdFx0XHQvL2NoZWNrIGVhY2ggdXNlclxuXHRcdFx0XHRcdGlmKGtleSA9PSBndWVzdGI2NEVtYWlsKSB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKGFsbFVzZXJzW2tleV0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZWplY3QoJ05vIHVzZXIgYnkgdGhhdCBlbWFpbCcpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0R3Vlc3RMaXN0Rm9yRXZlbnQoaG9zdElkLCBldmVudElkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBndWVzdExpc3QgPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQoaG9zdElkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoJ2hvc3RpbmcnKS5jaGlsZChldmVudElkKS5jaGlsZCgnZ3Vlc3RMaXN0Jyk7XG5cblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdC8vY2FsbCB0aGUgZGJcblx0XHRcdGd1ZXN0TGlzdC5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdC8vbG9jYWwgdmFyaWFibGVcblx0XHRcdFx0dmFyIHRoZUxpc3QgPSBzbmFwc2hvdC52YWwoKTtcblxuXHRcdFx0XHRyZXNvbHZlKHRoZUxpc3QpO1xuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgdGhlIGd1ZXN0IGxpc3Q6ICcgKyAgZXJyb3IpO1xuXHRcdFx0fSlcblx0XHR9KVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0QW5JbnZpdGVkRXZlbnQoaG9zdElkLCB1aWQsIGV2ZW50SWQpIHt9XG5cblx0Lypcblx0ZnVuY3Rpb24gYWRkUGVuZGluZ0V2ZW50Rm9yVXNlcih1aWQsIGhvc3RJZCwgZXZlbnRJZCwgZXZlbnQpIHtcblx0XHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGFwcCA9IG5ldyBGaXJlYmFzZShmYlVSTCk7XG5cdFx0dmFyIHVzZXJQZW5kaW5nTGlzdCA9IGFwcC5jaGlsZCgnVXNlcnMnKS5jaGlsZCh1aWQpLmNoaWxkKCdldmVudHMnKS5jaGlsZCgncGVuZGluZycpO1xuXG5cdFx0Ly9tYW5nZSB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9jYWxsIHRoZSBkYlxuXHRcdFx0dXNlclBlbmRpbmdMaXN0LnNldCh7XG5cdFx0XHRcdGhvc3RJZDoge1xuXHRcdFx0XHRcdGV2ZW50SWQ6IHtcblx0XHRcdFx0XHRcdGV2ZW50XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KFwiRXJyb3IgYWRkaW5nIHRvIHVzZXIgcGVuZGluZyBsaXN0OiBcIiArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXR1cm4gcmVzb2x2ZSgnQWRkZWQgdG8gdXNlciBwZW5kaW5nIGxpc3Qgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9KVxuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFBlbmRpbmdFdmVudEZvckd1ZXN0KHVpZCwgaG9zdElkLCBldmVudElkLCBldmVudCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgYXBwID0gbmV3IEZpcmViYXNlKGZiVVJMKTtcblx0XHR2YXIgZ3Vlc3RzUGVuZGluZ0xpc3QgPSBhcHAuY2hpbGQoJ1VucmVnaXN0ZXJlZCcpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKCdwZW5kaW5nJyk7XG5cblx0XHQvL21hbmdlIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvL2NhbGwgdGhlIGRiXG5cdFx0XHR1c2VyUGVuZGluZ0xpc3Quc2V0KHtcblx0XHRcdFx0aG9zdElkOiB7XG5cdFx0XHRcdFx0ZXZlbnRJZDoge1xuXHRcdFx0XHRcdFx0ZXZlbnRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdGlmKGVycm9yKSByZWplY3QoXCJFcnJvciBhZGRpbmcgdG8gdXNlciBwZW5kaW5nIGxpc3Q6IFwiICsgZXJyb3IpO1xuXHRcdFx0XHRlbHNlIHJldHVybiByZXNvbHZlKCdBZGRlZCB0byB1c2VyIHBlbmRpbmcgbGlzdCBzdWNjZXNzZnVsbHknKTtcblx0XHRcdH0pXG5cblx0XHR9KTtcblxuXHR9Ki9cblxuXHRmdW5jdGlvbiBkZWxldGVVcGRhdGVGaWVsZChjYXRlZ29yeSwgdWlkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBjYXRSZW1vdmluZ0Zyb20gPSBhcHAuY2hpbGQoJ1VzZXJzJykuY2hpbGQodWlkKS5jaGlsZCgnZXZlbnRzJykuY2hpbGQoY2F0ZWdvcnkpLmNoaWxkKCd1cGRhdGVkJyk7XG5cblx0XHQvL3JldHVybiB0aGUgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdGNhdFJlbW92aW5nRnJvbS5zZXQobnVsbCwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0aWYoZXJyb3IpIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIGRlbGV0aW5nIHVwZGF0ZSBmaWVsZDogJyArIGVycm9yKTtcblx0XHRcdFx0ZWxzZSByZXNvbHZlKCdEZWxldGVkIHVwZGF0ZSBzdWNjZXNzZnVsbHknKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRoZXJlV2FzQW5VcGRhdGVGaWVsZChjYXRlZ29yeSwgdWlkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBhcHAgPSBuZXcgRmlyZWJhc2UoZmJVUkwpO1xuXHRcdHZhciBjYXRUb0NoZWNrID0gYXBwLmNoaWxkKCdVc2VycycpLmNoaWxkKHVpZCkuY2hpbGQoJ2V2ZW50cycpLmNoaWxkKGNhdGVnb3J5KTtcblxuXHRcdC8vcmV0dXJuIHRoZSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9jYWxsIHRoZSBkYlxuXHRcdFx0Y2F0VG9DaGVjay5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7XG5cdFx0XHRcdC8vc2F2ZSB0aGUgcmVzcG9uc2Vcblx0XHRcdFx0dmFyIGN1cnJlbnRDYXRNb2RlbCA9IHNuYXBzaG90LnZhbCgpO1xuXHRcdFx0XHQvL3Nob3cgd2hhdCB3YXMgZm91bmRcblx0XHRcdFx0Ly9sb29rIGZvciB0aGUgdXBkYXRlIGZpZWxkXG5cdFx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGN1cnJlbnRDYXRNb2RlbFsndXBkYXRlZCddKSkgcmVzb2x2ZSh0cnVlKTtcblx0XHRcdFx0ZWxzZSByZWplY3QoZmFsc2UpO1xuXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRpZihlcnJvcikgcmVqZWN0KGVycm9yKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cblxuXHQvL3JldHVybiB0aGUgb2JqZWN0XG5cdHJldHVybiBhbGxCYWNrZW5kU2VydmljZXM7XG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5mYWN0b3J5KCd0cmFmZmljVmFsZXQnLCB0cmFmZmljVmFsZXQpO1xuXG50cmFmZmljVmFsZXQuJGluamVjdCA9IFsnJGxvZycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0cmFmZmljVmFsZXQoJGxvZywgJGxvY2F0aW9uKSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIGFsbFRyYWZmaWNDb250cm9scyA9IHtcblx0XHRyZWRpcmVjdFRvOiByZWRpcmVjdFRvLFxuXHRcdGV2ZW50Um91dGU6IGV2ZW50Um91dGVcblx0fTtcblxuXHRmdW5jdGlvbiByZWRpcmVjdFRvKHBhdGgsIHBhcmFtMSwgcGFyYW0yLCBwYXJhbTMpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChwYXJhbTEpKSB7XG5cdFx0XHRwYXRoID0gcGF0aCArICcvJyArIHBhcmFtMTtcblxuXHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQocGFyYW0yKSkge1xuXHRcdFx0XHQvL2dvIHRvIHBhdGggd2l0aCAyIHBhcmFtc1xuXHRcdFx0XHRwYXRoID0gcGF0aCArICcvJyArIHBhcmFtMjtcblxuXHRcdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChwYXJhbTMpKSB7XG5cdFx0XHRcdFx0cGF0aCA9IHBhdGggKyAnLycgKyBwYXJhbTM7XG5cblx0XHRcdFx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIG5vdyB0byAnICsgcGF0aCk7XG5cdFx0XHRcdFx0JGxvY2F0aW9uLnBhdGgocGF0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIG5vdyB0byAnICsgcGF0aCk7XG5cdFx0XHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuXHRcdFx0fVxuXHRcdFx0Ly9nbyB3aXRoIDEgcGFyYW1cblx0XHRcdCRsb2cuaW5mbygncmVkaXJlY3Rpbmcgbm93IHRvICcgKyBwYXRoKTtcblx0XHRcdCRsb2NhdGlvbi5wYXRoKHBhdGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvL2p1c3QgZ28gdG8gcGF0aFxuXHRcdFx0JGxvZy5pbmZvKCdyZWRpcmVjdGluZyBub3cgdG8gJyArIHBhdGgpO1xuXHRcdFx0JGxvY2F0aW9uLnBhdGgocGF0aCk7XG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBldmVudFJvdXRlKGV2ZW50SWQsIGhvc3RJZCwgdXNlcklkLCBzZWN0aW9uKSB7XG5cdFx0JGxvZy5pbmZvKCdUcmFmZmljIHZhbGV0IGFjY2Vzc2VkJyk7XG5cdFx0JGxvZy5pbmZvKCdldmVudElkOiAnICsgZXZlbnRJZCk7XG5cdFx0JGxvZy5pbmZvKCdob3N0SWQ6ICcgKyBob3N0SWQpO1xuXHRcdCRsb2cuaW5mbygndXNlcklkOiAnICsgdXNlcklkKTtcblxuXHRcdC8vaWYgdGhlcmUgaXNuJ3QgYSBzZWN0aW9uIHNldCB0byBkZWZhdWx0XG5cdFx0aWYoYW5ndWxhci5pc1VuZGVmaW5lZChzZWN0aW9uKSkgc2VjdGlvbiA9IDE7XG5cblx0XHQvL2lmIHRoZSBob3N0SWQgYW5kIHVzZXJJZCBtYXRjaCwgbGF1bmNoIGhvc3Qgdmlld1xuXHRcdGlmKGhvc3RJZCA9PT0gdXNlcklkKSB7IFxuXHRcdFx0dmFyIHBhdGggPSAnL2V2ZW50L2hvc3QvJyArIGV2ZW50SWQgKyAnLycgKyB1c2VySWQgKyAnLycrIHNlY3Rpb247XG5cdFx0XHQkbG9nLmluZm8ocGF0aCk7XG5cdFx0XHQvL3JlZGlyZWN0XG5cdFx0XHQkbG9jYXRpb24ucGF0aChwYXRoKTtcblx0XHR9XG5cdFx0Ly9pZiB0aGUgaG9zdElkIGFuZCB1c2VySWQgRE9OJ1QgbWF0Y2gsIGxhdW5jaCBndWVzdCB2aWV3XG5cdFx0ZWxzZSB7XG5cdFx0XHR2YXIgcGF0aCA9ICcvZXZlbnQvZ3Vlc3QvJyArIGV2ZW50SWQgKyAnLycgKyB1c2VySWQgKyAnLycgKyBob3N0SWQ7XG5cdFx0XHQkbG9nLmluZm8ocGF0aCk7XG5cdFx0XHQvL3JlZGlyZWN0XG5cdFx0XHQkbG9jYXRpb24ucGF0aChwYXRoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYWxsVHJhZmZpY0NvbnRyb2xzO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcbiAgICAuZmFjdG9yeSgndXNlckRhdGEnLCB1c2VyRGF0YSk7XG5cbnVzZXJEYXRhLiRpbmplY3QgPSBbJyRsb2cnLCAnJHEnLCAnYmFja2VuZFNlcnZpY2VzJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdXNlckRhdGEoJGxvZywgJHEsIGJhY2tlbmRTZXJ2aWNlcykge1xuXHQvL2RlY2xhcmUgbG9jYWwgdmFyaWFibGVzXG5cdHZhciBjdXJyZW50VXNlciA9IHtcblx0XHRiaW86IHsgXG5cdFx0XHR1aWQ6ICcnLFxuXHRcdFx0bmFtZTogJycsXG5cdFx0XHRlbWFpbDogJycsXG5cdFx0XHRjb21wYW55OiAnJyxcblx0XHRcdHRpdGxlOiAnJyxcblx0XHRcdGRvYjogMFxuXHRcdH0sXG5cdFx0ZXZlbnRzOiB7XG5cdFx0XHRob3N0aW5nOiB7fSxcblx0XHRcdHBlbmRpbmc6IHt9LFxuXHRcdFx0YXR0ZW5kaW5nOiB7fSxcblx0XHRcdGNvbXBsZXRlZDoge31cblx0XHR9XG5cdH07XG5cblx0Ly9sb2NhbCBmdW5jdGlvbnNcblx0ZnVuY3Rpb24gdXRmOF90b19iNjQoc3RyKSB7XG5cdFx0cmV0dXJuIGJ0b2Eoc3RyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NF90b191dGY4KHN0cikge1xuICAgIFx0cmV0dXJuIGF0b2Ioc3RyKTtcblx0fVxuXG5cdHZhciBhbGxVc2VyRGF0YSA9IHtcblx0XHRiaW9QcmltYXJpZXNBcmVDb21wbGV0ZUxvY2FsbHk6IGJpb1ByaW1hcmllc0FyZUNvbXBsZXRlTG9jYWxseSxcdFx0Ly9tb2RhbCBhbmFseXNpc1xuXHRcdGV2ZW50RXhpc3RzTG9jYWxseTogZXZlbnRFeGlzdHNMb2NhbGx5LFxuXHRcdHRoaXNJc1RoZUhvc3RFbWFpbDogdGhpc0lzVGhlSG9zdEVtYWlsLFxuXHRcdGd1ZXN0SW52aXRlZEFscmVhZHk6IGd1ZXN0SW52aXRlZEFscmVhZHksXG5cblx0XHRjbGVhbkV2ZW50czogY2xlYW5FdmVudHMsXHRcdFx0XHRcdFx0XHQvL21vZGVsIG1haW50YWluYW5jZVxuXG5cdFx0Z2V0VUlETG9jYWxseTogZ2V0VUlETG9jYWxseSxcdFx0XHRcdFx0XHQvL2dldHRlciBNZXRob2RzXG5cdFx0Z2V0TmFtZUxvY2FsbHk6IGdldE5hbWVMb2NhbGx5LFxuXHRcdGdldEVtYWlsTG9jYWxseTogZ2V0RW1haWxMb2NhbGx5LFxuXHRcdGdldENvbXBhbnlMb2NhbGx5OiBnZXRDb21wYW55TG9jYWxseSxcblx0XHRnZXRUaXRsZUxvY2FsbHk6IGdldFRpdGxlTG9jYWxseSxcblx0XHRnZXRET0JMb2NhbGx5OiBnZXRET0JMb2NhbGx5LFxuXHRcdGdldEZ1bGxCaW9Mb2NhbGx5OiBnZXRGdWxsQmlvTG9jYWxseSxcblx0XHRnZXRPbmVVc2VyRXZlbnRMb2NhbGx5OiBnZXRPbmVVc2VyRXZlbnRMb2NhbGx5LFxuXHRcdGdldFVzZXJFdmVudHNMb2NhbGx5OiBnZXRVc2VyRXZlbnRzTG9jYWxseSxcblx0XHRnZXRBbGxVc2VyRXZlbnRzTG9jYWxseTogZ2V0QWxsVXNlckV2ZW50c0xvY2FsbHksXG5cblx0XHRzZXRVSURMb2NhbGx5OiBzZXRVSURMb2NhbGx5LFx0XHRcdFx0XHRcdC8vc2V0dGVyIE1ldGhvZHNcblx0XHRzZXROYW1lTG9jYWxseTogc2V0TmFtZUxvY2FsbHksXG5cdFx0c2V0RW1haWxMb2NhbGx5OiBzZXRFbWFpbExvY2FsbHksXG5cdFx0c2V0Q29tcGFueUxvY2FsbHk6IHNldENvbXBhbnlMb2NhbGx5LFxuXHRcdHNldFRpdGxlTG9jYWxseTogc2V0VGl0bGVMb2NhbGx5LFxuXHRcdHNldERPQkxvY2FsbHk6IHNldERPQkxvY2FsbHksXG5cdFx0c2V0UHJpbWFyaWVzTG9jYWxseTogc2V0UHJpbWFyaWVzTG9jYWxseSxcblx0XHR1cGRhdGVVc2VyRXZlbnRzTG9jYWxseTogdXBkYXRlVXNlckV2ZW50c0xvY2FsbHksXG5cdFx0dXBkYXRlQWxsVXNlckV2ZW50c0xvY2FsbHk6IHVwZGF0ZUFsbFVzZXJFdmVudHNMb2NhbGx5LFxuXHRcdHVwZGF0ZUJpb0xvY2FsbHk6IHVwZGF0ZUJpb0xvY2FsbHksXG5cdFx0YWRkR3Vlc3RUb0hvc3RHdWVzdExpc3Q6IGFkZEd1ZXN0VG9Ib3N0R3Vlc3RMaXN0LFxuXG5cdFx0cmVtb3ZlVXNlckV2ZW50c0xvY2FsbHk6IHJlbW92ZVVzZXJFdmVudHNMb2NhbGx5LCBcdC8vcmVtb3ZlIGRhdGFcblx0XHRcblx0XHRnZXRGdWxsUmVtb3RlREJmb3JMb2NhbDogZ2V0RnVsbFJlbW90ZURCZm9yTG9jYWwsXHQvL2xvY2FsLXJlbW90ZSBpbnRlcmFjaW9uc1xuXHRcdGdldFJlbW90ZUJpb0ZvckxvY2FsOiBnZXRSZW1vdGVCaW9Gb3JMb2NhbCxcdFx0XHRcblx0XHRnZXRSZW1vdGVFdmVudHNGb3JMb2NhbDogZ2V0UmVtb3RlRXZlbnRzRm9yTG9jYWwsXG5cdFx0Z2V0T25lUmVtb3RlRXZlbnRGb3JMb2NhbDogZ2V0T25lUmVtb3RlRXZlbnRGb3JMb2NhbCxcblx0XHRzZXRGdWxsUmVtb3RlREJmcm9tTG9jYWw6IHNldEZ1bGxSZW1vdGVEQmZyb21Mb2NhbCxcblx0XHRzZXRSZW1vdGVCaW9Gcm9tTG9jYWw6IHNldFJlbW90ZUJpb0Zyb21Mb2NhbCxcblx0XHRzZXRSZW1vdGVFdmVudHNGcm9tTG9jYWw6IHNldFJlbW90ZUV2ZW50c0Zyb21Mb2NhbCxcblx0XHRjbGVhbkRCRXZlbnRzQ2F0ZWdvcnk6IGNsZWFuREJFdmVudHNDYXRlZ29yeSxcblx0XHRnZXRVc2VySWRGb3JHdWVzdDogZ2V0VXNlcklkRm9yR3Vlc3QsXG5cdFx0Z2V0RXZlbnRHdWVzdExpc3Q6IGdldEV2ZW50R3Vlc3RMaXN0LFxuXG5cdFx0bG9hZEJpbzogbG9hZEJpbyxcdFx0XHRcdFx0XHRcdFx0XHQvL2V4dGVybmFsIG1ldGhvZHNcblx0XHRsb2FkRXZlbnRzUHJvZ3Jlc3NpdmVseTogbG9hZEV2ZW50c1Byb2dyZXNzaXZlbHksXG5cdFx0bG9hZEFuRXZlbnRQcm9ncmVzc2l2ZWx5OiBsb2FkQW5FdmVudFByb2dyZXNzaXZlbHksXG5cdFx0Y3JlYXRlTmV3RXZlbnQ6IGNyZWF0ZU5ld0V2ZW50LFxuXHRcdHVwZGF0ZVBlbmRpbmdFdmVudHNMaXN0Rm9yR3Vlc3Q6IHVwZGF0ZVBlbmRpbmdFdmVudHNMaXN0Rm9yR3Vlc3Rcblx0fVxuXG5cdC8vYW5hbHlzaXMgbWV0aG9kc1xuXHRmdW5jdGlvbiBiaW9QcmltYXJpZXNBcmVDb21wbGV0ZUxvY2FsbHkoKSB7XG5cdFx0aWYoIGN1cnJlbnRVc2VyLmJpby51aWQgIT09ICcnICYmXG5cdFx0XHRjdXJyZW50VXNlci5iaW8ubmFtZSAhPT0gJycgJiZcblx0XHRcdGN1cnJlbnRVc2VyLmJpby5lbWFpbCAhPT0gJydcblx0XHRcdClcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGVsc2UgcmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXZlbnRFeGlzdHNMb2NhbGx5KHR5cGUsIGV2ZW50SWQpIHtcblx0XHQkbG9nLmluZm8oJ2NoZWNraW5nIGlmIHRoZSBldmVudCBleGl0cycpO1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGN1cnJlbnRVc2VyLmV2ZW50c1t0eXBlXVtldmVudElkXSkpIHJldHVybiB0cnVlO1xuXHRcdGVsc2UgcmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gdGhpc0lzVGhlSG9zdEVtYWlsKGVtYWlsLCBldmVudElkKSB7XG5cdFx0JGxvZy5pbmZvKCdjdXJyZW50IHVzZXIgYmlvIGlzOicpO1xuXHRcdCRsb2cuaW5mbyhjdXJyZW50VXNlci5iaW8pO1xuXHRcdC8vY2hlY2sgaWYgYSBiaW8gaXMgbG9hZGVkXG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoY3VycmVudFVzZXIuYmlvLmVtYWlsKSkge1xuXHRcdFx0JGxvZy5pbmZvKCdlbWFpbCBpcyBkZWZpbmVkJyk7XG5cdFx0XHRpZihjdXJyZW50VXNlci5iaW8uZW1haWwgIT0gJycpIHtcblx0XHRcdFx0Ly9jaGVjayBmb3IgYSBtYXRjaFxuXHRcdFx0XHRpZihlbWFpbCA9PSBjdXJyZW50VXNlci5iaW8uZW1haWwpIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ2VtYWlsIG1hdGNoZXMnKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkbG9nLmluZm8oJ2VtYWlsIGRvZXMgbm90IG1hdGNoJyk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gXG5cdFx0XHRcblx0XHR9IFxuXHRcdFxuXHRcdC8vaWYgdGhhdCBkaWRuJ3Qgd29yayBjaGVjayB0aGUgY3VycmVudCBldmVudFxuXHRcdCRsb2cuaW5mbygnY3VycmVudCBldmVudCBpczonKTtcblx0XHQkbG9nLmluZm8oY3VycmVudFVzZXIuZXZlbnRzLmhvc3RpbmdbZXZlbnRJZF0pO1xuXHRcdGlmKGN1cnJlbnRVc2VyLmV2ZW50cy5ob3N0aW5nW2V2ZW50SWRdLmhvc3QuZW1haWwgPT0gZW1haWwpIHtcblx0XHRcdCRsb2cuaW5mbygnZXZlbnQgaG9zdCBlbWFpbCBtYXRjaGVzJyk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JGxvZy5pbmZvKCdldmVudCBob3N0IGVtYWlsIERPRVNOXFwnVCBub3QgbWF0Y2gnKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdH1cblxuXHRmdW5jdGlvbiBndWVzdEludml0ZWRBbHJlYWR5KGVtYWlsLCBldmVudElkKSB7XG5cdFx0Ly9maXJzdCBjaGVjayBpZiB0aGVyZSBpcyBhIGd1ZXN0IGxpc3Rcblx0XHQkbG9nLmluZm8oY3VycmVudFVzZXIuZXZlbnRzLmhvc3RpbmdbZXZlbnRJZF0pO1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGN1cnJlbnRVc2VyLmV2ZW50cy5ob3N0aW5nW2V2ZW50SWRdLmd1ZXN0TGlzdCkpIHtcblx0XHRcdC8vaWYgdGhlcmUgaXMgYSBsaXN0LCBjaGVjayBmb3IgdGhlIGVtYWlsXG5cdFx0XHQkbG9nLmluZm8oJ3RoZXJlIGlzIGEgZ3Vlc3QgbGlzdCcpO1xuXG5cdFx0XHQvL2NvbnZlcnQgZW1haWwgZm9yIGV2YWx1YXRpb25cblx0XHRcdHJlZkVtYWlsID0gdXRmOF90b19iNjQoZW1haWwpO1xuXG5cdFx0XHQvL3J1biB0aHJvdWdoIGVhY2ggZ3Vlc3QgYW5kIGNvbXBhcmVcblx0XHRcdE9iamVjdC5rZXlzKGN1cnJlbnRVc2VyLmV2ZW50cy5ob3N0aW5nW2V2ZW50SWRdLmd1ZXN0TGlzdCkuZm9yRWFjaChmdW5jdGlvbihiNjRFbWFpbCkge1xuXHRcdFx0XHRpZihyZWZFbWFpbCA9PSBiNjRFbWFpbCkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnYW4gZW1haWwgbWF0Y2ggd2FzIGZvdW5kLCB0aGlzIGd1ZXN0IGhhcyBiZWVuIGludml0ZWQgYWxyZWFkeScpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnbm8gZW1haWwgbWF0Y2ggZm91bmQsIG9rIHRvIGludml0ZSBndWVzdCcpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvL2lmIG5vIGd1ZXN0IGxpc3QgdGhhbiBjYW4ndCBhbHJlYWR5IGJlIG9uIGl0XG5cdFx0XHQkbG9nLmluZm8oJ25vIGd1ZXN0bGlzdCcpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHR9XG5cblx0Ly9tb2RlbCBtYWludGFpbmFuY2Vcblx0ZnVuY3Rpb24gY2xlYW5FdmVudHModHlwZSkge1xuXHRcdC8vaXRlcmF0ZSB0aHJvdWdoIG9iamVjdHMgaW4gb2JqZWN0XG5cdFx0T2JqZWN0LmtleXMoY3VycmVudFVzZXIuZXZlbnRzW3R5cGVdKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0Ly9pZiBhbnkgYXJlIG5vbi1vYmplY3RzLCBkZWxldGUgdGhlbVxuXHRcdFx0aWYoIWFuZ3VsYXIuaXNPYmplY3QoY3VycmVudFVzZXIuZXZlbnRzW3R5cGVdW2tleV0pKSB7XG5cdFx0XHRcdGRlbGV0ZSBjdXJyZW50VXNlci5ldmVudHNbdHlwZV1ba2V5XTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vZ2V0dGVyIG1ldGhvZHNcblx0ZnVuY3Rpb24gZ2V0VUlETG9jYWxseSgpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXIuYmlvLnVpZDtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldE5hbWVMb2NhbGx5KCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5iaW8ubmFtZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEVtYWlsTG9jYWxseSgpIHtcblx0XHRyZXR1cm4gY3VycmVudFVzZXIuYmlvLmVtYWlsO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q29tcGFueUxvY2FsbHkoKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmJpby5jb21wYW55O1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VGl0bGVMb2NhbGx5KCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5iaW8udGl0bGU7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldERPQkxvY2FsbHkoKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmJpby5kb2I7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRGdWxsQmlvTG9jYWxseSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dWlkOiBjdXJyZW50VXNlci5iaW8udWlkLFxuXHRcdFx0bmFtZTogY3VycmVudFVzZXIuYmlvLm5hbWUsXG5cdFx0XHRlbWFpbDogY3VycmVudFVzZXIuYmlvLmVtYWlsLFxuXHRcdFx0Y29tcGFueTogY3VycmVudFVzZXIuYmlvLmNvbXBhbnksXG5cdFx0XHR0aXRsZTogY3VycmVudFVzZXIuYmlvLnRpdGxlLFxuXHRcdFx0ZG9iOiBjdXJyZW50VXNlci5iaW8uZG9iXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldE9uZVVzZXJFdmVudExvY2FsbHkodHlwZSwgZXZlbnRJZCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5ldmVudHNbdHlwZV1bZXZlbnRJZF07XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyRXZlbnRzTG9jYWxseSh0eXBlKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRVc2VyLmV2ZW50c1t0eXBlXTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldEFsbFVzZXJFdmVudHNMb2NhbGx5KCkge1xuXHRcdHJldHVybiBjdXJyZW50VXNlci5ldmVudHM7XG5cdH1cblxuXHQvL3NldHRlciBtZXRob2RzXG5cdGZ1bmN0aW9uIHNldFVJRExvY2FsbHkodWlkKSB7XG5cdFx0Y3VycmVudFVzZXIuYmlvLnVpZCA9IHVpZDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldE5hbWVMb2NhbGx5KG5hbWUpIHtcblx0XHRjdXJyZW50VXNlci5iaW8ubmFtZSA9IG5hbWU7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRFbWFpbExvY2FsbHkoZW1haWwpIHtcblx0XHRjdXJyZW50VXNlci5iaW8uZW1haWwgPSBlbWFpbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldENvbXBhbnlMb2NhbGx5KGNvbXBhbnkpIHtcblx0XHRjdXJyZW50VXNlci5iaW8uY29tcGFueSA9IGNvbXBhbnk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHNldFRpdGxlTG9jYWxseSh0aXRsZSkge1xuXHRcdGN1cnJlbnRVc2VyLmJpby50aXRsZSA9IHRpdGxlO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0RE9CTG9jYWxseShkb2IpIHtcblx0XHRjdXJyZW50VXNlci5iaW8uZG9iID0gZG9iO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2V0UHJpbWFyaWVzTG9jYWxseShlbWFpbCwgbmFtZSwgdWlkKSB7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoZW1haWwpKSBzZXRFbWFpbExvY2FsbHkoZW1haWwpO1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKG5hbWUpKSBnZXROYW1lTG9jYWxseShuYW1lKTtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh1aWQpKSBzZXRVSURMb2NhbGx5KHVpZCk7XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVVc2VyRXZlbnRzTG9jYWxseSh0eXBlLCBldmVudCkge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZXZlbnRJRCA9IGV2ZW50LmlkO1xuXG5cdFx0Ly9jaGVjayBpZiB0aGUgbW9kZWwgbmVlZHMgdG8gYmUgY2xlYW5lZFxuXHRcdGNsZWFuRXZlbnRzKHR5cGUpO1xuXHRcdC8vdGhlbiBsb2FkIHRoZSBuZXcgZXZlbnRcblx0XHRjdXJyZW50VXNlci5ldmVudHNbdHlwZV1bZXZlbnRJRF0gPSBldmVudDtcblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUFsbFVzZXJFdmVudHNMb2NhbGx5KGFsbFVzZXJFdmVudHMpIHtcblx0XHRjdXJyZW50VXNlci5ldmVudHMgPSBhbGxVc2VyRXZlbnRzO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQmlvTG9jYWxseSh1c2VyQmlvKSB7XG5cdFx0Ly91cGRhdGUgbG9jYWwgdmFsdWVzXG5cdFx0c2V0TmFtZUxvY2FsbHkodXNlckJpby5uYW1lKTtcblx0XHRzZXRFbWFpbExvY2FsbHkodXNlckJpby5lbWFpbCk7XG5cdFx0c2V0Q29tcGFueUxvY2FsbHkodXNlckJpby5jb21wYW55KTtcblx0XHRzZXRUaXRsZUxvY2FsbHkodXNlckJpby50aXRsZSk7XG5cdFx0c2V0RE9CTG9jYWxseSh1c2VyQmlvLmRvYik7XG5cdFx0Ly9zYXZlIHRvIGRiXG5cdFx0c2V0UmVtb3RlQmlvRnJvbUxvY2FsKCk7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRHdWVzdFRvSG9zdEd1ZXN0TGlzdChuYW1lLCBlbWFpbCwgZ3Vlc3RJZCwgZXZlbnRJZCwgdWlkKSB7XG5cdFx0Ly9jYWxsIHRvIHRoZSBkYiBzbyByZXR1cm4gYSBwcm9taXNlXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9jb252ZXJ0IHRoZSBlbWFpbCBpZiBvbmUgd2FzIHBhc3NlZFxuXHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoZW1haWwpKSB7XG5cdFx0XHRcdGd1ZXN0SWQgPSB1dGY4X3RvX2I2NChlbWFpbCk7XG5cdFx0XHR9XG5cblx0XHRcdGRiLmFkZEd1ZXN0VG9Ib3N0R3Vlc3RMaXN0b25EQihuYW1lLCBndWVzdElkLCBldmVudElkLCB1aWQpXG5cdFx0XHQudGhlbihmdW5jdGlvbihwb3NpdGl2ZVJlc3VsdCkge1xuXHRcdFx0XHRyZXNvbHZlKHBvc2l0aXZlUmVzdWx0KTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24obmVnYXRpdmVSZXN1bHQpIHtcblx0XHRcdFx0cmVqZWN0KG5lZ2F0aXZlUmVzdWx0KTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFVzZXJJZEZvckd1ZXN0KGVtYWlsKSB7XG5cdFx0Ly9jYWxsIHRvIHRoZSBkYiBzbyByZXR1cm4gYSBwcm9taXNlXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9jb252ZXJ0IHRoZSBlbWFpbFxuXHRcdFx0Z3Vlc3RFbWFpbCA9IHV0ZjhfdG9fYjY0KGVtYWlsKTtcblxuXHRcdFx0ZGIuZmluZEd1ZXN0VUlEKGd1ZXN0RW1haWwpXG5cdFx0XHQudGhlbihmdW5jdGlvbih1aWQpIHtcblx0XHRcdFx0cmVzb2x2ZSh1aWQpO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihlcnJvclJlc3BvbnNlKSB7XG5cdFx0XHRcdHJlamVjdChlcnJvclJlc3BvbnNlKTtcblx0XHRcdH0pXG5cblx0XHR9KTtcblx0fVxuXG5cdC8vZGVsZXRlIE1ldGhvZHNcblx0ZnVuY3Rpb24gcmVtb3ZlVXNlckV2ZW50c0xvY2FsbHkodHlwZSwgZXZlbnQpIHtcblx0XHQvL2RvZXMgdGhpcyB3b3JrP1xuXHRcdGRlbGV0ZSBjdXJyZW50VXNlci5ldmVudHNbdHlwZV1bZXZlbnQuaWRdO1xuXHR9XG5cblx0Ly9yZW1vdGUtbG9jYWwgaW50ZXJhY3Rpb24gTWV0aG9kc1xuXHRmdW5jdGlvbiBnZXRGdWxsUmVtb3RlREJmb3JMb2NhbCgpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblxuXHRcdGRiLmRvd25sb2FkVXNlckRhdGEoKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlbW90ZVVzZXJEYXRhKSB7XG5cdFx0XHRjdXJyZW50VXNlciA9IHJlbW90ZVVzZXJEYXRhO1xuXHRcdH0pXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRSZW1vdGVCaW9Gb3JMb2NhbCh1aWQpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblx0XHRcdFx0XG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9nbyBvdXQgdG8gdGhlIGRiIGJlZm9yZSByZXNvbHZpbmdcblx0XHRcdGRiLmdldFVzZXJCaW8odWlkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24odXNlckJpbykge1xuXG5cdFx0XHRcdHJlc29sdmUodXNlckJpbyk7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHJlYWRpbmcgdGhlIHVzZXIgYmlvOiAnICsgZXJyb3IpO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0XHRcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFJlbW90ZUV2ZW50c0ZvckxvY2FsKCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXHRcdFx0XHRcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdC8vZ28gb3V0IHRvIHRoZSBkYiBiZWZvcmUgcmVzb2x2aW5nXG5cdFx0XHRkYi5nZXRVc2VyRXZlbnRzKGdldFVJRExvY2FsbHkoKSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uKG9idGFpbmVkVXNlckV2ZW50cykge1xuXG5cdFx0XHRcdC8vc2F2ZSB0aGUgcmVzdWx0cyB0byB0aGUgbG9jYWwgZGF0YWJzZVxuXHRcdFx0XHRPYmplY3Qua2V5cyhvYnRhaW5lZFVzZXJFdmVudHMpLmZvckVhY2goZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG5cdFx0XHRcdFx0Ly93aXRoaW4gZWFjaCBldmVudCB0eXBlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgYWN0dWFsIGV2ZW50c1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKG9idGFpbmVkVXNlckV2ZW50c1tldmVudFR5cGVdKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdFx0XHQvL29uY2Ugd2Ugc2VlIHRoZSBldmVudHMsIHNhdmUgdGhlbSB0byB0aGUgbG9jYWwgbW9kZWxcblxuXHRcdFx0XHRcdFx0dXBkYXRlVXNlckV2ZW50c0xvY2FsbHkoZXZlbnRUeXBlLCBvYnRhaW5lZFVzZXJFdmVudHNbZXZlbnRUeXBlXVtldmVudF0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vcmV0dXJuIHRoZSByZXN1bHRzIHRvIHRoZSByZXF1ZXN0aW5nIG9iamVjdFxuXHRcdFx0XHRyZXNvbHZlKG9idGFpbmVkVXNlckV2ZW50cyk7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHJlYWRpbmcgdGhlIHVzZXIgZXZlbnRzOiAnICsgZXJyb3IpO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldE9uZVJlbW90ZUV2ZW50Rm9yTG9jYWwoZXZlbnRJZCkge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XG5cdFx0XHQvL2dvaW5nIHRvIGJhY2tlbmQgc2VydmljZXNcblx0XHRcdGRiLmdldEFIb3N0ZWRFdmVudChnZXRVSURMb2NhbGx5KCksIGV2ZW50SWQpXG5cdFx0XHQudGhlbihmdW5jdGlvbihvYnRhaW5lZEV2ZW50KSB7XG5cblx0XHRcdFx0Ly9zYXZlIHRoZSByZXN1bHQgdG8gdGhlIGxvY2FsIG1vZGVsXG5cdFx0XHRcdCRsb2cuaW5mbyhvYnRhaW5lZEV2ZW50KTtcblx0XHRcdFx0Ly9yZXR1cm4gdGhlIHJlc3VsdCB0byB0aGUgcmVxdWVzdGluZyBvYmplY3Rcblx0XHRcdFx0cmVzb2x2ZShvYnRhaW5lZEV2ZW50KTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcmVhZGluZyB0aGUgdXNlciBldmVudDogJyArIGVycm9yKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRGdWxsUmVtb3RlREJmcm9tTG9jYWwoKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRkYi51cGxvYWRVc2VyRGF0YShjdXJyZW50VXNlcik7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRSZW1vdGVCaW9Gcm9tTG9jYWwoKSB7XG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgZGIgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0XHRkYi51cGxvYWRVc2VyQmlvKGN1cnJlbnRVc2VyLmJpbyk7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRSZW1vdGVFdmVudHNGcm9tTG9jYWwoKSB7fVxuXG5cdGZ1bmN0aW9uIGNsZWFuREJFdmVudHNDYXRlZ29yeShjYXRlZ29yeSkge1xuXHRcdC8vZGVjbGFyIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblxuXHRcdC8vcmVtb3ZlICd1cGRhdGVkJyBvYmplY3QgaWYgbmVlZCBiZVxuXHRcdC8vZGIgY2FsbCBzbyByZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9jaGVjayBmb3Igb2JqZWN0XG5cdFx0XHRkYi50aGVyZVdhc0FuVXBkYXRlRmllbGQoY2F0ZWdvcnksIGdldFVJRExvY2FsbHkoKSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uKGFmZmlybWF0aXZlUmVzcG9uc2UpIHtcblx0XHRcdFx0Ly9pZiB0aGVyZSB3YXMgYW4gdXBkYXRlIGZpZWxkLCBkZWxldGUgaXRcblx0XHRcdFx0ZGIuZGVsZXRlVXBkYXRlRmllbGQoY2F0ZWdvcnksIGdldFVJRExvY2FsbHkoKSlcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oYWZmaXJtYXRpdmVSZXNwb25zZSkgeyAkbG9nLmluZm8oYWZmaXJtYXRpdmVSZXNwb25zZSk7IH0gKVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3JSZXNwb25zZSkgeyAkbG9nLmluZm8oZXJyb3JSZXNwb25zZSk7IH0gKVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaChmdW5jdGlvbihlcnJvclJlc3BvbnNlKSB7XG5cdFx0XHRcdCRsb2cuaW5mbyhlcnJvclJlc3BvbnNlKVxuXHRcdFx0fSlcblxuXHRcdH0pO1xuXHRcdC8vaWYgaXQgaXMgdGhlcmUsIHJlbW92ZSBpdFxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RXZlbnRHdWVzdExpc3QoaG9zdElkLCBldmVudElkKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkYiA9IGJhY2tlbmRTZXJ2aWNlcztcblxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vZ2V0IHRoZSBvYmplY3Rcblx0XHRcdGRiLmdldEd1ZXN0TGlzdEZvckV2ZW50KGhvc3RJZCwgZXZlbnRJZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKG9idGFpbmVkTGlzdCkge1xuXHRcdFx0XHRyZXNvbHZlKG9idGFpbmVkTGlzdCk7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yUmVzcG9uc2UpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yUmVzcG9uc2UpO1xuXHRcdFx0fSlcblx0XHR9KVxuXHR9XG5cblx0ZnVuY3Rpb24gbG9hZEJpbyh1aWQpIHtcblxuXHRcdC8vbWlnaHQgbmVlZCB0byBnbyBvdXQgdG8gdGhlIGRiIHNvIHJldHVybiBhIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdC8vY2hlY2sgZm9yIGJpbyBsb2NhbGx5IGZpcnN0XG5cdFx0XHRpZihiaW9QcmltYXJpZXNBcmVDb21wbGV0ZUxvY2FsbHkoKSkge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9wYXNzIGl0IGJhY2sgYXMgc3VjY2Vzc1xuXHRcdFx0XHRyZXNvbHZlKGdldEZ1bGxCaW9Mb2NhbGx5KCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9pZiB0aGV5J3JlIG5vdCBjb21wbGV0ZSBsb2NhbGx5LCBjaGVjayB0aGUgc2VydmVyXG5cdFx0XHRcdGdldFJlbW90ZUJpb0ZvckxvY2FsKHVpZClcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oYmlvRnJvbVJlbW90ZURCKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShiaW9Gcm9tUmVtb3RlREIpO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGxvYWRBbkV2ZW50UHJvZ3Jlc3NpdmVseSh1aWQsIGV2ZW50SWQpIHtcblx0XHQvL3VwZGF0ZSB1aWQgaWYgbmVlZCBiZVxuXHRcdHNldFVJRExvY2FsbHkodWlkKTtcblxuXHRcdC8vZ29pbmcgb3V0IHRoZSB0aGUgZGIgc28gcmV0dXJuIGEgcHJvbWlzZVxuXHRcdHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0Ly9yZWFjaCBvdXQgdG8gZGJcblx0XHRcdGdldE9uZVJlbW90ZUV2ZW50Rm9yTG9jYWwoZXZlbnRJZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKG9idGFpbmVkVXNlckV2ZW50KSB7XG5cdFx0XHRcdC8vd2hlbiB0aGUgZGIgcmVzdWx0cyBjb21lIGJhY2ssIHJldHVybiBpdFxuXHRcdFx0XHRyZXNvbHZlKG9idGFpbmVkVXNlckV2ZW50KVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaCgpXG5cblx0XHRcdC8vZmlyc3QgcmV0dXJuIHdoYXRldmVyIGV2ZW50IGluZm8gaXMgc3RvcmVkIGxvY2FsbHlcblx0XHRcdC8vY2hlY2sgaWYgdGhlIGV2ZW50IGlzIGF2YWlsYWJsZSBsb2NhbGx5XG5cdFx0XHRpZihldmVudEV4aXN0c0xvY2FsbHkoJ2hvc3RpbmcnLCBldmVudElkKSkgcmVzb2x2ZShnZXRPbmVVc2VyRXZlbnRMb2NhbGx5KCdob3N0aW5nJywgZXZlbnRJZCkpO1xuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBsb2FkRXZlbnRzUHJvZ3Jlc3NpdmVseSh1aWQpIHtcblx0XHR2YXIgZXZlbnRUeXBlcyA9IFsnYXR0ZW5kaW5nJywgJ3BlbmRpbmcnLCAnaG9zdGluZycsICdjb21wbGV0ZWQnXTtcblx0XHR2YXIgYWxsRXZlbnRzID0ge307XG5cblx0XHQvL3dpbGwgZ28gb3V0IHRvIHRoZSBkYiBzbyByZXR1cm4gYSBwcm9taXNlXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHRnZXRSZW1vdGVFdmVudHNGb3JMb2NhbCgpXG5cdFx0XHQudGhlbihmdW5jdGlvbihvYnRhaW5lZFVzZXJFdmVudHMpIHtcblx0XHRcdFx0Ly93aGVuIHRoZSBkYiByZXN1bHRzIGNvbWUgYmFjaywgcmV0dXJuIHRob3NlXG5cdFx0XHRcdHJlc29sdmUob2J0YWluZWRVc2VyRXZlbnRzKTtcblx0XHRcdH0pXG5cblx0XHRcdC8vYnVpbGQgdGhlIGxvY2FsIG1vZGVsXG5cdFx0XHRhbGxFdmVudHMgPSBnZXRVc2VyRXZlbnRzTG9jYWxseSh0eXBlKTtcblxuXHRcdFx0Ly9maXJzdCByZXR1cm4gd2hhdGV2ZXIgZXZlbnQgaW5mbyBpcyBzdG9yZWQgbG9jYWxseVxuXHRcdFx0cmVzb2x2ZShhbGxFdmVudHMpO1xuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVOZXdFdmVudChldmVudElEKSB7XG5cdFx0Ly9kZWNsYXIgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXHRcdHZhciBuZXdFdmVudCA9IHt9O1xuXG5cdFx0Ly9maXJzdCBjcmVhdGUgdGhlIG9iamVjdFxuXHRcdG5ld0V2ZW50ID0ge1xuXHRcdFx0aWQ6IGV2ZW50SUQsXG5cdFx0XHRuYW1lOiAnJyxcblx0XHRcdHR5cGU6ICcnLFxuXHRcdFx0aG9zdDoge1xuXHRcdFx0XHRuYW1lOiBjdXJyZW50VXNlci5iaW8ubmFtZSxcblx0XHRcdFx0dWlkOiBjdXJyZW50VXNlci5iaW8udWlkLFxuXHRcdFx0XHRlbWFpbDogY3VycmVudFVzZXIuYmlvLmVtYWlsXG5cdFx0XHR9LFxuXHRcdFx0bWVzc2FnZTogJycsXG5cdFx0XHRldmVudFRpbWVzOiB7XG5cdFx0XHRcdHN0YXJ0OiAwLFxuXHRcdFx0XHRlbmQ6IDBcblx0XHRcdH0sXG5cdFx0XHRhZGRyZXNzOiB7XG5cdFx0XHRcdHN0cmVldDAxOiAnJyxcblx0XHRcdFx0c3RyZWV0MDI6ICcnLFxuXHRcdFx0XHRzdHJlZXQwMzogJycsXG5cdFx0XHRcdGNpdHk6ICcnLFxuXHRcdFx0XHRzdGF0ZTogJycsXG5cdFx0XHRcdHppcDogMFxuXHRcdFx0fSxcblx0XHRcdGd1ZXN0TGlzdDoge31cblx0XHR9O1xuXG5cdFx0Ly9zYXZlIGl0IGxvY2FsbHlcblx0XHR1cGRhdGVVc2VyRXZlbnRzTG9jYWxseSgnaG9zdGluZycsIG5ld0V2ZW50KTtcblxuXHRcdC8vdGhlbiBjcmVhdGUgaXQgb24gdGhlIHNlcnZlclxuXHRcdC8vd2lsbCBnbyBvdXQgdG8gdGhlIGRiIHNvIHJldHVybiBhIHByb21pc2Vcblx0XHRyZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcblx0XHRcdC8vbWFuYWdlIHRoZSBwcm9taXNlIHJlc3BvbnNlc1xuXHRcdFx0ZGIuY3JlYXRlSG9zdGVkRXZlbnQoZ2V0VUlETG9jYWxseSgpLCBuZXdFdmVudClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblx0XHRcdFx0cmVzb2x2ZShtZXNzYWdlKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pXG5cblx0XHR9KTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlUGVuZGluZ0V2ZW50c0xpc3RGb3JHdWVzdChldmVudElkKSB7XG5cdFx0Ly9kZWNsYXIgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRiID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdFx0cmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHQvL21hbmFnZSB0aGUgZGIgcHJvbWlzZVxuXHRcdFx0Ly9kYi5hZGRQZW5kaW5nRXZlbnRGb3JHdWVzdChjdXJyZW50VXNlci5nZXRVSURMb2NhbGx5KCksIGhvc3RJZCwgZXZlbnRJZCwgY3VycmVudFVzZXIuZ2V0VXNlckV2ZW50c0xvY2FsbHkoJycsIGV2ZW50SWQpKVxuXHRcdH0pO1xuXG5cdH1cblx0XG5cdHJldHVybiBhbGxVc2VyRGF0YTtcbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG4gICAgLmZhY3RvcnkoJ3ZhbGlkYXRpb24nLCB2YWxpZGF0aW9uKTtcblxudmFsaWRhdGlvbi4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdmFsaWRhdGlvbigkbG9nKSB7XG5cdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0dmFyIG1pbmltdW1OYW1lTGVuZ3RoID0gMztcblx0dmFyIG1pbmltdW1QYXNzTGVuZ3RoID0gMTY7XG5cdHZhciBtYXhpbXVtUGFzc0xlbmd0aCA9IDEwMDtcblxuXHR2YXIgYWxsVmFsaWRhdGlvbnMgPSB7XG5cdFx0cmVxdWlyZWQ6IHJlcXVpcmVkLFxuXHRcdG1pbk5hbWVMZW5ndGg6IG1pbk5hbWVMZW5ndGgsXG5cdFx0bWluUGFzc0xlbmd0aDogbWluUGFzc0xlbmd0aCxcblx0XHRtYXhQYXNzTGVuZ3RoOiBtYXhQYXNzTGVuZ3RoLFxuXHRcdGF0TGVhc3RPbmVTeW1ib2w6IGF0TGVhc3RPbmVTeW1ib2wsXG5cdFx0YXRMZWFzdE9uZU51bWJlcjogYXRMZWFzdE9uZU51bWJlcixcblx0XHRhdExlYXN0T25lTG93ZXJjYXNlOiBhdExlYXN0T25lTG93ZXJjYXNlLFxuXHRcdGF0TGVhc3RPbmVVcHBlcmNhc2U6IGF0TGVhc3RPbmVVcHBlcmNhc2UsXG5cdFx0aWxsZWdhbENoYXJhY3RlcjogaWxsZWdhbENoYXJhY3Rlcixcblx0XHRlbWFpbDogZW1haWwsXG5cdFx0ZGF0ZU9mQmlydGg6IGRhdGVPZkJpcnRoXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVxdWlyZWQodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuICdUaGlzIGlzIGEgcmVxdWlyZWQgZmllbGQnO1xuXHRcdH0gXG5cdH1cblxuXHRmdW5jdGlvbiBtaW5OYW1lTGVuZ3RoKHZhbHVlKSB7XG5cdFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHRpZih2YWx1ZS5sZW5ndGggPCBtaW5pbXVtTmFtZUxlbmd0aCkgcmV0dXJuICgnTmFtZSBzaG91bGQgYmUgYXQgbGVhc3QgJyArIG1pbmltdW1OYW1lTGVuZ3RoICsgJyBjaGFyYWN0ZXJzJyk7XG5cdFx0fSBcblx0fVxuXG5cdGZ1bmN0aW9uIG1pblBhc3NMZW5ndGgodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdGlmKCEodmFsdWUubGVuZ3RoIDwgbWluaW11bVBhc3NMZW5ndGgpKSByZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWF4UGFzc0xlbmd0aCh2YWx1ZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0aWYoISh2YWx1ZS5sZW5ndGggPiBtYXhpbXVtUGFzc0xlbmd0aCkpIHJldHVybiB0cnVlO1xuXHRcdH0gXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gYXRMZWFzdE9uZVN5bWJvbCh2YWx1ZSkge1xuXHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0Ly8gYnVpbGQgcmVnZXhcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIltcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9mYWlsdXJlOiBkaWRuJ3QgZmluZCBhbnkgc3BjaWFsIGNoYXJhY3RlcnNcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGF0TGVhc3RPbmVOdW1iZXIodmFsdWUpIHtcblx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbMC05XVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuICAgIGZ1bmN0aW9uIGF0TGVhc3RPbmVMb3dlcmNhc2UodmFsdWUpIHtcbiAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSkge1xuXHRcdFx0Ly8gYnVpbGQgcmVnZXhcblx0XHRcdHZhciBjb25zdHJhaW50ID0gbmV3IFJlZ0V4cChcIlthLXpdXCIsIFwiXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly9mYWlsdXJlOiBkaWRuJ3QgZmluZCBhbnkgc3BjaWFsIGNoYXJhY3RlcnNcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdExlYXN0T25lVXBwZXJjYXNlKHZhbHVlKSB7XG4gICAgXHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdC8vIGJ1aWxkIHJlZ2V4XG5cdFx0XHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbQS1aXVwiLCBcIlwiKTtcblxuXHRcdFx0Ly9jaGVjayBjb25zdHJhdGludFxuXHRcdFx0aWYoY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQvL3N1Y2Nlc3M6IGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlciBmb3VuZFxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaWxsZWdhbENoYXJhY3Rlcih2YWx1ZSkge1xuICAgIFx0aWYoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpKSB7XG5cdFx0XHQvLyBidWlsZCByZWdleFxuXHRcdFx0dmFyIGNvbnN0cmFpbnQgPSBuZXcgUmVnRXhwKFwiW15BLXowLTlcXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpdXCIsIFwiXCIpO1xuXG5cdFx0XHQvL2NoZWNrIGNvbnN0cmF0aW50XG5cdFx0XHRpZihjb25zdHJhaW50LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdC8vc3VjY2VzczogYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyIGZvdW5kXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vZmFpbHVyZTogZGlkbid0IGZpbmQgYW55IHNwY2lhbCBjaGFyYWN0ZXJzXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZW1haWwodmFsdWUpIHtcbiAgICBcdC8vZGVmaW5lIGNvbnN0cmFpbnRzXG4gICAgXHR2YXIgY29uc3RyYWludCA9IG5ldyBSZWdFeHAoXCJbYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKykqQCg/OlthLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cXC4pK1thLXowLTldKD86W2EtejAtOS1dKlthLXowLTldKT9cIiwgXCJcIik7XG4gICAgXHRcbiAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSAmJiAhY29uc3RyYWludC50ZXN0KHZhbHVlKSkge1xuICAgIFx0XHRyZXR1cm4gJ05vdCBhIHZhbGlkIGVtYWlsJztcbiAgICBcdH1cbiAgICBcdC8vaWYoIWNvbnN0cmFpbnQudGVzdCh2YWx1ZSkpIHJldHVybiAnTm90IGEgdmFsaWQgZS1tYWlsIGFkZHJlc3MnXG4gICAgXHRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXRlT2ZCaXJ0aCh2YWx1ZSkge31cblxuXHRyZXR1cm4gYWxsVmFsaWRhdGlvbnM7XG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuICAgIC5jb25maWcoY29uZmlnKTtcbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyKSB7ICAgXG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnTGFuZGluZ1BhZ2VDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3NpZ251cCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9uZXdVc2VyU2lnbnVwLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdOZXdVc2VyU2lnblVwQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9sb2dpbicsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9yZWdpc3RlcmVkVXNlckxvZ2luLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdSZWdVc2VyTG9naW5Db250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL3VzZXJJbmZvcm1hdGlvbi86dWlkPycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy91c2VySW5mb3JtYXRpb24uaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ1VzZXJJbmZvcm1hdGlvbkNvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlOiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC53aGVuKCcvdXNlckV2ZW50cy86dWlkPycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy91c2VyRXZlbnRzLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyRXZlbnRzQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZTogeyAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgICAgIHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2U6IHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2VcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9ldmVudC9ob3N0LzpldmVudElkLzp1aWQvOnNlY3Rpb24nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvaG9zdEV2ZW50Lmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdIb3N0RXZlbnRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZTogdXNlckF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9ldmVudC9ndWVzdC86ZXZlbnRJZC86dWlkLzpob3N0SWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZ3Vlc3RFdmVudC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnR3Vlc3RFdmVudENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlOiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlLFxuICAgICAgICB9XG4gICAgfSlcbiAgICAud2hlbignL2V2ZW50LzpldmVudElkPy86aG9zdElkPy86dWlkPy86c2VjdGlvbj8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYW5FdmVudC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnQW5FdmVudENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHsgLyogQG5nSW5qZWN0ICovXG4gICAgICAgICAgICB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlOiB1c2VyQXV0aGVudGljYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgZXZlbnRWaWV3Q2hhbmdlcjogZXZlbnRWaWV3Q2hhbmdlclxuICAgICAgICB9XG4gICAgfSlcbiAgICAub3RoZXJ3aXNlKHtcbiAgICAgICAgcmVkaXJlY3RUbzogJy8nXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZXJBdXRoZW50aWNhdGlvblNlcnZpY2UoYXV0aFNlcnZpY2UpIHtcbiAgICBhdXRoU2VydmljZS5pc0xvZ2dlZEluKCk7XG59O1xuXG5mdW5jdGlvbiBldmVudFZpZXdDaGFuZ2VyKHRyYWZmaWNWYWxldCwgJHJvdXRlKSB7XG4gICAgdHJhZmZpY1ZhbGV0LmV2ZW50Um91dGUoJHJvdXRlLmN1cnJlbnQucGFyYW1zLmV2ZW50SWQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5ob3N0SWQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5jdXJyZW50LnBhcmFtcy51aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvdXRlLmN1cnJlbnQucGFyYW1zLnNlY3Rpb24pO1xufTtcbi8qIEFkZEFHdWVzdC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIGRpc3BsYXlzIGEgbGlzdCBvZiBhbGwgZ3Vlc3RzIGludml0ZWQgdG8gYW4gZXZlbnQgdGhpcyB1c2VyIGlzIGhvc3RpbmcuXG4qIEBleGFtcGxlIDxhZGQtYS1ndWVzdD48L2FkZC1hLWd1ZXN0PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG5cdC5kaXJlY3RpdmUoJ2FkZEFHdWVzdCcsIGFkZEFHdWVzdCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWRkQUd1ZXN0KCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2RpcmVjdGl2ZXMvYWRkQUd1ZXN0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGFkZEFHdWVzdENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBhZGRBR3Vlc3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJ3ZhbGlkYXRpb24nLCAndXNlckRhdGEnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBhZGRBR3Vlc3RDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgdmFsaWRhdGlvbiwgdXNlckRhdGEpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cdCAgICB2YXIgZW1haWxDaGVja2VyID0gdmFsaWRhdGlvbjtcblx0ICAgIHZhciBpbnZpdGF0aW9uTWFuYWdlciA9IHVzZXJEYXRhO1xuXG5cdCAgICAvL2xvY2FsIHZhcmlhYmxlc1xuXHQgICAgdmFyIGV2ZW50RGV0YWlscyA9IHt9O1xuXG5cdCAgICAvL3ZtIHZhcmlhYmxlc1xuXHQgICAgdm0udGVtcEd1ZXN0ID0ge1xuXHQgICAgXHRuYW1lOiAnJyxcblx0ICAgIFx0ZW1haWw6ICcnXG5cdCAgICB9XG5cdCAgICB2bS52YWxpZGF0aW9ucyA9IHtcblx0ICAgIFx0bmFtZToge1xuXHQgICAgXHRcdGFkZHJlc3NlZDogZmFsc2UsXG5cdCAgICBcdFx0dmFsaWQ6IGZhbHNlLFxuXHQgICAgXHRcdGVycm9yTWVzc2FnZTogJydcblx0ICAgIFx0fSxcblx0ICAgIFx0ZW1haWw6IHtcblx0ICAgIFx0XHRhZGRyZXNzZWQ6IGZhbHNlLFxuXHQgICAgXHRcdHZhbGlkOiBmYWxzZSxcblx0ICAgIFx0XHRlcnJvck1lc3NhZ2U6ICcnXG5cdCAgICBcdH0sXG5cdCAgICBcdGludml0YXRpb246IHtcblx0ICAgIFx0XHRpc1RoZUhvc3Q6IGZhbHNlLFxuXHQgICAgXHRcdGFscmVhZHlJbnZpdGVkOiBmYWxzZSxcblx0ICAgIFx0XHRlcnJvck1lc3NhZ2U6ICcnXG5cdCAgICBcdH1cblx0ICAgIH1cblx0ICAgIHZtLmludml0YXRpb25WYWxpZEZvclN1Ym1pc3Npb24gPSBmYWxzZTtcblx0ICAgIHZtLnN1Ym1pc3Npb25CdXR0b24gPSB7XG5cdCAgICBcdHN0eWxlOiB7XG5cdCAgICBcdFx0Y29sb3I6J3JlZCdcblx0ICAgIFx0fSxcblx0ICAgIFx0Y2xhc3M6IHtcblx0ICAgIFx0XHQnY29sLXhzLTEyJzogdHJ1ZSxcblx0ICAgIFx0XHQnY29sLXNtLTEyJzogdHJ1ZSxcblx0ICAgIFx0XHQnYnRuJzogdHJ1ZSxcblx0ICAgIFx0XHQnYnRuLXdhcm5pbmcnOiB0cnVlLFxuXHQgICAgXHRcdCdidG4tc3VjY2Vzcyc6IGZhbHNlXG5cdCAgICBcdH0sXG5cdCAgICBcdG1lc3NhZ2U6ICdBZGRyZXNzIEludml0YXRpb24uLi4nXG5cdCAgICB9XG5cdCAgICAvL2xvY2FsIG1ldGhvZHNcblx0ICAgIGZ1bmN0aW9uIHZhbGlkYXRlSW52aXRhdGlvbigpIHtcblx0ICAgIFx0Ly9jaGVjayBpZiBib3RoIGlucHV0cyBhcmUgdmFsaWRcblx0ICAgIFx0aWYodm0udmFsaWRhdGlvbnMubmFtZS52YWxpZCAmJiB2bS52YWxpZGF0aW9ucy5lbWFpbC52YWxpZCkge1xuXHQgICAgXHRcdCRsb2cuaW5mbygncmVhZHkgdG8gc3VibWl0Jyk7XG5cdCAgICBcdFx0Ly9zZXQgdGhlIHZhbGlkaXR5IGZsYWdcblx0ICAgIFx0XHR2bS5pbnZpdGF0aW9uVmFsaWRGb3JTdWJtaXNzaW9uID0gdHJ1ZTtcblx0ICAgIFx0XHQvL3VwZGF0ZSB0aGUgc3VibWlzc2lvbiBidXR0b25cblx0ICAgIFx0XHR2bS5zdWJtaXNzaW9uQnV0dG9uLmNsYXNzWydidG4td2FybmluZyddID0gZmFsc2U7XG5cdCAgICBcdFx0dm0uc3VibWlzc2lvbkJ1dHRvbi5jbGFzc1snYnRuLXN1Y2Nlc3MnXSA9IHRydWU7XG5cdCAgICBcdFx0dm0uc3VibWlzc2lvbkJ1dHRvbi5tZXNzYWdlPSdJbnZpdGUgR3Vlc3QnO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdCRsb2cuaW5mbygnbm90IHJlYWR5IHRvIHN1Ym1pdCcpO1xuXHQgICAgXHRcdC8vc2V0IHRoZSB2YWxpZGl0eSBmbGFnXG5cdCAgICBcdFx0dm0uaW52aXRhdGlvblZhbGlkRm9yU3VibWlzc2lvbiA9IGZhbHNlO1xuXHQgICAgXHRcdC8vdXBkYXRlIHRoZSBzdWJtaXNzaW9uIGJ1dHRvblxuXHQgICAgXHRcdHZtLnN1Ym1pc3Npb25CdXR0b24uY2xhc3NbJ2J0bi13YXJuaW5nJ10gPSB0cnVlO1xuXHQgICAgXHRcdHZtLnN1Ym1pc3Npb25CdXR0b24uY2xhc3NbJ2J0bi1zdWNjZXNzJ10gPSBmYWxzZTtcblx0ICAgIFx0XHR2bS5zdWJtaXNzaW9uQnV0dG9uLm1lc3NhZ2U9J0FkZHJlc3MgSW52aXRhdGlvbi4uLic7XG5cdCAgICBcdH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gaW5pdCgpIHtcblx0ICAgIFx0Ly9sb2FkIHRoZSBldmVudCBmb3IgcmVmZXJlbmNlXG5cdCAgICBcdGlmKGFuZ3VsYXIuaXNVbmRlZmluZWQoaW52aXRhdGlvbk1hbmFnZXIuZ2V0T25lVXNlckV2ZW50TG9jYWxseSgnaG9zdGluZycsICRyb3V0ZVBhcmFtcy5ldmVudElkKSkpIHtcblx0ICAgIFx0XHQvL2lmIHRoaXMgcGFnZSB3YXMgbG9hZGVkIGJlZm9yZSB0aGUgbW9kZWwgZ2V0IHRoZSBldmVudFxuXHQgICAgXHRcdGludml0YXRpb25NYW5hZ2VyLmdldFJlbW90ZUV2ZW50c0ZvckxvY2FsKClcblx0XHQgICAgXHQudGhlbihmdW5jdGlvbigpIHtcblx0XHQgICAgXHRcdC8vd2hlbiB0aGUgZXZlbnQgaGFzIGJlZW4gbG9hZGVkXG5cdFx0ICAgIFx0XHRldmVudERldGFpbHMgPSBpbnZpdGF0aW9uTWFuYWdlci5nZXRPbmVVc2VyRXZlbnRMb2NhbGx5KCdob3N0aW5nJywgJHJvdXRlUGFyYW1zLmV2ZW50SWQpO1xuXG5cdFx0ICAgIFx0fSlcblx0ICAgIFx0fSBlbHNlIHtcblx0ICAgIFx0XHQvL2p1c3QgZ2V0IHRoZSBtb2RlbCBsb2NhbGx5XG5cdCAgICBcdFx0ZXZlbnREZXRhaWxzID0gaW52aXRhdGlvbk1hbmFnZXIuZ2V0T25lVXNlckV2ZW50TG9jYWxseSgnaG9zdGluZycsICRyb3V0ZVBhcmFtcy5ldmVudElkKTtcblx0ICAgIFx0fVxuXHQgICAgXHQgIFx0XG5cdCAgICB9XG5cblx0ICAgIC8vdm0gbWV0aG9kc1xuXHQgICAgdm0udmFsaWRhdGVOYW1lID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdC8vdGhpcyBmaWVsZCBpcyBiZWluZyBlZGl0ZWQsIHRocm93IGZsYWdcblx0ICAgIFx0dm0udmFsaWRhdGlvbnMubmFtZS5hZGRyZXNzZWQgPSB0cnVlO1xuXG5cdCAgICBcdC8vY2hlY2sgZm9yIHZhbHVlXG5cdCAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZtLnRlbXBHdWVzdC5uYW1lKSAmJiB2bS50ZW1wR3Vlc3QubmFtZSAhPSAnJykge1xuXHQgICAgXHRcdHZtLnZhbGlkYXRpb25zLm5hbWUudmFsaWQgPSB0cnVlO1xuXHQgICAgXHRcdHZtLnZhbGlkYXRpb25zLm5hbWUuZXJyb3JNZXNzYWdlID0gJyc7XG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdFx0dm0udmFsaWRhdGlvbnMubmFtZS52YWxpZCA9IGZhbHNlO1xuXHQgICAgXHRcdHZtLnZhbGlkYXRpb25zLm5hbWUuZXJyb3JNZXNzYWdlID0gJ1RoaXMgZ3Vlc3QgbmVlZHMgYSBuYW1lJztcblx0ICAgIFx0fVxuXG5cdCAgICBcdHZhbGlkYXRlSW52aXRhdGlvbigpO1xuXHQgICAgfVxuXHQgICAgdm0udmFsaWRhdGVFbWFpbCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQvL3RoaXMgZmllbGQgaXMgYmVpbmcgZWRpdGVkLCB0aHJvdyBmbGFnXG5cdCAgICBcdHZtLnZhbGlkYXRpb25zLmVtYWlsLmFkZHJlc3NlZCA9IHRydWU7XG5cblx0ICAgIFx0Ly9pcyB0aGVyZSBhbiBlbWFpbCB2YWx1ZT9cblx0ICAgIFx0aWYoYW5ndWxhci5pc0RlZmluZWQodm0udGVtcEd1ZXN0LmVtYWlsKSAmJiB2bS50ZW1wR3Vlc3QuZW1haWwgIT0gJycpIHtcblx0ICAgIFx0XHRcblx0ICAgIFx0XHQvL2lmIGFuIGVtYWlsIGV4aXN0cyBjaGVjayBpdCdzIHZhbGlkaXR5XG5cdCAgICBcdFx0aWYoYW5ndWxhci5pc1VuZGVmaW5lZChlbWFpbENoZWNrZXIuZW1haWwodm0udGVtcEd1ZXN0LmVtYWlsKSkpIHtcblx0ICAgIFx0XHRcdC8vZW1haWwgaXMgdmFsaWRcblx0ICAgIFx0XHRcdHZtLnZhbGlkYXRpb25zLmVtYWlsLnZhbGlkID0gdHJ1ZTtcblx0ICAgIFx0XHRcdHZtLnZhbGlkYXRpb25zLmVtYWlsLmVycm9yTWVzc2FnZSA9ICcnO1xuXHQgICAgXHRcdH0gZWxzZSB7XG5cdCAgICBcdFx0XHQvL2dldCB0aGUgZXJyb3Jcblx0ICAgIFx0XHRcdHZtLnZhbGlkYXRpb25zLmVtYWlsLnZhbGlkID0gZmFsc2U7XG5cdCAgICBcdFx0XHR2bS52YWxpZGF0aW9ucy5lbWFpbC5lcnJvck1lc3NhZ2UgPSBlbWFpbENoZWNrZXIuZW1haWwodm0udGVtcEd1ZXN0LmVtYWlsKTtcblx0ICAgIFx0XHRcdCRsb2cuaW5mbyh2bS52YWxpZGF0aW9ucy5lbWFpbC5lcnJvck1lc3NhZ2UpO1xuXHQgICAgXHRcdH1cblxuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdC8vdGhlcmUgaXNuJ3QgYW4gZW1haWwgeWV0XG5cdCAgICBcdFx0dm0udmFsaWRhdGlvbnMuZW1haWwudmFsaWQgPSBmYWxzZTtcblx0ICAgIFx0XHR2bS52YWxpZGF0aW9ucy5lbWFpbC5lcnJvck1lc3NhZ2UgPSAnTm90IGEgdmFsaWQgZW1haWwnO1xuXHQgICAgXHR9XG5cblx0ICAgIFx0dmFsaWRhdGVJbnZpdGF0aW9uKCk7XG5cdCAgICB9XG5cblx0ICAgIHZtLnNob3dOYW1lRXJyb3IgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0aWYoIXZtLnZhbGlkYXRpb25zLm5hbWUudmFsaWQgJiYgdm0udmFsaWRhdGlvbnMubmFtZS5hZGRyZXNzZWQpIHJldHVybiB0cnVlO1xuXHQgICAgXHRlbHNlIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgdm0uc2hvd0VtYWlsRXJyb3IgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0aWYoIXZtLnZhbGlkYXRpb25zLmVtYWlsLnZhbGlkICYmIHZtLnZhbGlkYXRpb25zLmVtYWlsLmFkZHJlc3NlZCkgcmV0dXJuIHRydWU7XG5cdCAgICBcdGVsc2UgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXG5cdCAgICB2bS5zaG93SW52aXRhdGlvbkVycm9yID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdGlmKCB2bS52YWxpZGF0aW9ucy5pbnZpdGF0aW9uLmlzVGhlSG9zdCB8fFxuXHQgICAgXHRcdHZtLnZhbGlkYXRpb25zLmludml0YXRpb24uYWxyZWFkeUludml0ZWQgKSBcblx0ICAgIFx0XHRcdHJldHVybiB0cnVlO1xuXHQgICAgXHRlbHNlIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgdm0uc3VibWl0R3Vlc3RJbnZpdGF0aW9uID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdCRsb2cuaW5mbygnc3VibWl0dGluZyB0aGUgaW52aXRhdGlvbicpO1xuXHQgICAgXHQvL2lmIHRoZSByZXF1aXJubWVudHMgYXJlIGZ1bGZpbGxlZC4uLlxuXHQgICAgXHRpZih2bS5pbnZpdGF0aW9uVmFsaWRGb3JTdWJtaXNzaW9uKSB7XG5cdCAgICBcdFx0Ly9tYWtlIHN1cmUgdGhlIGludml0YXRpb24gaXMgbm90IHRvIHRoZSBjdXJyZW50IHVzZXJcblx0ICAgIFx0XHRpZihpbnZpdGF0aW9uTWFuYWdlci50aGlzSXNUaGVIb3N0RW1haWwodm0udGVtcEd1ZXN0LmVtYWlsLCAkcm91dGVQYXJhbXMuZXZlbnRJZCkpIHtcblx0XHRcdFx0XHR2bS52YWxpZGF0aW9ucy5pbnZpdGF0aW9uLmlzVGhlSG9zdCA9IHRydWU7XG5cdFx0XHRcdFx0dm0udmFsaWRhdGlvbnMuaW52aXRhdGlvbi5lcnJvck1lc3NhZ2UgPSAnTm8gbmVlZCB0byBpbnZpdGUgdGhlIGhvc3QnO1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHQgICAgXHRcdH0gZWxzZSB7XG5cdCAgICBcdFx0XHR2bS52YWxpZGF0aW9ucy5pbnZpdGF0aW9uLmlzVGhlSG9zdCA9IGZhbHNlO1xuXHQgICAgXHRcdH1cblx0ICAgIFx0XHRcblx0XHQgICAgXHQvL21ha2Ugc3VyZSB0aGlzIHBlcnNvbiBoYXMgbm90IGFscmVhZHkgYmVlbiBpbnZpdGVkXG5cdFx0ICAgIFx0Lypcblx0XHQgICAgXHRpZihpbnZpdGF0aW9uTWFuYWdlci5ndWVzdEludml0ZWRBbHJlYWR5KHZtLnRlbXBHdWVzdC5lbWFpbCwgJHJvdXRlUGFyYW1zLmV2ZW50SWQpKSB7XG5cdFx0ICAgIFx0XHR2bS52YWxpZGF0aW9ucy5pbnZpdGF0aW9uLmFscmVhZHlJbnZpdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHR2bS52YWxpZGF0aW9ucy5pbnZpdGF0aW9uLmVycm9yTWVzc2FnZSA9ICdUaGlzIGd1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gaW52aXRlZCc7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdCAgICBcdFx0fSBlbHNlIHtcblx0ICAgIFx0XHRcdHZtLnZhbGlkYXRpb25zLmludml0YXRpb24uYWxyZWFkeUludml0ZWQgPSBmYWxzZTtcblx0ICAgIFx0XHR9Ki9cblxuXHQgICAgXHRcdC8vaWYgdGhpcyBwZXJzb24gaXMgYSByZWdpc3RlcmVkIHVzZXIgZ2V0IHRoZWlyIHVzZXIgaWRcblx0ICAgIFx0XHRpbnZpdGF0aW9uTWFuYWdlci5nZXRVc2VySWRGb3JHdWVzdCh2bS50ZW1wR3Vlc3QuZW1haWwpXG5cdCAgICBcdFx0LnRoZW4oZnVuY3Rpb24odWlkKSB7XG5cdCAgICBcdFx0XHQkbG9nLmluZm8oJ2ZvdW5kIHVzZXIgd2l0aCB0aGF0IGVtYWlsOiAnICsgdWlkKTtcblx0ICAgIFx0XHRcdHJldHVybiB1aWQ7XG5cdCAgICBcdFx0fSlcblx0ICAgIFx0XHQudGhlbihmdW5jdGlvbih1aWQpIHtcblx0ICAgIFx0XHRcdC8vdXNlIHRoYXQgdWlkIHRvIHJlZ2lzdGVyIHRoZSB1c2VyXG5cdCAgICBcdFx0XHQvL2FkZCB0aGlzIHBlcnNvbiB0byB0aGUgaG9zdCdzIGd1ZXN0IGxpc3Rcblx0XHQgICAgXHRcdGludml0YXRpb25NYW5hZ2VyLmFkZEd1ZXN0VG9Ib3N0R3Vlc3RMaXN0KHZtLnRlbXBHdWVzdC5uYW1lLCB1bmRlZmluZWQsIHVpZCwgJHJvdXRlUGFyYW1zLmV2ZW50SWQsICRyb3V0ZVBhcmFtcy51aWQpXG5cdFx0ICAgIFx0XHQudGhlbigpXG5cdFx0ICAgIFx0XHQuY2F0Y2goKVxuXHQgICAgXHRcdH0pXG5cdCAgICBcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0XHQvL2FkZCB0aGlzIGV2ZW50IHRvIHRoZSB1c2VycycgcGVuZGluZyBsaXN0XG5cdCAgICBcdFx0XHRpbnZpdGF0aW9uTWFuYWdlci51cGRhdGVQZW5kaW5nRXZlbnRzTGlzdEZvclVzZXIoKVxuXHQgICAgXHRcdH0pXG5cdCAgICBcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0XHQvL3JlbW92ZSB0aGUgJ3VwZGF0ZWQnIGZpZWxkIGlmIG5lZWQgYmVcblx0ICAgIFx0XHR9KVxuXHQgICAgXHRcdC5jYXRjaChmdW5jdGlvbihlcnJvck1lc3NhZ2UpIHtcblx0ICAgIFx0XHRcdC8vYXNzdW1pbmcgbm8gdWlkIHdhcyBmb3VuZCBqdXN0IHVzZSB0aGUgZW1haWxcblx0ICAgIFx0XHRcdCRsb2cuaW5mbyhlcnJvck1lc3NhZ2UpO1xuXHQgICAgXHRcdFx0Ly9hZGQgdGhpcyBwZXJzb24gdG8gdGhlIGhvc3QncyBndWVzdCBsaXN0XG5cdFx0XHQgICAgXHRpbnZpdGF0aW9uTWFuYWdlci5hZGRHdWVzdFRvSG9zdEd1ZXN0TGlzdCh2bS50ZW1wR3Vlc3QubmFtZSwgdm0udGVtcEd1ZXN0LmVtYWlsLCB1bmRlZmluZWQsICRyb3V0ZVBhcmFtcy5ldmVudElkLCAkcm91dGVQYXJhbXMudWlkKVxuXHRcdFx0ICAgIFx0LnRoZW4oZnVuY3Rpb24ocG9zaXRpdmVSZXN1bHQpIHtcblx0XHRcdCAgICBcdFx0JGxvZy5pbmZvKCdnb3QgdGhpcyByZXN1bHQ6ICcgKyBwb3NpdGl2ZVJlc3VsdCk7XG5cdFx0XHQgICAgXHR9KVxuXHRcdFx0ICAgIFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgXHRcdC8vYWRkIHRoaXMgZXZlbnQgdG8gdGhlIGd1ZXN0J3MgcGVuZGluZyBsaXN0XG5cdFx0XHQgICAgXHRcdGludml0YXRpb25NYW5hZ2VyLnVwZGF0ZVBlbmRpbmdFdmVudHNMaXN0Rm9yR3Vlc3QoJHJvdXRlUGFyYW1zLmV2ZW50SWQpXG5cdFx0XHQgICAgXHR9KVxuXHRcdFx0ICAgIFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0XHQvL3JlbW92ZSB0aGUgJ3VwZGF0ZWQnIGZpZWxkIGlmIG5lZWQgYmVcblx0ICAgIFx0XHRcdH0pXG5cdFx0XHQgICAgXHQuY2F0Y2goZnVuY3Rpb24obmVnYXRpdmVSZXN1bHQpIHtcblx0XHRcdCAgICBcdFx0JGxvZy5pbmZvKCdnb3QgdGhpcyByZXN1bHQ6ICcgKyBwb3NpdGl2ZVJlc3VsdCk7XG5cdFx0XHQgICAgXHR9KVxuXG5cdCAgICBcdFx0fSlcblx0ICAgIFx0XHRcblx0ICAgIFx0fVxuXHQgICAgXHRcblx0ICAgIH1cblxuXHRcdC8vYWN0aW9uc1xuXHRcdGluaXQoKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogSG9zdGVkRXZlbnRzTGlzdC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIGRpc3BsYXlzIGEgbGlzdCBvZiBhbGwgdGhlIGV2ZW50cyB0aGUgY3VycmVudCB1c2VyIGlzIGhvc3RpbmcuXG4qIEBleGFtcGxlIDxob3N0ZWQtZXZlbnRzLWxpc3Q+PC9ob3N0ZWQtZXZlbnRzLWxpc3Q+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcblx0LmRpcmVjdGl2ZSgnaG9zdGVkRXZlbnRzTGlzdCcsIGhvc3RlZEV2ZW50c0xpc3QpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGhvc3RlZEV2ZW50c0xpc3QoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvZGlyZWN0aXZlcy9ob3N0ZWRFdmVudHNMaXN0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGhvc3RlZEV2ZW50czogJz0nLFxuXHRcdFx0dXNlcklkOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGhvc3RlZEV2ZW50c0xpc3RDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgaG9zdGVkRXZlbnRzTGlzdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICd0cmFmZmljVmFsZXQnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBob3N0ZWRFdmVudHNMaXN0Q29udHJvbGxlcigkbG9nLCB0cmFmZmljVmFsZXQpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vbG9jYWwgdmFyaWFibGVzXG5cdCAgICB2YXIgaG9zdGVkRXZlbnRzU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXG5cdCAgICAvL3ZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdCAgICB2bS5ndWVzdHNBcmVJbnZpdGVkID0gZmFsc2U7XG5cblx0ICAgIC8vbG9jYWwgbWV0aG9kc1xuXHQgICAgZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gY291bnRHdWVzdHMobGlzdCkge1xuXHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHR2YXIgY291bnRlciA9IDA7XG5cblx0XHRcdC8vaWYgd2UncmUgY291bnRpbmcsIHRoZW4gdGhlcmUncyBhIGxpc3QsIHNvIHRocm93IHRoZSBmbGFnXG5cdFx0XHR2bS5ndWVzdHNBcmVJbnZpdGVkID0gdHJ1ZTtcblxuXHRcdFx0T2JqZWN0LmtleXNbbGlzdF0uZm9yRWFjaChmdW5jdGlvbihndWVzdCkge1xuXHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHR9KVxuXG5cdFx0XHRyZXR1cm4gY291bnRlcjtcblx0XHR9XG5cblx0XHQvL3ZpZXcgbW9kZWwgbWV0aG9kc1xuXHRcdHZtLmZvcm1hdERhdGUgPSBmdW5jdGlvbih1bml4VGltZSkge1xuXHRcdFx0Ly9yZWZvcm1hdCB0aGUgdGltZVxuXHRcdFx0JGxvZy5pbmZvKCdnb3QgdGhpc3QgdGltZTogJyArIHVuaXhUaW1lKTtcblx0XHRcdHJldHVybiB1bml4VGltZVRvRGF0ZVRpbWUodW5peFRpbWUpO1xuXHRcdH1cblxuXHRcdHZtLmd1ZXN0c0F0dGVuZGluZyA9IGZ1bmN0aW9uKGd1ZXN0TGlzdCkge1xuXHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoZ3Vlc3RMaXN0KSkge1xuXHRcdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChndWVzdExpc3RbJ2F0dGVuZGluZyddKSkgcmV0dXJuIGNvdW50R3Vlc3RzKGd1ZXN0TGlzdFsnYXR0ZW5kaW5nJ10pO1xuXHRcdFx0XHRlbHNlIHJldHVybiAwO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSByZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2bS5ndWVzdHNJbnZpdGVkID0gZnVuY3Rpb24oZ3Vlc3RMaXN0KSB7XG5cdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChndWVzdExpc3QpKSB7XG5cdFx0XHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdFx0dmFyIGd1ZXN0Q291bnQgPSB7IGF0dGVuZGluZzogMCwgcGVuZGluZzogMCwgZGVjbGluZWQ6IDAgfTtcblxuXHRcdFx0XHQvL2xvY2FsIG1ldGhvZHNcblx0XHRcdFx0ZnVuY3Rpb24gdG90YWxHdWVzdENvdW50KCkge1xuXHRcdFx0XHRcdHJldHVybiBndWVzdENvdW50LmF0dGVuZGluZyArIGd1ZXN0Q291bnQucGVuZGluZyArIGd1ZXN0Q291bnQuZGVjbGluZWQ7XG5cdFx0XHRcdH0gXG5cblx0XHRcdFx0Ly9jaGVjayB2YWx1ZXNcblx0XHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoZ3Vlc3RMaXN0WydhdHRlbmRpbmcnXSkpIGd1ZXN0Q291bnQuYXR0ZW5kaW5nID0gY291bnRHdWVzdHMoZ3Vlc3RMaXN0WydhdHRlbmRpbmcnXSk7XG5cdFx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGd1ZXN0TGlzdFsncGVuZGluZyddKSkgZ3Vlc3RDb3VudC5wZW5kaW5nID0gY291bnRHdWVzdHMoZ3Vlc3RMaXN0WydwZW5kaW5nJ10pO1xuXHRcdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChndWVzdExpc3RbJ2RlY2xpbmVkJ10pKSBndWVzdENvdW50LmRlY2xpbmVkID0gY291bnRHdWVzdHMoZ3Vlc3RMaXN0WydkZWNsaW5lZCddKTtcblxuXHRcdFx0XHRyZXR1cm4gdG90YWxHdWVzdENvdW50KCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZtLnBlcmNlbnRhZ2VBdHRlbmRpbmcgPSBmdW5jdGlvbihndWVzdExpc3QpIHtcblx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGd1ZXN0TGlzdCkpIHtcblx0XHRcdFx0cmV0dXJuIChndWVzdHNBdHRlbmRpbmcoZ3Vlc3RsaXN0KSAvIGd1ZXN0c0ludml0ZWQoZ3Vlc3RMaXN0KSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZtLmV2ZW50Q2xpY2tlZCA9IGZ1bmN0aW9uKGV2ZW50SUQpIHtcblx0XHRcdC8vcmVkaXJlY3QgdG8gdGhlIGV2ZW50IHBhZ2Vcblx0XHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86IC9ldmVudC8nICsgZXZlbnRJRCArICcvJyArIHZtLmhvc3RlZEV2ZW50c1tldmVudElEXS5ob3N0LnVpZCArICcvJyArIHZtLnVzZXJJZCk7XG5cdFx0XHRob3N0ZWRFdmVudHNTaGVycGEucmVkaXJlY3RUbygnL2V2ZW50JywgZXZlbnRJRCwgdm0uaG9zdGVkRXZlbnRzW2V2ZW50SURdLmhvc3QudWlkLCB2bS51c2VySWQpO1xuXHRcdH1cblxuXHRcdC8vYWN0aW9uc1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBIb3N0ZWRFdmVudHNQcm9ncmVzc0Jhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIGRpc3BsYXlzIGEgdXNlcnMgcHJvZ3Jlc3MgdGhyb3VnaCB0aGUgZXZlbnRzIHBhZ2UuXG4qIEBleGFtcGxlIDxob3N0ZWQtZXZlbnRzLXByb2dyZXNzLWJhcj48L2hvc3RlZC1ldmVudHMtcHJvZ3Jlc3MtYmFyPlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG5cdC5kaXJlY3RpdmUoJ3Byb2dyZXNzQmFyJywgcHJvZ3Jlc3NCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHByb2dyZXNzQmFyKCkge1xucmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICBzY29wZToge1xuICAgICAgICBjdXJWYWw6ICdAJyxcbiAgICAgICAgbWF4VmFsOiAnQCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPSdwcm9ncmVzcy1iYXInPlwiK1xuICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdwcm9ncmVzcy1iYXItYmFyJz50ZXN0aW5nPC9kaXY+XCIrXG4gICAgICAgICAgICAgICAgXCI8L2Rpdj5cIiwgICAgXG5cbiAgICAgIGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVQcm9ncmVzcygpIHtcbiAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICgkc2NvcGUubWF4VmFsKSB7XG4gICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWluKCRzY29wZS5jdXJWYWwsICRzY29wZS5tYXhWYWwpIC8gJHNjb3BlLm1heFZhbCAqIGVsZW1lbnQuZmluZCgnLnByb2dyZXNzLWJhcicpLndpZHRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGVsZW1lbnQuZmluZCgnLnByb2dyZXNzLWJhci1iYXInKS5jc3MoJ3dpZHRoJywgcHJvZ3Jlc3MpOyAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnY3VyVmFsJywgdXBkYXRlUHJvZ3Jlc3MpO1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCdtYXhWYWwnLCB1cGRhdGVQcm9ncmVzcyk7ICAgICAgICBcbiAgICAgIH1cbiAgICB9OyAgXG4gfTtcbi8qIEhvc3RlZEd1ZXN0TGlzdC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIGRpc3BsYXlzIGEgbGlzdCBvZiBhbGwgZ3Vlc3RzIGludml0ZWQgdG8gYW4gZXZlbnQgdGhpcyB1c2VyIGlzIGhvc3RpbmcuXG4qIEBleGFtcGxlIDxob3N0ZWQtZ3Vlc3QtbGlzdD48L2hvc3RlZC1ndWVzdC1saXN0PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG5cdC5kaXJlY3RpdmUoJ2hvc3RlZEd1ZXN0TGlzdCcsIGhvc3RlZEd1ZXN0TGlzdCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gaG9zdGVkR3Vlc3RMaXN0KCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2RpcmVjdGl2ZXMvaG9zdGVkR3Vlc3RMaXN0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGd1ZXN0TGlzdDogJz0nLFxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogaG9zdGVkR3Vlc3RMaXN0Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXHRcdHNjb3BlLiR3YXRjaCgnZ3Vlc3RMaXN0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRzY29wZS4kYXBwbHk7XG5cdFx0fSk7XG4gICAgfVxuXG4gICAgaG9zdGVkR3Vlc3RMaXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICd1c2VyRGF0YSddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGhvc3RlZEd1ZXN0TGlzdENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCB1c2VyRGF0YSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy9sb2NhbCB2YXJpYWJsZXNcblx0ICAgIHZtLmlzQUd1ZXN0TGlzdCA9IGZhbHNlO1xuXG5cdCAgICAvL2xvY2FsIG1ldGhvZHNcblx0ICAgIGZ1bmN0aW9uIHRoZXJlSXNBR3Vlc3RMaXN0KCkge1xuXHQgICAgXHQvL2NoZWNrIGZvciBhIGd1ZXN0TGlzdCBvYmplY3Rcblx0ICAgIFx0aWYoYW5ndWxhci5pc0RlZmluZWQodm0uZ3Vlc3RMaXN0KSAmJiB2bS5ndWVzdExpc3QgIT0gJycpIHtcblx0ICAgIFx0XHR2bS5pc0FHdWVzdExpc3QgPSB0cnVlO1xuXHQgICAgXHRcdHJldHVybiB0cnVlO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdHZtLmlzQUd1ZXN0TGlzdCA9IGZhbHNlO1xuXHQgICAgXHRcdHJldHVybiBmYWxzZTtcblx0ICAgIFx0fVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBpbml0KCkge1xuXHQgICAgXHQvL2xvY2FsIHZhcmlhYmxlc1xuXHQgICAgXHR2YXIgbGlzdENvbGxlY3RvciA9IHVzZXJEYXRhO1xuXG5cdCAgICBcdC8vaWYgdGhlcmUgaXNuJ3QgYSBndWVzdCBsaXN0LCBnbyBvdXQgdG8gdGhlIGRiIHRvIGdldCBpdFxuXG5cdFx0XHRpZighdGhlcmVJc0FHdWVzdExpc3QoKSkge1xuXHRcdFx0XHQkbG9nLmluZm8oJ2dvaW5nIGFmdGVyIHRoZSBsaXN0Jyk7XG5cdFx0XHRcdGxpc3RDb2xsZWN0b3IuZ2V0RXZlbnRHdWVzdExpc3QoJHJvdXRlUGFyYW1zLnVpZCwgJHJvdXRlUGFyYW1zLmV2ZW50SWQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJldHVybmVkTGlzdCkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnZ290IHRoZSBsaXN0Jyk7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKHJldHVybmVkTGlzdCk7XG5cdFx0XHRcdFx0dm0uZ3Vlc3RMaXN0ID0gcmV0dXJuZWRMaXN0O1xuXHRcdFx0XHRcdGlmKGFuZ3VsYXIuaXNPYmplY3QocmV0dXJuZWRMaXN0KSkgdm0uaXNBR3Vlc3RMaXN0ID0gdHJ1ZTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7IFxuXHRcdFx0XHRcdCRsb2cuaW5mbygnVGhlcmUgd2FzIGFuIGVycm9yOiAnKyBlcnJvcik7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdCAgICB9XG5cdCAgICAvL3ZtIG1ldGhvZHNcblxuXHRcdC8vYWN0aW9uc1xuXHRcdGluaXQoKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuXHQuZGlyZWN0aXZlKCd0b29sQmFyJywgdG9vbEJhcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdG9vbEJhcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICcuLi92aWV3cy9kaXJlY3RpdmVzL3Rvb2xCYXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogVG9vbEJhckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBUb29sQmFyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJ2JhY2tlbmRTZXJ2aWNlcyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFRvb2xCYXJDb250cm9sbGVyKCRsb2csIGJhY2tlbmRTZXJ2aWNlcykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy9sb2NhbCBjb250cm9sZXIgdmFyaWFibGVzXG5cdCAgICB2YXIgZmJDb25uZWN0ID0gYmFja2VuZFNlcnZpY2VzO1xuXG5cdCAgICAvL2xvY2FsIHZpZXcgdmFyaWFibGVzXG5cdFx0ZmJDb25uZWN0LmNoZWNrTG9naW5TdGF0dXMoKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHN0YXR1cykge1xuXHRcdFx0dm0ubG9nZ2VkSW4gPSBzdGF0dXM7XG5cdFx0fSlcblx0XHQuY2F0Y2goKVxuXG5cdFx0dm0uY2xpY2tlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0JGxvZy5pbmZvKCdidXR0b24gY2xpY2tlZCcpO1xuXHRcdH1cblxuXHRcdC8vYWN0aW9uc1xuXHRcdFxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIEFkZEFHdWVzdC5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIGRpc3BsYXlzIGEgbGlzdCBvZiBhbGwgZ3Vlc3RzIGludml0ZWQgdG8gYW4gZXZlbnQgdGhpcyB1c2VyIGlzIGhvc3RpbmcuXG4qIEBleGFtcGxlIDxhZGQtYS1ndWVzdD48L2FkZC1hLWd1ZXN0PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcpXG5cdC5kaXJlY3RpdmUoJ2FkZEFHdWVzdCcsIGFkZEFHdWVzdCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYWRkQUd1ZXN0KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICcuLi92aWV3cy9kaXJlY3RpdmVzL2FkZEFHdWVzdC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBhZGRBR3Vlc3RDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgYWRkQUd1ZXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICd2YWxpZGF0aW9uJywgJ3VzZXJEYXRhJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gYWRkQUd1ZXN0Q29udHJvbGxlcigkbG9nLCAkcm91dGVQYXJhbXMsIHZhbGlkYXRpb24sIHVzZXJEYXRhKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdmFyIGVtYWlsQ2hlY2tlciA9IHZhbGlkYXRpb247XG5cdCAgICB2YXIgaW52aXRhdGlvbk1hbmFnZXIgPSB1c2VyRGF0YTtcblxuXHQgICAgLy9sb2NhbCB2YXJpYWJsZXNcblx0ICAgIHZhciBldmVudERldGFpbHMgPSB7fTtcblxuXHQgICAgLy92bSB2YXJpYWJsZXNcblx0ICAgIHZtLnRlbXBHdWVzdCA9IHtcblx0ICAgIFx0bmFtZTogJycsXG5cdCAgICBcdGVtYWlsOiAnJ1xuXHQgICAgfVxuXHQgICAgdm0udmFsaWRhdGlvbnMgPSB7XG5cdCAgICBcdG5hbWU6IHtcblx0ICAgIFx0XHRhZGRyZXNzZWQ6IGZhbHNlLFxuXHQgICAgXHRcdHZhbGlkOiBmYWxzZSxcblx0ICAgIFx0XHRlcnJvck1lc3NhZ2U6ICcnXG5cdCAgICBcdH0sXG5cdCAgICBcdGVtYWlsOiB7XG5cdCAgICBcdFx0YWRkcmVzc2VkOiBmYWxzZSxcblx0ICAgIFx0XHR2YWxpZDogZmFsc2UsXG5cdCAgICBcdFx0ZXJyb3JNZXNzYWdlOiAnJ1xuXHQgICAgXHR9LFxuXHQgICAgXHRpbnZpdGF0aW9uOiB7XG5cdCAgICBcdFx0aXNUaGVIb3N0OiBmYWxzZSxcblx0ICAgIFx0XHRhbHJlYWR5SW52aXRlZDogZmFsc2UsXG5cdCAgICBcdFx0ZXJyb3JNZXNzYWdlOiAnJ1xuXHQgICAgXHR9XG5cdCAgICB9XG5cdCAgICB2bS5pbnZpdGF0aW9uVmFsaWRGb3JTdWJtaXNzaW9uID0gZmFsc2U7XG5cdCAgICB2bS5zdWJtaXNzaW9uQnV0dG9uID0ge1xuXHQgICAgXHRzdHlsZToge1xuXHQgICAgXHRcdGNvbG9yOidyZWQnXG5cdCAgICBcdH0sXG5cdCAgICBcdGNsYXNzOiB7XG5cdCAgICBcdFx0J2NvbC14cy0xMic6IHRydWUsXG5cdCAgICBcdFx0J2NvbC1zbS0xMic6IHRydWUsXG5cdCAgICBcdFx0J2J0bic6IHRydWUsXG5cdCAgICBcdFx0J2J0bi13YXJuaW5nJzogdHJ1ZSxcblx0ICAgIFx0XHQnYnRuLXN1Y2Nlc3MnOiBmYWxzZVxuXHQgICAgXHR9LFxuXHQgICAgXHRtZXNzYWdlOiAnQWRkcmVzcyBJbnZpdGF0aW9uLi4uJ1xuXHQgICAgfVxuXHQgICAgLy9sb2NhbCBtZXRob2RzXG5cdCAgICBmdW5jdGlvbiB2YWxpZGF0ZUludml0YXRpb24oKSB7XG5cdCAgICBcdC8vY2hlY2sgaWYgYm90aCBpbnB1dHMgYXJlIHZhbGlkXG5cdCAgICBcdGlmKHZtLnZhbGlkYXRpb25zLm5hbWUudmFsaWQgJiYgdm0udmFsaWRhdGlvbnMuZW1haWwudmFsaWQpIHtcblx0ICAgIFx0XHQkbG9nLmluZm8oJ3JlYWR5IHRvIHN1Ym1pdCcpO1xuXHQgICAgXHRcdC8vc2V0IHRoZSB2YWxpZGl0eSBmbGFnXG5cdCAgICBcdFx0dm0uaW52aXRhdGlvblZhbGlkRm9yU3VibWlzc2lvbiA9IHRydWU7XG5cdCAgICBcdFx0Ly91cGRhdGUgdGhlIHN1Ym1pc3Npb24gYnV0dG9uXG5cdCAgICBcdFx0dm0uc3VibWlzc2lvbkJ1dHRvbi5jbGFzc1snYnRuLXdhcm5pbmcnXSA9IGZhbHNlO1xuXHQgICAgXHRcdHZtLnN1Ym1pc3Npb25CdXR0b24uY2xhc3NbJ2J0bi1zdWNjZXNzJ10gPSB0cnVlO1xuXHQgICAgXHRcdHZtLnN1Ym1pc3Npb25CdXR0b24ubWVzc2FnZT0nSW52aXRlIEd1ZXN0Jztcblx0ICAgIFx0fSBlbHNlIHtcblx0ICAgIFx0XHQkbG9nLmluZm8oJ25vdCByZWFkeSB0byBzdWJtaXQnKTtcblx0ICAgIFx0XHQvL3NldCB0aGUgdmFsaWRpdHkgZmxhZ1xuXHQgICAgXHRcdHZtLmludml0YXRpb25WYWxpZEZvclN1Ym1pc3Npb24gPSBmYWxzZTtcblx0ICAgIFx0XHQvL3VwZGF0ZSB0aGUgc3VibWlzc2lvbiBidXR0b25cblx0ICAgIFx0XHR2bS5zdWJtaXNzaW9uQnV0dG9uLmNsYXNzWydidG4td2FybmluZyddID0gdHJ1ZTtcblx0ICAgIFx0XHR2bS5zdWJtaXNzaW9uQnV0dG9uLmNsYXNzWydidG4tc3VjY2VzcyddID0gZmFsc2U7XG5cdCAgICBcdFx0dm0uc3VibWlzc2lvbkJ1dHRvbi5tZXNzYWdlPSdBZGRyZXNzIEludml0YXRpb24uLi4nO1xuXHQgICAgXHR9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGluaXQoKSB7XG5cdCAgICBcdC8vbG9hZCB0aGUgZXZlbnQgZm9yIHJlZmVyZW5jZVxuXHQgICAgXHRpZihhbmd1bGFyLmlzVW5kZWZpbmVkKGludml0YXRpb25NYW5hZ2VyLmdldE9uZVVzZXJFdmVudExvY2FsbHkoJ2hvc3RpbmcnLCAkcm91dGVQYXJhbXMuZXZlbnRJZCkpKSB7XG5cdCAgICBcdFx0Ly9pZiB0aGlzIHBhZ2Ugd2FzIGxvYWRlZCBiZWZvcmUgdGhlIG1vZGVsIGdldCB0aGUgZXZlbnRcblx0ICAgIFx0XHRpbnZpdGF0aW9uTWFuYWdlci5nZXRSZW1vdGVFdmVudHNGb3JMb2NhbCgpXG5cdFx0ICAgIFx0LnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0ICAgIFx0XHQvL3doZW4gdGhlIGV2ZW50IGhhcyBiZWVuIGxvYWRlZFxuXHRcdCAgICBcdFx0ZXZlbnREZXRhaWxzID0gaW52aXRhdGlvbk1hbmFnZXIuZ2V0T25lVXNlckV2ZW50TG9jYWxseSgnaG9zdGluZycsICRyb3V0ZVBhcmFtcy5ldmVudElkKTtcblxuXHRcdCAgICBcdH0pXG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdFx0Ly9qdXN0IGdldCB0aGUgbW9kZWwgbG9jYWxseVxuXHQgICAgXHRcdGV2ZW50RGV0YWlscyA9IGludml0YXRpb25NYW5hZ2VyLmdldE9uZVVzZXJFdmVudExvY2FsbHkoJ2hvc3RpbmcnLCAkcm91dGVQYXJhbXMuZXZlbnRJZCk7XG5cdCAgICBcdH1cblx0ICAgIFx0ICBcdFxuXHQgICAgfVxuXG5cdCAgICAvL3ZtIG1ldGhvZHNcblx0ICAgIHZtLnZhbGlkYXRlTmFtZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQvL3RoaXMgZmllbGQgaXMgYmVpbmcgZWRpdGVkLCB0aHJvdyBmbGFnXG5cdCAgICBcdHZtLnZhbGlkYXRpb25zLm5hbWUuYWRkcmVzc2VkID0gdHJ1ZTtcblxuXHQgICAgXHQvL2NoZWNrIGZvciB2YWx1ZVxuXHQgICAgXHRpZihhbmd1bGFyLmlzRGVmaW5lZCh2bS50ZW1wR3Vlc3QubmFtZSkgJiYgdm0udGVtcEd1ZXN0Lm5hbWUgIT0gJycpIHtcblx0ICAgIFx0XHR2bS52YWxpZGF0aW9ucy5uYW1lLnZhbGlkID0gdHJ1ZTtcblx0ICAgIFx0XHR2bS52YWxpZGF0aW9ucy5uYW1lLmVycm9yTWVzc2FnZSA9ICcnO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdHZtLnZhbGlkYXRpb25zLm5hbWUudmFsaWQgPSBmYWxzZTtcblx0ICAgIFx0XHR2bS52YWxpZGF0aW9ucy5uYW1lLmVycm9yTWVzc2FnZSA9ICdUaGlzIGd1ZXN0IG5lZWRzIGEgbmFtZSc7XG5cdCAgICBcdH1cblxuXHQgICAgXHR2YWxpZGF0ZUludml0YXRpb24oKTtcblx0ICAgIH1cblx0ICAgIHZtLnZhbGlkYXRlRW1haWwgPSBmdW5jdGlvbigpIHtcblx0ICAgIFx0Ly90aGlzIGZpZWxkIGlzIGJlaW5nIGVkaXRlZCwgdGhyb3cgZmxhZ1xuXHQgICAgXHR2bS52YWxpZGF0aW9ucy5lbWFpbC5hZGRyZXNzZWQgPSB0cnVlO1xuXG5cdCAgICBcdC8vaXMgdGhlcmUgYW4gZW1haWwgdmFsdWU/XG5cdCAgICBcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKHZtLnRlbXBHdWVzdC5lbWFpbCkgJiYgdm0udGVtcEd1ZXN0LmVtYWlsICE9ICcnKSB7XG5cdCAgICBcdFx0XG5cdCAgICBcdFx0Ly9pZiBhbiBlbWFpbCBleGlzdHMgY2hlY2sgaXQncyB2YWxpZGl0eVxuXHQgICAgXHRcdGlmKGFuZ3VsYXIuaXNVbmRlZmluZWQoZW1haWxDaGVja2VyLmVtYWlsKHZtLnRlbXBHdWVzdC5lbWFpbCkpKSB7XG5cdCAgICBcdFx0XHQvL2VtYWlsIGlzIHZhbGlkXG5cdCAgICBcdFx0XHR2bS52YWxpZGF0aW9ucy5lbWFpbC52YWxpZCA9IHRydWU7XG5cdCAgICBcdFx0XHR2bS52YWxpZGF0aW9ucy5lbWFpbC5lcnJvck1lc3NhZ2UgPSAnJztcblx0ICAgIFx0XHR9IGVsc2Uge1xuXHQgICAgXHRcdFx0Ly9nZXQgdGhlIGVycm9yXG5cdCAgICBcdFx0XHR2bS52YWxpZGF0aW9ucy5lbWFpbC52YWxpZCA9IGZhbHNlO1xuXHQgICAgXHRcdFx0dm0udmFsaWRhdGlvbnMuZW1haWwuZXJyb3JNZXNzYWdlID0gZW1haWxDaGVja2VyLmVtYWlsKHZtLnRlbXBHdWVzdC5lbWFpbCk7XG5cdCAgICBcdFx0XHQkbG9nLmluZm8odm0udmFsaWRhdGlvbnMuZW1haWwuZXJyb3JNZXNzYWdlKTtcblx0ICAgIFx0XHR9XG5cblx0ICAgIFx0fSBlbHNlIHtcblx0ICAgIFx0XHQvL3RoZXJlIGlzbid0IGFuIGVtYWlsIHlldFxuXHQgICAgXHRcdHZtLnZhbGlkYXRpb25zLmVtYWlsLnZhbGlkID0gZmFsc2U7XG5cdCAgICBcdFx0dm0udmFsaWRhdGlvbnMuZW1haWwuZXJyb3JNZXNzYWdlID0gJ05vdCBhIHZhbGlkIGVtYWlsJztcblx0ICAgIFx0fVxuXG5cdCAgICBcdHZhbGlkYXRlSW52aXRhdGlvbigpO1xuXHQgICAgfVxuXG5cdCAgICB2bS5zaG93TmFtZUVycm9yID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdGlmKCF2bS52YWxpZGF0aW9ucy5uYW1lLnZhbGlkICYmIHZtLnZhbGlkYXRpb25zLm5hbWUuYWRkcmVzc2VkKSByZXR1cm4gdHJ1ZTtcblx0ICAgIFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cblx0ICAgIHZtLnNob3dFbWFpbEVycm9yID0gZnVuY3Rpb24oKSB7XG5cdCAgICBcdGlmKCF2bS52YWxpZGF0aW9ucy5lbWFpbC52YWxpZCAmJiB2bS52YWxpZGF0aW9ucy5lbWFpbC5hZGRyZXNzZWQpIHJldHVybiB0cnVlO1xuXHQgICAgXHRlbHNlIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgdm0uc2hvd0ludml0YXRpb25FcnJvciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHRpZiggdm0udmFsaWRhdGlvbnMuaW52aXRhdGlvbi5pc1RoZUhvc3QgfHxcblx0ICAgIFx0XHR2bS52YWxpZGF0aW9ucy5pbnZpdGF0aW9uLmFscmVhZHlJbnZpdGVkICkgXG5cdCAgICBcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0ICAgIFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cblx0ICAgIHZtLnN1Ym1pdEd1ZXN0SW52aXRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHQkbG9nLmluZm8oJ3N1Ym1pdHRpbmcgdGhlIGludml0YXRpb24nKTtcblx0ICAgIFx0Ly9pZiB0aGUgcmVxdWlybm1lbnRzIGFyZSBmdWxmaWxsZWQuLi5cblx0ICAgIFx0aWYodm0uaW52aXRhdGlvblZhbGlkRm9yU3VibWlzc2lvbikge1xuXHQgICAgXHRcdC8vbWFrZSBzdXJlIHRoZSBpbnZpdGF0aW9uIGlzIG5vdCB0byB0aGUgY3VycmVudCB1c2VyXG5cdCAgICBcdFx0aWYoaW52aXRhdGlvbk1hbmFnZXIudGhpc0lzVGhlSG9zdEVtYWlsKHZtLnRlbXBHdWVzdC5lbWFpbCwgJHJvdXRlUGFyYW1zLmV2ZW50SWQpKSB7XG5cdFx0XHRcdFx0dm0udmFsaWRhdGlvbnMuaW52aXRhdGlvbi5pc1RoZUhvc3QgPSB0cnVlO1xuXHRcdFx0XHRcdHZtLnZhbGlkYXRpb25zLmludml0YXRpb24uZXJyb3JNZXNzYWdlID0gJ05vIG5lZWQgdG8gaW52aXRlIHRoZSBob3N0Jztcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0ICAgIFx0XHR9IGVsc2Uge1xuXHQgICAgXHRcdFx0dm0udmFsaWRhdGlvbnMuaW52aXRhdGlvbi5pc1RoZUhvc3QgPSBmYWxzZTtcblx0ICAgIFx0XHR9XG5cdCAgICBcdFx0XG5cdFx0ICAgIFx0Ly9tYWtlIHN1cmUgdGhpcyBwZXJzb24gaGFzIG5vdCBhbHJlYWR5IGJlZW4gaW52aXRlZFxuXHRcdCAgICBcdC8qXG5cdFx0ICAgIFx0aWYoaW52aXRhdGlvbk1hbmFnZXIuZ3Vlc3RJbnZpdGVkQWxyZWFkeSh2bS50ZW1wR3Vlc3QuZW1haWwsICRyb3V0ZVBhcmFtcy5ldmVudElkKSkge1xuXHRcdCAgICBcdFx0dm0udmFsaWRhdGlvbnMuaW52aXRhdGlvbi5hbHJlYWR5SW52aXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0dm0udmFsaWRhdGlvbnMuaW52aXRhdGlvbi5lcnJvck1lc3NhZ2UgPSAnVGhpcyBndWVzdCBoYXMgYWxyZWFkeSBiZWVuIGludml0ZWQnO1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHQgICAgXHRcdH0gZWxzZSB7XG5cdCAgICBcdFx0XHR2bS52YWxpZGF0aW9ucy5pbnZpdGF0aW9uLmFscmVhZHlJbnZpdGVkID0gZmFsc2U7XG5cdCAgICBcdFx0fSovXG5cblx0ICAgIFx0XHQvL2lmIHRoaXMgcGVyc29uIGlzIGEgcmVnaXN0ZXJlZCB1c2VyIGdldCB0aGVpciB1c2VyIGlkXG5cdCAgICBcdFx0aW52aXRhdGlvbk1hbmFnZXIuZ2V0VXNlcklkRm9yR3Vlc3Qodm0udGVtcEd1ZXN0LmVtYWlsKVxuXHQgICAgXHRcdC50aGVuKGZ1bmN0aW9uKHVpZCkge1xuXHQgICAgXHRcdFx0JGxvZy5pbmZvKCdmb3VuZCB1c2VyIHdpdGggdGhhdCBlbWFpbDogJyArIHVpZCk7XG5cdCAgICBcdFx0XHRyZXR1cm4gdWlkO1xuXHQgICAgXHRcdH0pXG5cdCAgICBcdFx0LnRoZW4oZnVuY3Rpb24odWlkKSB7XG5cdCAgICBcdFx0XHQvL3VzZSB0aGF0IHVpZCB0byByZWdpc3RlciB0aGUgdXNlclxuXHQgICAgXHRcdFx0Ly9hZGQgdGhpcyBwZXJzb24gdG8gdGhlIGhvc3QncyBndWVzdCBsaXN0XG5cdFx0ICAgIFx0XHRpbnZpdGF0aW9uTWFuYWdlci5hZGRHdWVzdFRvSG9zdEd1ZXN0TGlzdCh2bS50ZW1wR3Vlc3QubmFtZSwgdW5kZWZpbmVkLCB1aWQsICRyb3V0ZVBhcmFtcy5ldmVudElkLCAkcm91dGVQYXJhbXMudWlkKVxuXHRcdCAgICBcdFx0LnRoZW4oKVxuXHRcdCAgICBcdFx0LmNhdGNoKClcblx0ICAgIFx0XHR9KVxuXHQgICAgXHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdFx0Ly9hZGQgdGhpcyBldmVudCB0byB0aGUgdXNlcnMnIHBlbmRpbmcgbGlzdFxuXHQgICAgXHRcdFx0aW52aXRhdGlvbk1hbmFnZXIudXBkYXRlUGVuZGluZ0V2ZW50c0xpc3RGb3JVc2VyKClcblx0ICAgIFx0XHR9KVxuXHQgICAgXHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdFx0Ly9yZW1vdmUgdGhlICd1cGRhdGVkJyBmaWVsZCBpZiBuZWVkIGJlXG5cdCAgICBcdFx0fSlcblx0ICAgIFx0XHQuY2F0Y2goZnVuY3Rpb24oZXJyb3JNZXNzYWdlKSB7XG5cdCAgICBcdFx0XHQvL2Fzc3VtaW5nIG5vIHVpZCB3YXMgZm91bmQganVzdCB1c2UgdGhlIGVtYWlsXG5cdCAgICBcdFx0XHQkbG9nLmluZm8oZXJyb3JNZXNzYWdlKTtcblx0ICAgIFx0XHRcdC8vYWRkIHRoaXMgcGVyc29uIHRvIHRoZSBob3N0J3MgZ3Vlc3QgbGlzdFxuXHRcdFx0ICAgIFx0aW52aXRhdGlvbk1hbmFnZXIuYWRkR3Vlc3RUb0hvc3RHdWVzdExpc3Qodm0udGVtcEd1ZXN0Lm5hbWUsIHZtLnRlbXBHdWVzdC5lbWFpbCwgdW5kZWZpbmVkLCAkcm91dGVQYXJhbXMuZXZlbnRJZCwgJHJvdXRlUGFyYW1zLnVpZClcblx0XHRcdCAgICBcdC50aGVuKGZ1bmN0aW9uKHBvc2l0aXZlUmVzdWx0KSB7XG5cdFx0XHQgICAgXHRcdCRsb2cuaW5mbygnZ290IHRoaXMgcmVzdWx0OiAnICsgcG9zaXRpdmVSZXN1bHQpO1xuXHRcdFx0ICAgIFx0fSlcblx0XHRcdCAgICBcdC50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0ICAgIFx0XHQvL2FkZCB0aGlzIGV2ZW50IHRvIHRoZSBndWVzdCdzIHBlbmRpbmcgbGlzdFxuXHRcdFx0ICAgIFx0XHRpbnZpdGF0aW9uTWFuYWdlci51cGRhdGVQZW5kaW5nRXZlbnRzTGlzdEZvckd1ZXN0KCRyb3V0ZVBhcmFtcy5ldmVudElkKVxuXHRcdFx0ICAgIFx0fSlcblx0XHRcdCAgICBcdC50aGVuKGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdFx0Ly9yZW1vdmUgdGhlICd1cGRhdGVkJyBmaWVsZCBpZiBuZWVkIGJlXG5cdCAgICBcdFx0XHR9KVxuXHRcdFx0ICAgIFx0LmNhdGNoKGZ1bmN0aW9uKG5lZ2F0aXZlUmVzdWx0KSB7XG5cdFx0XHQgICAgXHRcdCRsb2cuaW5mbygnZ290IHRoaXMgcmVzdWx0OiAnICsgcG9zaXRpdmVSZXN1bHQpO1xuXHRcdFx0ICAgIFx0fSlcblxuXHQgICAgXHRcdH0pXG5cdCAgICBcdFx0XG5cdCAgICBcdH1cblx0ICAgIFx0XG5cdCAgICB9XG5cblx0XHQvL2FjdGlvbnNcblx0XHRpbml0KCk7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBIb3N0ZWRFdmVudHNMaXN0LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgZGlzcGxheXMgYSBsaXN0IG9mIGFsbCB0aGUgZXZlbnRzIHRoZSBjdXJyZW50IHVzZXIgaXMgaG9zdGluZy5cbiogQGV4YW1wbGUgPGhvc3RlZC1ldmVudHMtbGlzdD48L2hvc3RlZC1ldmVudHMtbGlzdD5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuXHQuZGlyZWN0aXZlKCdob3N0ZWRFdmVudHNMaXN0JywgaG9zdGVkRXZlbnRzTGlzdCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gaG9zdGVkRXZlbnRzTGlzdCgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAnLi4vdmlld3MvZGlyZWN0aXZlcy9ob3N0ZWRFdmVudHNMaXN0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGhvc3RlZEV2ZW50czogJz0nLFxuXHRcdFx0dXNlcklkOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGhvc3RlZEV2ZW50c0xpc3RDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgaG9zdGVkRXZlbnRzTGlzdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICd0cmFmZmljVmFsZXQnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBob3N0ZWRFdmVudHNMaXN0Q29udHJvbGxlcigkbG9nLCB0cmFmZmljVmFsZXQpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vbG9jYWwgdmFyaWFibGVzXG5cdCAgICB2YXIgaG9zdGVkRXZlbnRzU2hlcnBhID0gdHJhZmZpY1ZhbGV0O1xuXG5cdCAgICAvL3ZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdCAgICB2bS5ndWVzdHNBcmVJbnZpdGVkID0gZmFsc2U7XG5cblx0ICAgIC8vbG9jYWwgbWV0aG9kc1xuXHQgICAgZnVuY3Rpb24gdW5peFRpbWVUb0RhdGVUaW1lKHVuaXhUaW1lKSB7XG5cdFx0XHRyZXR1cm4gbmV3IERhdGUocGFyc2VJbnQodW5peFRpbWUpKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gY291bnRHdWVzdHMobGlzdCkge1xuXHRcdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlXG5cdFx0XHR2YXIgY291bnRlciA9IDA7XG5cblx0XHRcdC8vaWYgd2UncmUgY291bnRpbmcsIHRoZW4gdGhlcmUncyBhIGxpc3QsIHNvIHRocm93IHRoZSBmbGFnXG5cdFx0XHR2bS5ndWVzdHNBcmVJbnZpdGVkID0gdHJ1ZTtcblxuXHRcdFx0T2JqZWN0LmtleXNbbGlzdF0uZm9yRWFjaChmdW5jdGlvbihndWVzdCkge1xuXHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHR9KVxuXG5cdFx0XHRyZXR1cm4gY291bnRlcjtcblx0XHR9XG5cblx0XHQvL3ZpZXcgbW9kZWwgbWV0aG9kc1xuXHRcdHZtLmZvcm1hdERhdGUgPSBmdW5jdGlvbih1bml4VGltZSkge1xuXHRcdFx0Ly9yZWZvcm1hdCB0aGUgdGltZVxuXHRcdFx0JGxvZy5pbmZvKCdnb3QgdGhpc3QgdGltZTogJyArIHVuaXhUaW1lKTtcblx0XHRcdHJldHVybiB1bml4VGltZVRvRGF0ZVRpbWUodW5peFRpbWUpO1xuXHRcdH1cblxuXHRcdHZtLmd1ZXN0c0F0dGVuZGluZyA9IGZ1bmN0aW9uKGd1ZXN0TGlzdCkge1xuXHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoZ3Vlc3RMaXN0KSkge1xuXHRcdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChndWVzdExpc3RbJ2F0dGVuZGluZyddKSkgcmV0dXJuIGNvdW50R3Vlc3RzKGd1ZXN0TGlzdFsnYXR0ZW5kaW5nJ10pO1xuXHRcdFx0XHRlbHNlIHJldHVybiAwO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSByZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2bS5ndWVzdHNJbnZpdGVkID0gZnVuY3Rpb24oZ3Vlc3RMaXN0KSB7XG5cdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChndWVzdExpc3QpKSB7XG5cdFx0XHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdFx0dmFyIGd1ZXN0Q291bnQgPSB7IGF0dGVuZGluZzogMCwgcGVuZGluZzogMCwgZGVjbGluZWQ6IDAgfTtcblxuXHRcdFx0XHQvL2xvY2FsIG1ldGhvZHNcblx0XHRcdFx0ZnVuY3Rpb24gdG90YWxHdWVzdENvdW50KCkge1xuXHRcdFx0XHRcdHJldHVybiBndWVzdENvdW50LmF0dGVuZGluZyArIGd1ZXN0Q291bnQucGVuZGluZyArIGd1ZXN0Q291bnQuZGVjbGluZWQ7XG5cdFx0XHRcdH0gXG5cblx0XHRcdFx0Ly9jaGVjayB2YWx1ZXNcblx0XHRcdFx0aWYoYW5ndWxhci5pc0RlZmluZWQoZ3Vlc3RMaXN0WydhdHRlbmRpbmcnXSkpIGd1ZXN0Q291bnQuYXR0ZW5kaW5nID0gY291bnRHdWVzdHMoZ3Vlc3RMaXN0WydhdHRlbmRpbmcnXSk7XG5cdFx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGd1ZXN0TGlzdFsncGVuZGluZyddKSkgZ3Vlc3RDb3VudC5wZW5kaW5nID0gY291bnRHdWVzdHMoZ3Vlc3RMaXN0WydwZW5kaW5nJ10pO1xuXHRcdFx0XHRpZihhbmd1bGFyLmlzRGVmaW5lZChndWVzdExpc3RbJ2RlY2xpbmVkJ10pKSBndWVzdENvdW50LmRlY2xpbmVkID0gY291bnRHdWVzdHMoZ3Vlc3RMaXN0WydkZWNsaW5lZCddKTtcblxuXHRcdFx0XHRyZXR1cm4gdG90YWxHdWVzdENvdW50KCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZtLnBlcmNlbnRhZ2VBdHRlbmRpbmcgPSBmdW5jdGlvbihndWVzdExpc3QpIHtcblx0XHRcdGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGd1ZXN0TGlzdCkpIHtcblx0XHRcdFx0cmV0dXJuIChndWVzdHNBdHRlbmRpbmcoZ3Vlc3RsaXN0KSAvIGd1ZXN0c0ludml0ZWQoZ3Vlc3RMaXN0KSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZtLmV2ZW50Q2xpY2tlZCA9IGZ1bmN0aW9uKGV2ZW50SUQpIHtcblx0XHRcdC8vcmVkaXJlY3QgdG8gdGhlIGV2ZW50IHBhZ2Vcblx0XHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86IC9ldmVudC8nICsgZXZlbnRJRCArICcvJyArIHZtLmhvc3RlZEV2ZW50c1tldmVudElEXS5ob3N0LnVpZCArICcvJyArIHZtLnVzZXJJZCk7XG5cdFx0XHRob3N0ZWRFdmVudHNTaGVycGEucmVkaXJlY3RUbygnL2V2ZW50JywgZXZlbnRJRCwgdm0uaG9zdGVkRXZlbnRzW2V2ZW50SURdLmhvc3QudWlkLCB2bS51c2VySWQpO1xuXHRcdH1cblxuXHRcdC8vYWN0aW9uc1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogSG9zdGVkRXZlbnRzUHJvZ3Jlc3NCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyBkaXNwbGF5cyBhIHVzZXJzIHByb2dyZXNzIHRocm91Z2ggdGhlIGV2ZW50cyBwYWdlLlxuKiBAZXhhbXBsZSA8aG9zdGVkLWV2ZW50cy1wcm9ncmVzcy1iYXI+PC9ob3N0ZWQtZXZlbnRzLXByb2dyZXNzLWJhcj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnbWVldFVwRXZlbnRBcHAnKVxuXHQuZGlyZWN0aXZlKCdwcm9ncmVzc0JhcicsIHByb2dyZXNzQmFyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwcm9ncmVzc0JhcigpIHtcbnJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY3VyVmFsOiAnQCcsXG4gICAgICAgIG1heFZhbDogJ0AnXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz0ncHJvZ3Jlc3MtYmFyJz5cIitcbiAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0ncHJvZ3Jlc3MtYmFyLWJhcic+dGVzdGluZzwvZGl2PlwiK1xuICAgICAgICAgICAgICAgIFwiPC9kaXY+XCIsICAgIFxuXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3MoKSB7XG4gICAgICAgICAgdmFyIHByb2dyZXNzID0gMDtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoJHNjb3BlLm1heFZhbCkge1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbigkc2NvcGUuY3VyVmFsLCAkc2NvcGUubWF4VmFsKSAvICRzY29wZS5tYXhWYWwgKiBlbGVtZW50LmZpbmQoJy5wcm9ncmVzcy1iYXInKS53aWR0aCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBlbGVtZW50LmZpbmQoJy5wcm9ncmVzcy1iYXItYmFyJykuY3NzKCd3aWR0aCcsIHByb2dyZXNzKTsgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2N1clZhbCcsIHVwZGF0ZVByb2dyZXNzKTtcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnbWF4VmFsJywgdXBkYXRlUHJvZ3Jlc3MpOyAgICAgICAgXG4gICAgICB9XG4gICAgfTsgIFxuIH07IiwiLyogSG9zdGVkR3Vlc3RMaXN0LmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgZGlzcGxheXMgYSBsaXN0IG9mIGFsbCBndWVzdHMgaW52aXRlZCB0byBhbiBldmVudCB0aGlzIHVzZXIgaXMgaG9zdGluZy5cbiogQGV4YW1wbGUgPGhvc3RlZC1ndWVzdC1saXN0PjwvaG9zdGVkLWd1ZXN0LWxpc3Q+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcblx0LmRpcmVjdGl2ZSgnaG9zdGVkR3Vlc3RMaXN0JywgaG9zdGVkR3Vlc3RMaXN0KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBob3N0ZWRHdWVzdExpc3QoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2RpcmVjdGl2ZXMvaG9zdGVkR3Vlc3RMaXN0LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGd1ZXN0TGlzdDogJz0nLFxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogaG9zdGVkR3Vlc3RMaXN0Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXHRcdHNjb3BlLiR3YXRjaCgnZ3Vlc3RMaXN0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRzY29wZS4kYXBwbHk7XG5cdFx0fSk7XG4gICAgfVxuXG4gICAgaG9zdGVkR3Vlc3RMaXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcycsICd1c2VyRGF0YSddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGhvc3RlZEd1ZXN0TGlzdENvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCB1c2VyRGF0YSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy9sb2NhbCB2YXJpYWJsZXNcblx0ICAgIHZtLmlzQUd1ZXN0TGlzdCA9IGZhbHNlO1xuXG5cdCAgICAvL2xvY2FsIG1ldGhvZHNcblx0ICAgIGZ1bmN0aW9uIHRoZXJlSXNBR3Vlc3RMaXN0KCkge1xuXHQgICAgXHQvL2NoZWNrIGZvciBhIGd1ZXN0TGlzdCBvYmplY3Rcblx0ICAgIFx0aWYoYW5ndWxhci5pc0RlZmluZWQodm0uZ3Vlc3RMaXN0KSAmJiB2bS5ndWVzdExpc3QgIT0gJycpIHtcblx0ICAgIFx0XHR2bS5pc0FHdWVzdExpc3QgPSB0cnVlO1xuXHQgICAgXHRcdHJldHVybiB0cnVlO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdHZtLmlzQUd1ZXN0TGlzdCA9IGZhbHNlO1xuXHQgICAgXHRcdHJldHVybiBmYWxzZTtcblx0ICAgIFx0fVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBpbml0KCkge1xuXHQgICAgXHQvL2xvY2FsIHZhcmlhYmxlc1xuXHQgICAgXHR2YXIgbGlzdENvbGxlY3RvciA9IHVzZXJEYXRhO1xuXG5cdCAgICBcdC8vaWYgdGhlcmUgaXNuJ3QgYSBndWVzdCBsaXN0LCBnbyBvdXQgdG8gdGhlIGRiIHRvIGdldCBpdFxuXG5cdFx0XHRpZighdGhlcmVJc0FHdWVzdExpc3QoKSkge1xuXHRcdFx0XHQkbG9nLmluZm8oJ2dvaW5nIGFmdGVyIHRoZSBsaXN0Jyk7XG5cdFx0XHRcdGxpc3RDb2xsZWN0b3IuZ2V0RXZlbnRHdWVzdExpc3QoJHJvdXRlUGFyYW1zLnVpZCwgJHJvdXRlUGFyYW1zLmV2ZW50SWQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJldHVybmVkTGlzdCkge1xuXHRcdFx0XHRcdCRsb2cuaW5mbygnZ290IHRoZSBsaXN0Jyk7XG5cdFx0XHRcdFx0JGxvZy5pbmZvKHJldHVybmVkTGlzdCk7XG5cdFx0XHRcdFx0dm0uZ3Vlc3RMaXN0ID0gcmV0dXJuZWRMaXN0O1xuXHRcdFx0XHRcdGlmKGFuZ3VsYXIuaXNPYmplY3QocmV0dXJuZWRMaXN0KSkgdm0uaXNBR3Vlc3RMaXN0ID0gdHJ1ZTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7IFxuXHRcdFx0XHRcdCRsb2cuaW5mbygnVGhlcmUgd2FzIGFuIGVycm9yOiAnKyBlcnJvcik7XG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdCAgICB9XG5cdCAgICAvL3ZtIG1ldGhvZHNcblxuXHRcdC8vYWN0aW9uc1xuXHRcdGluaXQoKTtcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ21lZXRVcEV2ZW50QXBwJylcblx0LmRpcmVjdGl2ZSgndG9vbEJhcicsIHRvb2xCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRvb2xCYXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJy4uL3ZpZXdzL2RpcmVjdGl2ZXMvdG9vbEJhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBUb29sQmFyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIFRvb2xCYXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnYmFja2VuZFNlcnZpY2VzJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gVG9vbEJhckNvbnRyb2xsZXIoJGxvZywgYmFja2VuZFNlcnZpY2VzKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvL2xvY2FsIGNvbnRyb2xlciB2YXJpYWJsZXNcblx0ICAgIHZhciBmYkNvbm5lY3QgPSBiYWNrZW5kU2VydmljZXM7XG5cblx0ICAgIC8vbG9jYWwgdmlldyB2YXJpYWJsZXNcblx0XHRmYkNvbm5lY3QuY2hlY2tMb2dpblN0YXR1cygpXG5cdFx0LnRoZW4oZnVuY3Rpb24oc3RhdHVzKSB7XG5cdFx0XHR2bS5sb2dnZWRJbiA9IHN0YXR1cztcblx0XHR9KVxuXHRcdC5jYXRjaCgpXG5cblx0XHR2bS5jbGlja2VkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQkbG9nLmluZm8oJ2J1dHRvbiBjbGlja2VkJyk7XG5cdFx0fVxuXG5cdFx0Ly9hY3Rpb25zXG5cdFx0XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiYW5ndWxhclxuXHQubW9kdWxlKCdtZWV0VXBFdmVudEFwcCcsIFtcblx0XHQnbmdSb3V0ZScsXG5cdFx0J25nVG91Y2gnLFxuXHRcdCdmaXJlYmFzZSdcblx0XSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
