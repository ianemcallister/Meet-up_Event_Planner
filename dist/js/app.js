function AnEventController(e,t){function n(){m.tempDateTime={start:"",end:""},m.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},m.showIfHost=!1,m.hideIfAttending=!0,m.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},u(),d(),m.showIfHost||f()}function s(e){return btoa(e)}function o(e){return atob(e)}function r(e){return Date.parse(e)}function a(){m.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function l(n){e.info("adding them to the registered users list "+n),ref.child("Users").child(n).child("events").child("pending").child(t.uid).child(t.eventId).set({id:t.eventId,eventTimes:{start:m.event.eventTimes.start,end:m.event.eventTimes.end},name:m.event.name,host:t.uid},function(t){t&&e.info("there was an error"+t)}),ref.child("Users").child(n).child("events").child("pending").once("value",function(t){var i=t.val();e.info(t.val()),i.updated?(e.info("deleting updated"),ref.child("Users").child(n).child("events").child("pending").child("updated").remove(function(t){t&&e.info("Deleting failed: "+t.code)})):e.info("nothing to do")},function(t){t&&e.info("The read failed: "+t.code)})}function c(n){e.info("adding them to the UNREGISTERED users list "+n),ref.child("UnregisteredUsers").child(n).child("pending").child(t.uid).child(t.eventId).set({id:t.eventId,host:t.uid,eventTimes:{start:m.event.eventTimes.start,end:m.event.eventTimes.end},name:m.event.name},function(t){t&&e.info("there was an error"+t)})}function u(){var n=ref.getAuth();n.uid==t.hostId?(e.info("is the host"),m.showIfHost=!0):(e.info("not the host"),m.showIfHost=!1)}function d(){m.showIfHost||(e.info("check guest attendance"),userEvents.child("guestList").on("value",function(e){var n=e.val();m.hideIfAttending=!n[t.uid].attending}))}function f(){m.manageSections[1].active=!0,m.manageSections[2].active=!0,m.manageSections[3].active=!0}var m=this;m.tempTime={start:"",end:""},m.userIsHost=!1,m.setTempTime=function(e){"start"==e&&(m.tempDateTime.start=new Date),"end"==e&&(m.tempDateTime.end=new Date)},m.unixTimeToDateTime=function(e){return new Date(parseInt(e))},m.dateTimeToUnixTime=function(e){return Date.parse(e)},m.submit=function(){e.info("submitting the form now!")},m.backToUserEvents=function(){$location.path("/userEvents/"+t.uid+"/"+t.token)},m.eventRedirect=function(n,i){var s=n+"/"+t.uid+"/"+t.token;e.info("redirecting to: "+s),$location.path(s)},m.changeSection=function(t){for(e.info("are we here"),i=1;i<=3;i++)i==t?(m.manageSections[i].active=!0,m.manageSections[i].style["background-color"]="yellow",m.manageSections[i].style.color="black"):(m.manageSections[i].active=!1,m.manageSections[i].style["background-color"]="gray",m.manageSections[i].style.color="white")},m.saveEventTime=function(e,t){m.event.eventTimes||(m.event.eventTimes={start:"",end:""},m.event.eventTimes.start=m.dateTimeToUnixTime(m.tempDateTime.start),m.event.eventTimes.end=m.dateTimeToUnixTime(m.tempDateTime.end)),m.tempDateTime.end<m.tempDateTime.start&&"start"==t&&(m.tempDateTime.end=m.tempDateTime.start),"start"==t&&(m.event.eventTimes.start=m.dateTimeToUnixTime(e)),"end"==t&&(m.event.eventTimes.end=m.dateTimeToUnixTime(e))},m.guestsAreInvited=function(){return!!m.event.guestList},m.validateGuestEmail=function(){if(m.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(m.newGuest.email.address)?(m.newGuest.email.valid=!0,m.newGuest.email.style={color:"green"}):(m.newGuest.email.valid=!1,m.newGuest.email.style={color:""})}},m.isSectionComplete=function(){for(i=0;i<8;i++)e.info(m.requiredInputs[i])},m.saveAndAdvance=function(){m.event.$save().then(function(){e.info("event saved")})["catch"](function(t){e.info("error! "+t)}),m.isSectionComplete(),1==m.manageSections[1].complete&&1==m.manageSections[2].complete&&1==m.manageSections[3].complete?m.eventRedirect("/userEvents",t.uid):m.manageSections[1].active?m.changeSection(2):m.manageSections[2].active?m.changeSection(3):m.manageSections[3].active&&m.changeSection(1)},m.addGuestToHostsList=function(){var n=s(m.newGuest.email.address);if(m.newGuest.name&&m.newGuest.email.valid){if(m.event.guestList)for(var i=0;m.event.guestList[i];){if(m.event.guestList[i].email==o(n))return e.info("This guest is already on the list"),void a();i++}else m.event.guestList={};if(registeredUsers[n]){if(registeredUsers[n]==t.uid)return e.info("tried to register the host"),void a();l(registeredUsers[n]),m.event.guestList[registeredUsers[n]]={attending:!1,status:"pending",name:m.newGuest.name,email:m.newGuest.email.address}}else c(n),m.event.guestList[n]={attending:!1,status:"pending",name:m.newGuest.name,email:m.newGuest.email.address};m.saveEvent(),a()}else e.info("you didn't enter a name and or email")},m.guestWillAttend=function(n){var i=ref.child("Users").child(t.uid).child("events"),s=0,o=!1;if(m.event.guestList[t.uid].attending=n,m.event.guestList[t.uid].status="attending",i.child("pending").on("value",function(o){var r=o.val();e.info(r),e.info(r[t.hostId]),e.info(r[t.hostId][t.eventId]);var a=r[t.hostId][t.eventId];e.info(a);for(invitation in r)s++;e.info("total attending: "+s),n&&i.child("attending").child(t.hostId).child(t.eventId).set(a,function(t){t&&e.info(t)})}),i.child("attending").on("value",function(t){var n=t.val();e.info("this is the attending list"),e.info(n),n.updated&&(o=!0)},function(t){t&&e.info(t)}),2>s){var a=new Date;i.child("pending").update({updated:r(a)},function(t){t&&e.info(t)})}i.child("pending").child(t.hostId).remove(),o&&e.info("removing the updated placeholder"),m.event.$save()},m.updateUpdatedParam=function(){var n=ref.child("Users").child(t.uid).child("events");e.info("updating the param"),n.child("attending").on("value",function(t){e.info(t.val())}),n.child("attending").child("updated").remove()},m.addInvitationToAttending=function(n){var i=ref.child("Users").child(t.uid).child("events"),s=0;i.child("pending").on("value",function(o){var r=o.val(),a=r[t.hostId][t.eventId];e.info(r),e.info(r[t.hostId]),e.info(r[t.hostId][t.eventId]);for(invitation in r)s++;e.info("total pending invitations: "+s),e.info(n),n&&i.child("attending").child(t.hostId).child(t.eventId).set(a,function(t){t&&e.info(t)})})},n()}function GuestEventController(e){e.info("into the GuestEventController")}function HostEventController(e,t,n,i,s,o){function r(e){return new Date(parseInt(e))}function a(e){return Date.parse(e)}function l(e,t){return(a(t)-a(e))/6e4}function c(e){"open"==e?(v.actionBtn.btn["class"]["btn-success"]=!0,v.actionBtn.btn["class"]["btn-warning"]=!1,v.actionBtn.btn.message="Save Event"):"close"==e&&(v.actionBtn.btn["class"]["btn-success"]=!1,v.actionBtn.btn["class"]["btn-warning"]=!0,v.actionBtn.btn.message="Add Info")}function u(e){w+=e,v.progressBar.complete=w,v.progressBar.style.width=w+"%",v.progressBar.message=w+"%",w>99&&c("open"),99>w&&c("close")}function d(){var e=new Date;e.setHours(e.getHours()+Math.round(e.getMinutes()/60)),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),v.tempTime.start=e,v.tempTime.end=e,v.tempTime.duration=l(v.tempTime.start,v.tempTime.end)}function f(){angular.isDefined(v.tempEvent.eventTimes.start)&&(v.tempTime.start=r(v.tempEvent.eventTimes.start),v.tempTime.end=r(v.tempEvent.eventTimes.end))}function m(){if(t.info(p.getActiveEvent()),p.thereIsAnActiveEvent()){t.info("loading the active event");var e=p.getActiveEvent();v.progressBar=e.progressBar,w=e.percentComplete,v.tempEvent=e.event,v.requiredFieldComplete=e.requiredFields,t.info(v.progressBar)}else p.loadAnEventProgressively(n.uid,n.eventId).then(function(e){v.tempEvent=e,f()})["catch"](function(e){t("the error is: "+e)});v.activeSection=parseInt(n.section),d()}var v=this,g=s,p=i,h=o,w=0;v.activeSection=1,v.tempTime={start:"",end:"",duration:""},v.progressBar={complete:v.percentComplete,style:{width:v.percentComplete+"%"},message:v.percentComplete+"%"},v.actionBtn={div:{"class":{"col-xs-6":!0,"col-sm-6":!0}},btn:{"class":{btn:!0,"btn-success":!1,"btn-warning":!0,"pull-right":!0},message:"Add Info"}},v.tempEvent={},v.requiredFieldComplete=h.generateEventRequirnments(),v.formatDuration=function(){v.tempTime.duration=l(v.tempTime.start,v.tempTime.end);var e=Math.floor(v.tempTime.duration/60),t=v.tempTime.duration%60,n=Math.round(t/15)/4;return e+n+" h"},v.validateTime=function(e){v.tempTime.duration>24&&v.settingTempStart();var t={eventStart:v.tempTime.start,eventEnd:v.tempTime.end};angular.isDefined(t[e])&&""!=t[e]&&v.tempTime.duration>0?(0==v.requiredFieldComplete[e].completed&&u(11),v.requiredFieldComplete[e].completed=!0,v.requiredFieldComplete[e].row["class"]["has-success"]=!0,v.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,v.requiredFieldComplete[e].row["class"]["has-error"]=!1):(1==v.requiredFieldComplete[e].completed&&u(-11),v.requiredFieldComplete[e].completed=!1,v.requiredFieldComplete[e].row["class"]["has-success"]=!1,v.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,v.requiredFieldComplete[e].row["class"]["has-error"]=!0)},v.settingTempStart=function(){t.info(a(v.tempTime.end)-a(v.tempTime.start)/864e5),(a(v.tempTime.end)<=a(v.tempTime.start)||a(v.tempTime.end)-a(v.tempTime.start)>864e5)&&(oldStart=a(v.tempTime.start),oldEnd=a(v.tempTime.end),newEnd=oldStart+36e5,v.tempTime.end=r(newEnd))},v.settingTempEnd=function(){v.tempTime.start>v.tempTime.end&&(v.tempTime.start=v.tempTime.end),v.validateTime("eventEnd"),v.tempTime.duration=l(v.tempTime.start,v.tempTime.end)},v.backToUserEvents=function(){w>99&&(p.saveNewHostingEvent("hosting",v.tempEvent),p.setRemoteEventsFromLocal("hosting",v.tempEvent).then(function(e){t.info(e)})["catch"](function(e){t.info(e)})),g.redirectTo("/userEvents",n.uid)},v.sectionBack=function(){var e={event:v.tempEvent,progressBar:v.progressBar,percentComplete:w,requiredFields:v.requiredFieldComplete};p.setActiveEvent(e),targetSection=v.activeSection-1,g.redirectTo("/event/host",n.eventId,n.uid,targetSection)},v.sectionForward=function(){var e={event:v.tempEvent,progressBar:v.progressBar,percentComplete:w,requiredFields:v.requiredFieldComplete};p.setActiveEvent(e),targetSection=v.activeSection+1,g.redirectTo("/event/host",n.eventId,n.uid,targetSection)},v.verifyRequired=function(e,t){angular.isDefined(t)&&""!=t?(0==v.requiredFieldComplete[e].completed&&u(11),v.requiredFieldComplete[e].completed=!0,v.requiredFieldComplete[e].row["class"]["has-success"]=!0,v.requiredFieldComplete[e].row["class"]["has-feedback"]=!0,v.requiredFieldComplete[e].row["class"]["has-error"]=!1):(1==v.requiredFieldComplete[e].completed&&u(-11),v.requiredFieldComplete[e].completed=!1,v.requiredFieldComplete[e].row["class"]["has-success"]=!1,v.requiredFieldComplete[e].row["class"]["has-feedback"]=!1,v.requiredFieldComplete[e].row["class"]["has-error"]=!0)},v.saveEventToDB=function(){w>99&&(p.saveNewHostingEvent("hosting",v.tempEvent),p.setRemoteEventsFromLocal(n.uid,v.tempEvent).then(function(e){t.info(e)})["catch"](function(e){t.info(e)}),g.redirectTo("/userEvents",n.uid))},e.$watch("vm.tempEvent.guestList",function(e,t){angular.isObject(v.tempEvent.guestList)&&u(12)}),m()}function LandingPageController(e,t,n,s,o){function r(e){return btoa(e)}function a(e){return Date.parse(e)}function l(i,s){var o=i+"/"+d.uid+"/"+d.token;t.info("redirecting to: "+o),n.path(o),e.$apply()}var c=this,u="https://meetupplanner.firebaseio.com/",d={};c.showRequirnments=!1,c.validNewName={valid:!1,style:{color:""}},c.validNewEmail={valid:!1,style:{color:""}},c.securePassword={secure:!1,style:{color:""}},c.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},c.message="testing",c.validUserEmail={valid:!1,style:{color:""}},c.validUserPassword={valid:!1,style:{color:""}},c.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},c.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},c.displayPassReqs=function(){c.newName&&c.newEmail?c.showRequirnments=!0:c.showRequirnments=!1},c.checkNewName=function(){c.newName&&(c.newName.length>0?(c.validNewName.valid=!0,c.validNewName.style={color:"green"}):(c.validNewName.valid=!1,c.validNewName.style={color:"red"})),c.openCreateUserButton()},c.checkNewEmail=function(){if(c.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(c.newEmail)?(c.validNewEmail.valid=!0,c.validNewEmail.style={color:"green"}):(c.validNewEmail.valid=!1,c.validNewEmail.style={color:"red"})}c.openCreateUserButton()},c.checkUserEmail=function(){if(c.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(c.userEmail)?(c.validUserEmail.valid=!0,c.validUserEmail.style={color:"green"}):(c.validUserEmail.valid=!1,c.validUserEmail.style={color:"red"})}c.openUserLoginBtn()},c.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(c.newPassword){for(c.newPassword.length>15?(c.passwordRequirnments[0].style={color:"green"},c.passwordRequirnments[0].met=!0):(c.passwordRequirnments[0].style={color:"red"},c.passwordRequirnments[0].met=!1),c.newPassword.length<=100?(c.passwordRequirnments[1].style={color:"green"},c.passwordRequirnments[1].met=!0):(c.passwordRequirnments[1].style={color:"red"},c.passwordRequirnments[1].met=!1),i=2;i<6;i++){var t=new RegExp(e[i][0],"");t.test(c.newPassword)?(c.passwordRequirnments[i].style={color:"green"},c.passwordRequirnments[i].met=!0):(c.passwordRequirnments[i].style={color:"red"},c.passwordRequirnments[i].met=!1)}var t=new RegExp(e[6][0],"");t.test(c.newPassword)?(c.passwordRequirnments[6].style={color:"green"},c.passwordRequirnments[6].met=!0):(c.passwordRequirnments[6].style={color:"red"},c.passwordRequirnments[6].met=!1),c.passwordRequirnments[0].met&&c.passwordRequirnments[1].met&&c.passwordRequirnments[2].met&&c.passwordRequirnments[3].met&&c.passwordRequirnments[4].met&&c.passwordRequirnments[5].met&&c.passwordRequirnments[6].met?c.securePassword.secure=!0:c.securePassword.secure=!1,c.securePassword.secure?c.securePassword.style={color:"green"}:c.securePassword.style={color:"red"}}c.openCreateUserButton()},c.checkUserPasswords=function(){c.userPassword&&(c.userPassword.length>15?(c.validUserPassword.style={color:"green"},c.validUserPassword.valid=!0):(c.validUserPassword.style={color:"red"},c.validUserPassword.valid=!1)),c.openUserLoginBtn()},c.openCreateUserButton=function(){c.validNewName.valid&&c.validNewEmail.valid&&c.securePassword.secure?(c.unlockCreateUserBtn["class"]="btn btn-success",c.unlockCreateUserBtn.usable=!0):(c.unlockCreateUserBtn["class"]="btn btn-warning",c.unlockCreateUserBtn.usable=!1)},c.openUserLoginBtn=function(){c.validUserEmail.valid&&c.validUserPassword.valid?(c.unclockUserLoginBtn["class"]="btn btn-success",c.unclockUserLoginBtn.usable=!0):(c.unclockUserLoginBtn["class"]="btn btn-warning",c.unclockUserLoginBtn.usable=!1)},c.update=function(){c.newName=s.find("#newName")[0].value,c.newEmail=s.find("#newEmail")[0].value,c.userEmail=s.find("#userEmail")[0].value,c.checkNewName(),c.checkNewEmail(),c.checkUserEmail()},c.createNewUser=function(){if(t.info("Creating a new user account now!"),c.unlockCreateUserBtn.usable){var e=new Firebase(u);e.createUser({email:c.newEmail,password:c.newPassword},function(n,i){if(n)t.info("Error creating user: "+n);else{t.info(i),d=i;var s=e.child("Users/"+i.uid),o=new Date;s.set({bio:{name:c.newName,email:c.newEmail},events:{pending:{updated:a(o)},hosting:{updated:a(o)},attending:{updated:a(o)},completed:{updated:a(o)}}},function(e){e?t.info("Data could not be saved: "+e):t.info("Data saved successfully.")}),e.child("Uids").child(r(c.newEmail)).set(d.uid,function(e){e?t.info("Data could not be saved. "+e):t.info("uid created sucessfully.")}),l("/userInformation",d)}})}},c.loginRegisteredUser=function(){if(c.unclockUserLoginBtn.usable){var n=new Firebase(u);n.authWithPassword({email:c.userEmail,password:c.userPassword},function(n,i){n?t.info("Error Logging In: "+n):(t.info("Logged In successfully: "+i.uid),t.info(i),d=i,l("/userInformation",d),e.$apply())})}},c.alertMe=function(){alert("this is working! an alert!")},c.onResizeFunction=function(){var e=angular.element(".inputText");o.outerWidth>o.outerHeight?(e.css("font-size","2em"),t.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in s&&s.addEventListener("DOMContentLoaded",function(){t.info("adding FastClick"),FastClick.attach(s.body)},!1),angular.element(o).bind("resize",function(){c.onResizeFunction()}),angular.element(s).ready(function(){o.outerWidth<600&&c.onResizeFunction()}),c.master={},c.update=function(e){c.master=angular.copy(e)},c.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),c.user=angular.copy(c.master)},c.reset()}function MainController(e,t,n,i){function s(){angular.element(n);n.css("hight",i.outerHeight)}var o=this,r="https://meetupplanner.firebaseio.com/",a=new Firebase(r);o.logout=function(){alert("logging you out!"),a.unauth(),t.path("/")},angular.element(n).ready(function(){s()})}function NewUserSignUpController(e,t,n,s,o,r){function a(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var c=n;l.checkNewName=function(){var e=[],t=c.required(l.inputs.newName),n=c.minNameLength(l.inputs.newName);angular.isDefined(t)&&e.push(t),angular.isDefined(n)&&e.push(n),e.length>0?l.errors.name=e.join(", "):l.errors.name="",a()},l.checkNewEmail=function(){var e=[],t=c.required(l.inputs.newEmail),n=c.email(l.inputs.newEmail);angular.isDefined(t)&&e.push(t),angular.isDefined(n)&&e.push(n),e.length>0?l.errors.email=e.join(", "):l.errors.email="",a()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],t=c.required(l.inputs.newPassword),n=[c.minPassLength(l.inputs.newPassword),c.maxPassLength(l.inputs.newPassword),c.atLeastOneLowercase(l.inputs.newPassword),c.atLeastOneUppercase(l.inputs.newPassword),c.atLeastOneNumber(l.inputs.newPassword),c.atLeastOneSymbol(l.inputs.newPassword),c.illegalCharacter(l.inputs.newPassword)];angular.isDefined(t)&&e.push(t),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var s=!1;for(i=0;i<7;i++)n[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},s=!0);l.errors.password=s,a()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=o;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var n=s,i=r;n.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(s){i.loadPrimaries(l.inputs.newEmail,l.inputs.newName,s.uid),n.addNewUserToDatabase(s.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){t.info(i),n.addNewUserToRegUsersList(s.uid,l.inputs.newEmail).then(function(n){e.redirectTo("/userInformation",s.uid),t.info(n)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)})}}}function RegUserLoginController(e,t,n,i,s){function o(){angular.isDefined(r.inputs.email)&&""!==r.inputs.email&&angular.isDefined(r.inputs.password)&&""!==r.inputs.password?(r.inputs.requiredFieldsDefined=!0,r.unclockUserLoginBtn["class"]="btn btn-success",r.unclockUserLoginBtn.message="Login",r.unclockUserLoginBtn.usable=!0):(r.inputs.requiredFieldsDefined=!1,r.unclockUserLoginBtn["class"]="btn btn-warning",r.unclockUserLoginBtn.message="Need Email & Pass",r.unclockUserLoginBtn.usable=!1)}var r=this;r.inputs={email:"",password:"",requiredFieldsDefined:!1},r.errors={message:"",passesAllTests:!0},r.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning",message:"Need Email & Pass"},r.update=function(){r.inputs.email=t.find("#userEmail")[0].value,r.inputs.password=t.find("#userPassword")[0].value,o()},r.loginRegisteredUser=function(){var t=i,o=n,a=s;o.LoginRegisteredUser(r.inputs.email,r.inputs.password).then(function(e){r.errors.passesAllTests=!0,a.setPrimariesLocally(r.inputs.email,r.inputs.name,e.uid)}).then(function(){e.info("uid is "+a.getUIDLocally()),o.getUserBio(a.getUIDLocally()).then(function(t){a.updateBioLocally(t),o.getUserEvents(a.getUIDLocally()).then(function(e){a.updateAllUserEventsLocally(e)})["catch"](function(t){e.info(t)})})["catch"](function(t){e.info(t)}),t.redirectTo("/userInformation",a.getUIDLocally())})["catch"](function(e){r.errors.message=e,r.errors.passesAllTests=!1})},r.clicked=function(){var e=n;e.logUserOut()}}function topMenuController(e,t,n,i,s){function o(e){e?(t.info("User "+e.uid+" is logged in with "+e.provider),a.loggedIn=!0):(t.info("User is logged out"),a.loggedIn=!1)}function r(e,i){var s=e+"/"+i.uid+"/"+i.token;t.info("redirecting to: "+s),n.path(s)}var a=this,l="https://meetupplanner.firebaseio.com/",c=new Firebase(l);a.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){t.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(s).bind("resize",function(){a.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){s.outerWidth<600&&(a.onResizeFunction(),e.$apply())}),a.logout=function(){t.info("logging out!"),a.loggedIn=!1,c.unauth(),r("/",{uid:"",token:""})},a.navBarLoginRegisteredUser=function(){t.info("launching login");var n=new Firebase(l);n.authWithPassword({email:a.navbarUserEmail,password:a.navbarUserPass},function(n,i){n?t.info("Error Logging In: "+n):(t.info("Logged In successfully: "+i.uid),t.info(i),r("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},a.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",s.outerWidth-26+"px")},c.onAuth(o)}function UserEventsController(e,t,n,i){function s(e){return Date.parse(e)}function o(){var e=0;for(event in c.events.hosting)e++;return e}function r(){var e=new Date,t=10*s(e)+o();return t}function a(){Object.keys(c.events).forEach(function(e){Object.keys(c.events[e]).forEach(function(t){var n=0;angular.isObject(c.events[e][t])&&n++,n>0?c.sectionAvailable[e]=!0:c.sectionAvailable[e]=!1})})}function l(){e.info(u.getAllUserEventsLocally()),u.setUIDLocally(t.uid),u.loadBio(t.uid).then(function(e){c.userBio=e})["catch"](),c.events=u.getAllUserEventsLocally(),u.getRemoteEventsForLocal().then(function(t){e.info("checking the db for events"),c.events=u.getAllUserEventsLocally()}).then(function(){a()})}var c=this,u=n;c.showDecline=!1,c.userBio={},c.events={},c.sectionAvailable={pending:!1,attending:!1,hosting:!1,completed:!1},c.errors={},c.createNewEvent=function(){var e=r(),t=i;u.createNewEvent(e),t.redirectTo("/event",e,u.getUIDLocally(),u.getUIDLocally())},l()}function UserInformationController(e,t,n,i,s){function o(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(){c.loadBio(n.uid).then(function(e){l.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(l.tempBirthday=o(e.dob))})}var l=this,c=i;l.user={},l.tempBirthday,l.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},l.checkValues=function(){l.view.isData=!0,!angular.isUndefined(l.user.company)&&""!==l.user.company||!angular.isUndefined(l.user.title)&&""!==l.user.title||!angular.isUndefined(l.user.dob)&&""!==l.user.dob?(l.view.dataToSave=!0,l.view.proceedBtn="btn btn-success",l.view.btnMssg="Save & Continue"):(l.view.dataToSave=!1,l.view.proceedBtn="btn btn-primary",l.view.btnMssg="Move On...")},l.updateDOB=function(){l.user.dob=r(l.tempBirthday),l.checkValues()},l.saveAndMoveOn=function(){var t=s,i=c.getUIDLocally();0!==l.tempBirthday&&l.updateDOB(),(""==i||angular.isUndefined(i))&&c.setUIDLocally(n.uid),l.view.isData&&(e.info("saving the new data"),c.updateBioLocally(l.user)),t.redirectTo("/userEvents",l.user.uid)},a()}function authService(e,t){function n(){var e=t;e.checkLoginStatus().then(function(e){return e})["catch"](function(e){return e})}var i={isLoggedIn:n};return i}function backendServices(e,t,n){function i(e){return btoa(e)}function s(e){return atob(e)}function o(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function a(e,n){var i=new Firebase(I);return t(function(t,s){i.createUser({email:e,password:n},function(e,n){e?s("Error creating user: "+e):t(n)})})}function l(e,n,i){var s=new Firebase(I),o=s.child("Users").child(e),a=new Date;return t(function(t,s){o.set({bio:{uid:e,name:n,email:i},events:{pending:{updated:r(a)},hosting:{updated:r(a)},attending:{updated:r(a)},completed:{updated:r(a)}}},function(e){e?s("Data could not be saved: "+e):t("Data saved successfully.")})})}function c(e,n){var s=new Firebase(I),o=i(n),r=s.child("Uids").child(o);return t(function(t,n){r.set(e,function(e){e?n("Data could not be saved. "+e):t("uid created sucessfully.")})})}function u(n,i){var s=new Firebase(I);return t(function(t,o){s.authWithPassword({email:n,password:i},function(n,i){n?o("Error Logging In: "+n):(e.info("Logged In successfully: "+i.uid),t(i))})})}function d(){var t=new Firebase(I);return new Promise(function(n,i){t.onAuth(function(t){t?(e.info("User "+t.uid+" is logged in with "+t.provider),n(!0)):(e.info("User is logged out"),n(!1))})})}function f(){var t=new Firebase(I);e.info("logging user out"),t.unauth()}function m(e){var n=new Firebase(I),i=e.uid,s=n.child("Users").child(i);return t(function(t,n){s.update(e,function(e){e?n("There was a problem updating that record: "+e):t("all user data uploaded successfully")})})}function v(e){var n=new Firebase(I),i=e.uid.toString(),s=n.child("Users").child(i).child("bio");return t(function(t,n){s.update(e,function(e){e?n("There was a problem updating that record: "+e):t("all user bio data uploaded successfully")})})}function g(){}function p(e){var n=new Firebase(I),i=n.child("Users").child(e).child("bio");return t(function(e,t){i.once("value",function(t){e(t.val())},function(e){e&&t(e)})})}function h(n,i){e.info("got passed..."),e.info(n),e.info(i);var s=new Firebase(I),o=i.id,r=s.child("Users").child(n).child("events").child("hosting").child(o);return t(function(e,t){r.set(i,function(n){n?t("There was an error: "+n):e("New event saved to DB successfully")})})}function w(e,n,i,s){var o=new Firebase(I),r=o.child("Users").child(s).child("events").child("hosting").child(i).child("guestList").child(n);return t(function(t,n){r.set({rsvpd:!1,status:"pending",name:e},function(e){e?n("There was an error: "+e):t("New event saved to DB successfully")})})}function b(e){var n=new Firebase(I),i=n.child("Users").child(e).child("events");return t(function(e,t){i.orderByKey().once("value",function(t){var n=t.val(),i={hosting:n.hosting,attending:n.attending,pending:n.pending,completed:n.completed};e(i)},function(e){e&&t(e)})})}function E(e,n){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(n);return t(function(e,t){s.once("value",function(t){var n=t.val();e(n)},function(e){e&&t(e)})})}function U(n){var i=new Firebase(I),s=i.child("Uids");return t(function(t,i){s.once("value",function(s){var o=s.val();Object.keys(o).forEach(function(s){e.info("from list: "+s+", matching to: "+n),s==n?t(o[s]):i("No user by that email")})})})}function y(e,n){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(n).child("guestList");return t(function(e,t){s.once("value",function(t){var n=t.val();e(n)},function(e){e&&t("There was an error getting the guest list: "+e)})})}function L(e,t,n){}function T(e,n){var i=new Firebase(I),s=i.child("Users").child(n).child("events").child(e).child("updated");return t(function(e,t){s.set(null,function(n){n?t("There was an error deleting update field: "+n):e("Deleted update successfully")})})}function D(e,n){var i=new Firebase(I),s=i.child("Users").child(e).child("events").child("hosting").child(n);return t(function(e,t){var n=function(n){n?t("Synchronization failed"):e("Synchronization succeeded")};s.remove(n)})}function C(e,n){var i=new Firebase(I),s=i.child("Users").child(n).child("events").child(e);return t(function(e,t){s.once("value",function(n){var i=n.val();angular.isDefined(i.updated)?e(!0):t(!1)},function(e){e&&t(e)})})}var I="https://meetupplanner.firebaseio.com/",A={utf8_to_b64:i,b64_to_utf8:s,unixTimeToDateTime:o,dateTimeToUnixTime:r,LoginRegisteredUser:u,checkLoginStatus:d,logUserOut:f,downloadUserData:g,getUserBio:p,getUserEvents:b,getAHostedEvent:E,getAnInvitedEvent:L,findGuestUID:U,getGuestListForEvent:y,createNewUser:a,addNewUserToDatabase:l,addNewUserToRegUsersList:c,uploadUserData:m,uploadUserBio:v,createHostedEvent:h,addGuestToHostGuestListonDB:w,deleteUpdateField:T,removeIncompleteEvent:D,thereWasAnUpdateField:C};return A}function trafficValet(e,t){function n(n,i,s,o){angular.isDefined(i)?(n=n+"/"+i,angular.isDefined(s)&&(n=n+"/"+s,angular.isDefined(o)&&(n=n+"/"+o,e.info("redirecting now to "+n),t.path(n)),e.info("redirecting now to "+n),t.path(n)),e.info("redirecting now to "+n),t.path(n)):(e.info("redirecting now to "+n),t.path(n))}function i(n,i,s,o){if(e.info("Traffic valet accessed"),e.info("eventId: "+n),e.info("hostId: "+i),e.info("userId: "+s),angular.isUndefined(o)&&(o=1),i===s){var r="/event/host/"+n+"/"+s+"/"+o;e.info(r),t.path(r)}else{var r="/event/guest/"+n+"/"+s+"/"+i;e.info(r),t.path(r)}}var s={redirectTo:n,eventRoute:i};return s}function userData(e,t,n){function i(e){return btoa(e)}function s(e){return Date.parse(e)}function o(){return""!==ee.bio.uid&&""!==ee.bio.name&&""!==ee.bio.email}function r(e,t){return!!angular.isDefined(ee.events[e][t])}function a(e,t){return angular.isDefined(ee.bio.email)&&""!=ee.bio.email?e==ee.bio.email:ee.events.hosting[t].host.email==e}function l(t,n){return angular.isDefined(ee.events.hosting[n].guestList)?(e.info("there is a guest list"),refEmail=i(t),Object.keys(ee.events.hosting[n].guestList).forEach(function(t){return refEmail==t?(e.info("an email match was found, this guest has been invited already"),!0):(e.info("no email match found, ok to invite guest"),!1)}),void 0):(e.info("no guestlist"),!1)}function c(){return!!angular.isDefined(te.event);
}function u(e){Object.keys(ee.events[e]).forEach(function(t){angular.isObject(ee.events[e][t])||delete ee.events[e][t]})}function d(){return ee.bio.uid}function f(){return ee.bio.name}function m(){return ee.bio.email}function v(){return ee.bio.company}function g(){return ee.bio.title}function p(){return ee.bio.dob}function h(){return{uid:ee.bio.uid,name:ee.bio.name,email:ee.bio.email,company:ee.bio.company,title:ee.bio.title,dob:ee.bio.dob}}function w(e,t){return ee.events[e][t]}function b(e){return ee.events[e]}function E(){return ee.events}function U(){return te}function y(e){ee.bio.uid=e}function L(e){ee.bio.name=e}function T(e){ee.bio.email=e}function D(e){ee.bio.company=e}function C(e){ee.bio.title=e}function I(e){ee.bio.dob=e}function A(e,t,n){angular.isDefined(e)&&T(e),angular.isDefined(t)&&L(t),angular.isDefined(n)&&y(n)}function B(e,t){var n=t.id;u(e),ee.events[e][n]=t}function $(e){ee.events=e}function F(e){L(e.name),T(e.email),D(e.company),C(e.title),I(e.dob),O()}function q(e,s,o,r,a){var l=n;return t(function(t,n){angular.isDefined(s)&&(o=i(s)),l.addGuestToHostGuestListonDB(e,o,r,a).then(function(e){t(e)})["catch"](function(e){n(e)})})}function R(e){te=e}function k(t){var n=t.uid;angular.isObject(te.event.guestList)||(e.info("creating the object"),te.event.guestList={}),e.info(te.event),te.event.guestList[n]=t.guest,e.info(te.event.guestList[n])}function S(e){var s=n;return t(function(t,n){guestEmail=i(e),s.findGuestUID(guestEmail).then(function(e){t(e)})["catch"](function(e){n(e)})})}function N(e,t){delete ee.events[e][t.id]}function P(){var e=n;e.downloadUserData().then(function(e){ee=e})}function G(e){var i=n;return t(function(t,n){i.getUserBio(e).then(function(e){t(e)})["catch"](function(e){n("There was an error reading the user bio: "+e)})})}function z(){var e=n;return t(function(t,n){e.getUserEvents(d()).then(function(e){Object.keys(e).forEach(function(t){Object.keys(e[t]).forEach(function(n){B(t,e[t][n])})}),t(e)})["catch"](function(e){n("There was an error reading the user events: "+e)})})}function j(e){var i=n;return t(function(t,n){i.getAHostedEvent(d(),e).then(function(e){t(e)})["catch"](function(e){n("There was an error reading the user event: "+e)})})}function x(){var e=n;e.uploadUserData(ee)}function O(){var e=n;e.uploadUserBio(ee.bio)}function M(){}function H(e,i){var s=n;return t(function(t,n){s.createHostedEvent(e,i).then(function(e){t(e)})["catch"](function(e){n(e)})})}function V(i){var s=n;return t(function(t,n){s.thereWasAnUpdateField(i,d()).then(function(t){s.deleteUpdateField(i,d()).then(function(t){e.info(t)})["catch"](function(t){e.info(t)})})["catch"](function(t){e.info(t)})})}function _(e,i){var s=n;return t(function(t,n){s.getGuestListForEvent(e,i).then(function(e){t(e)})["catch"](function(e){n(e)})})}function W(e){var i=n;return t(function(t,n){i.removeIncompleteEvent(ee.getUIDLocally,e).then(function(e){t(e)})["catch"](function(e){n(e)})})}function Z(e){return t(function(t,n){o()?t(h()):G(e).then(function(e){A(e.email,e.name,e.uid),t(e)})["catch"](function(e){n(e)})})}function K(e,n){return y(e),t(function(e,t){j(n).then(function(t){e(t)})["catch"](),r("hosting",n)&&e(w("hosting",n))})}function J(e){var n={};return t(function(e,t){z().then(function(t){e(t)}),n=b(type),e(n)})}function Q(e){var t={},n=new Date;n.setMinutes(0,0,0);var i=s(n);t={id:e,name:"",type:"",host:{name:ee.bio.name,uid:ee.bio.uid,email:ee.bio.email},message:"",eventTimes:{start:i,end:i+36e5},address:{street01:"",street02:"",street03:"",city:"",state:"",zip:0}},B("hosting",t),R(t)}function X(e){return t(function(e,t){})}function Y(e,t){B(e,t)}var ee={bio:{uid:"",name:"",email:"",company:"",title:"",dob:0},events:{hosting:{},pending:{},attending:{},completed:{}}},te={},ne={bioPrimariesAreCompleteLocally:o,eventExistsLocally:r,thisIsTheHostEmail:a,guestInvitedAlready:l,thereIsAnActiveEvent:c,cleanEvents:u,getUIDLocally:d,getNameLocally:f,getEmailLocally:m,getCompanyLocally:v,getTitleLocally:g,getDOBLocally:p,getFullBioLocally:h,getOneUserEventLocally:w,getUserEventsLocally:b,getAllUserEventsLocally:E,getActiveEvent:U,setUIDLocally:y,setNameLocally:L,setEmailLocally:T,setCompanyLocally:D,setTitleLocally:C,setDOBLocally:I,setPrimariesLocally:A,updateUserEventsLocally:B,updateAllUserEventsLocally:$,updateBioLocally:F,addGuestToHostGuestList:q,setActiveEvent:R,addGuestToActiveEvent:k,saveNewHostingEvent:Y,removeUserEventsLocally:N,getFullRemoteDBforLocal:P,getRemoteBioForLocal:G,getRemoteEventsForLocal:z,getOneRemoteEventForLocal:j,setFullRemoteDBfromLocal:x,setRemoteBioFromLocal:O,setARemoteEventFromLocal:M,setRemoteEventsFromLocal:H,cleanDBEventsCategory:V,getUserIdForGuest:S,getEventGuestList:_,removeIncompleteEventFromDB:W,loadBio:Z,loadEventsProgressively:J,loadAnEventProgressively:K,createNewEvent:Q,updatePendingEventsListForGuest:X};return ne}function validation(e){function t(e){return angular.isUndefined(e)?"This is a required field":void 0}function n(e){return angular.isDefined(e)&&e.length<p?"Name should be at least "+p+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<h)}function s(e){return angular.isDefined(e)&&!(e.length>w)}function o(e){if(angular.isDefined(e)){var t=new RegExp("[!@#$%^&*]");return!!t.test(e)}return!1}function r(e){if(angular.isDefined(e)){var t=new RegExp("[0-9]","");return!!t.test(e)}return!1}function a(e){if(angular.isDefined(e)){var t=new RegExp("[a-z]","");return!!t.test(e)}return!1}function l(e){if(angular.isDefined(e)){var t=new RegExp("[A-Z]","");return!!t.test(e)}return!1}function c(e){if(angular.isDefined(e)){var t=new RegExp("[^A-z0-9!@#$%^&*]","");return!t.test(e)}return!1}function u(e){var t=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return angular.isDefined(e)&&!t.test(e)?"Not a valid email":void 0}function d(e){}function f(){var e={eventName:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventHost:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventStart:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventEnd:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventStreet01:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventCity:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventState:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventZip:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}},eventGuest:{completed:!1,addressed:!1,row:{"class":{"col-xs-12":!0,"col-sm-12":!0,"form-group":!0,"has-success":!1,"has-error":!1}},label:{"class":{"control-label":!0}},input:{"class":{"form-control":!0}}}};return e}function m(){}function v(){}function g(){}var p=3,h=16,w=100,b={required:t,minNameLength:n,minPassLength:i,maxPassLength:s,atLeastOneSymbol:o,atLeastOneNumber:r,atLeastOneLowercase:a,atLeastOneUppercase:l,illegalCharacter:c,email:u,dateOfBirth:d,generateEventRequirnments:f,updateEventReqStatus:m,updateEventReqAddressed:v,updateEventReqClass:g};return b}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin.htm",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/host/:eventId/:uid/:section",{templateUrl:"views/hostEvent.htm",controller:"HostEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/guest/:eventId/:uid/:hostId",{templateUrl:"views/guestEvent.htm",controller:"GuestEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:section?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService,eventViewChanger:eventViewChanger}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function eventViewChanger(e,t){e.eventRoute(t.current.params.eventId,t.current.params.hostId,t.current.params.uid,t.current.params.section)}function addAGuest(){function e(e,t,n,i){}function t(e,t,n,i){function s(e){return btoa(e)}function o(){a.validations.name.valid&&a.validations.email.valid?(e.info("ready to submit"),a.invitationValidForSubmission=!0,a.submissionButton["class"]["btn-warning"]=!1,a.submissionButton["class"]["btn-success"]=!0,a.submissionButton.message="Invite Guest"):(e.info("not ready to submit"),a.invitationValidForSubmission=!1,a.submissionButton["class"]["btn-warning"]=!0,a.submissionButton["class"]["btn-success"]=!1,a.submissionButton.message="Address Invitation...")}function r(){angular.isUndefined(c.getOneUserEventLocally("hosting",t.eventId))?c.getRemoteEventsForLocal().then(function(){u=c.getOneUserEventLocally("hosting",t.eventId)}):u=c.getOneUserEventLocally("hosting",t.eventId)}var a=this,l=n,c=i,u={};a.tempGuest={name:"",email:"",status:"pending"},a.validations={name:{addressed:!1,valid:!1,errorMessage:""},email:{addressed:!1,valid:!1,errorMessage:""},invitation:{isTheHost:!1,alreadyInvited:!1,errorMessage:""}},a.invitationValidForSubmission=!1,a.submissionButton={style:{color:"red"},"class":{"col-xs-12":!0,"col-sm-12":!0,btn:!0,"btn-warning":!0,"btn-success":!1},message:"Address Invitation..."},a.validateName=function(){a.validations.name.addressed=!0,angular.isDefined(a.tempGuest.name)&&""!=a.tempGuest.name?(a.validations.name.valid=!0,a.validations.name.errorMessage=""):(a.validations.name.valid=!1,a.validations.name.errorMessage="This guest needs a name"),o()},a.validateEmail=function(){a.validations.email.addressed=!0,angular.isDefined(a.tempGuest.email)&&""!=a.tempGuest.email?angular.isUndefined(l.email(a.tempGuest.email))?(a.validations.email.valid=!0,a.validations.email.errorMessage=""):(a.validations.email.valid=!1,a.validations.email.errorMessage=l.email(a.tempGuest.email),e.info(a.validations.email.errorMessage)):(a.validations.email.valid=!1,a.validations.email.errorMessage="Not a valid email"),o()},a.showNameError=function(){return!(a.validations.name.valid||!a.validations.name.addressed)},a.showEmailError=function(){return!(a.validations.email.valid||!a.validations.email.addressed)},a.showInvitationError=function(){return!(!a.validations.invitation.isTheHost&&!a.validations.invitation.alreadyInvited)},a.submitGuestInvitation=function(){if(e.info("submitting the invitation"),a.invitationValidForSubmission){if(c.thisIsTheHostEmail(a.tempGuest.email,t.eventId))return a.validations.invitation.isTheHost=!0,a.validations.invitation.errorMessage="No need to invite the host",0;a.validations.invitation.isTheHost=!1,c.getUserIdForGuest(a.tempGuest.email).then(function(t){return e.info("found user with that email: "+t),t}).then(function(t){e.info("the guest list is..."),e.info(a.guestList),angular.isObject(a.guestList)||(e.info("creating the object"),a.guestList={});var n=a.tempGuest;a.guestList[t]=n,a.tempGuest={name:"",email:"",status:"pending"}}).then(function(){}).then(function(){})["catch"](function(t){e.info(t),idByEmail=s(a.tempGuest.email),angular.isObject(a.guestList)||(e.info("creating the object"),a.guestList={});var n=a.tempGuest;a.guestList[idByEmail]=n,a.tempGuest={name:"",email:"",status:"pending"}})}},r()}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"../views/directives/addAGuest.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","$routeParams","validation","userData"],n}function hostedEventsList(){function e(e,t,n,i){}function t(e,t){function n(e){return new Date(parseInt(e))}function i(e){var t=0;return s.guestsAreInvited=!0,Object.keys[e].forEach(function(e){t++}),t}var s=this,o=t;s.guestsAreInvited=!1,s.formatDate=function(t){return e.info("got thist time: "+t),n(t)},s.guestsAttending=function(e){return angular.isDefined(e)&&angular.isDefined(e.attending)?i(e.attending):0},s.guestsInvited=function(e){function t(){return n.attending+n.pending+n.declined}if(angular.isDefined(e)){var n={attending:0,pending:0,declined:0};return angular.isDefined(e.attending)&&(n.attending=i(e.attending)),angular.isDefined(e.pending)&&(n.pending=i(e.pending)),angular.isDefined(e.declined)&&(n.declined=i(e.declined)),t()}return 0},s.percentageAttending=function(e){return angular.isDefined(e)?guestsAttending(guestlist)/guestsInvited(e):0},s.eventClicked=function(t){e.info("redirecting to: /event/"+t+"/"+s.hostedEvents[t].host.uid+"/"+s.userId),o.redirectTo("/event",t,s.hostedEvents[t].host.uid,s.userId)}}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"../views/directives/hostedEventsList.directive.htm",replace:!0,scope:{hostedEvents:"=",userId:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","trafficValet"],n}function progressBar(){return{restrict:"E",scope:{curVal:"@",maxVal:"@"},template:"<div class='progress-bar'><div class='progress-bar-bar'>testing</div></div>",link:function(e,t,n){function i(){var n=0;e.maxVal&&(n=Math.min(e.curVal,e.maxVal)/e.maxVal*t.find(".progress-bar").width()),t.find(".progress-bar-bar").css("width",n)}e.$watch("curVal",i),e.$watch("maxVal",i)}}}function hostedGuestList(){function e(e,t,n,i){e.$watch("guestList",function(){e.$apply})}function t(e,t,n){function i(){return angular.isDefined(o.guestList)&&""!=o.guestList?(o.isAGuestList=!0,!0):(o.isAGuestList=!1,!1)}function s(){var s=n;i()||(e.info("going after the list"),s.getEventGuestList(t.uid,t.eventId).then(function(t){e.info("got the list"),e.info(t),o.guestList=t,angular.isObject(t)&&(o.isAGuestList=!0)})["catch"](function(t){e.info("There was an error: "+t)}))}var o=this;o.isAGuestList=!1,s()}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"../views/directives/hostedGuestList.directive.htm",replace:!0,scope:{guestList:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$log","$routeParams","userData"],n}function toolBar(){function e(e,t,n,i){}function t(e,t,n,i){function s(){r.checkLoginStatus().then(function(e){t.info("toolbar checking login: "+e),o.loggedIn=e})["catch"]()}var o=this,r=n,a=i;o.login=function(){t.info("button clicked"),t.info(o.email+" "+o.password)},o.logout=function(){t.info("logging out"),r.logUserOut(),a.redirectTo("/login")},o.loginRegisteredUser=function(){var e=i,s=n,r=userData;s.LoginRegisteredUser(o.email,o.password).then(function(e){return t.info(e),e.uid}).then(function(n){t.info("uid is "+n),s.getUserBio(n).then(function(e){r.updateBioLocally(e),s.getUserEvents(n).then(function(e){r.updateAllUserEventsLocally(e)})["catch"](function(e){t.info(e)})})["catch"](function(e){t.info(e)}),e.redirectTo("/userInformation",n)})["catch"](function(e){})},s(),e.$on("$routeChangeStart",function(e,n){t.info("the route chagned (says the tool bar)"),s()})}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendServices","trafficValet"],n}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],eventViewChanger.$inject=["trafficValet","$route"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$log","$routeParams"],angular.module("meetUpEventApp").controller("GuestEventController",GuestEventController),GuestEventController.$inject=["$log"],angular.module("meetUpEventApp").controller("HostEventController",HostEventController),HostEventController.$inject=["$scope","$log","$routeParams","userData","trafficValet","validation"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("RegUserLoginController",RegUserLoginController),RegUserLoginController.$inject=["$log","$document","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$log","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","$routeParams","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","backendServices"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("addAGuest",addAGuest),angular.module("meetUpEventApp").directive("hostedEventsList",hostedEventsList),angular.module("meetUpEventApp").directive("progressBar",progressBar),angular.module("meetUpEventApp").directive("hostedGuestList",hostedGuestList),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
