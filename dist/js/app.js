function AnEventController(e,n,t,a,r){function o(){p.tempDateTime={start:"",end:""},p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}},p.showIfHost=!1,p.hideIfAttending=!0,p.manageSections={1:{active:!0,complete:!1,style:{color:"black","background-color":"yellow"}},2:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}},3:{active:!1,complete:!1,style:{color:"white","background-color":"gray"}}},m(),v(),p.showIfHost||g()}function s(e){return btoa(e)}function l(e){return atob(e)}function u(e){return Date.parse(e)}function d(){p.newGuest={name:"",email:{address:"",valid:!1,style:{color:""}}}}function c(e){n.info("adding them to the registered users list "+e),w.child("Users").child(e).child("events").child("pending").child(a.uid).child(a.eventId).set({id:a.eventId,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name,host:a.uid},function(e){e&&n.info("there was an error"+e)}),w.child("Users").child(e).child("events").child("pending").once("value",function(t){var i=t.val();n.info(t.val()),i.updated?(n.info("deleting updated"),w.child("Users").child(e).child("events").child("pending").child("updated").remove(function(e){e&&n.info("Deleting failed: "+e.code)})):n.info("nothing to do")},function(e){e&&n.info("The read failed: "+e.code)})}function f(e){n.info("adding them to the UNREGISTERED users list "+e),w.child("UnregisteredUsers").child(e).child("pending").child(a.uid).child(a.eventId).set({id:a.eventId,host:a.uid,eventTimes:{start:p.event.eventTimes.start,end:p.event.eventTimes.end},name:p.event.name},function(e){e&&n.info("there was an error"+e)})}function m(){var e=w.getAuth();e.uid==a.hostId?(n.info("is the host"),p.showIfHost=!0):(n.info("not the host"),p.showIfHost=!1)}function v(){p.showIfHost||(n.info("check guest attendance"),U.child("guestList").on("value",function(e){var n=e.val();p.hideIfAttending=!n[a.uid].attending}))}function g(){p.manageSections[1].active=!0,p.manageSections[2].active=!0,p.manageSections[3].active=!0}var p=this,h="https://meetupplanner.firebaseio.com/",w=new Firebase(h),U=w.child("Users").child(a.hostId).child("events").child("hosting").child(a.eventId);p.event=r(U);var b=r(w.child("Uids"));p.requiredInputs=["","","","","","","","",""],p.setTempTime=function(e){"start"==e&&(p.tempDateTime.start=new Date),"end"==e&&(p.tempDateTime.end=new Date)},p.unixTimeToDateTime=function(e){return new Date(parseInt(e))},p.dateTimeToUnixTime=function(e){return Date.parse(e)},p.submit=function(){n.info("submitting the form now!")},p.backToUserEvents=function(){t.path("/userEvents/"+a.uid+"/"+a.token)},p.eventRedirect=function(e,i){var r=e+"/"+a.uid+"/"+a.token;n.info("redirecting to: "+r),t.path(r)},p.changeSection=function(e){for(n.info("are we here"),i=1;i<=3;i++)i==e?(p.manageSections[i].active=!0,p.manageSections[i].style["background-color"]="yellow",p.manageSections[i].style.color="black"):(p.manageSections[i].active=!1,p.manageSections[i].style["background-color"]="gray",p.manageSections[i].style.color="white")},p.saveEventTime=function(e,n){p.event.eventTimes||(p.event.eventTimes={start:"",end:""},p.event.eventTimes.start=p.dateTimeToUnixTime(p.tempDateTime.start),p.event.eventTimes.end=p.dateTimeToUnixTime(p.tempDateTime.end)),p.tempDateTime.end<p.tempDateTime.start&&"start"==n&&(p.tempDateTime.end=p.tempDateTime.start),"start"==n&&(p.event.eventTimes.start=p.dateTimeToUnixTime(e)),"end"==n&&(p.event.eventTimes.end=p.dateTimeToUnixTime(e))},p.guestsAreInvited=function(){return!!p.event.guestList},p.validateGuestEmail=function(){if(p.newGuest.email.address){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(p.newGuest.email.address)?(p.newGuest.email.valid=!0,p.newGuest.email.style={color:"green"}):(p.newGuest.email.valid=!1,p.newGuest.email.style={color:""})}},p.isSectionComplete=function(){for(i=0;i<8;i++)n.info(p.requiredInputs[i])},p.saveAndAdvance=function(){p.event.$save().then(function(){n.info("event saved")})["catch"](function(e){n.info("error! "+e)}),p.isSectionComplete(),1==p.manageSections[1].complete&&1==p.manageSections[2].complete&&1==p.manageSections[3].complete?p.eventRedirect("/userEvents",a.uid):p.manageSections[1].active?p.changeSection(2):p.manageSections[2].active?p.changeSection(3):p.manageSections[3].active&&p.changeSection(1)},p.addGuestToHostsList=function(){var e=s(p.newGuest.email.address);if(p.newGuest.name&&p.newGuest.email.valid){if(p.event.guestList)for(var t=0;p.event.guestList[t];){if(p.event.guestList[t].email==l(e))return n.info("This guest is already on the list"),void d();t++}else p.event.guestList={};if(b[e]){if(b[e]==a.uid)return n.info("tried to register the host"),void d();c(b[e]),p.event.guestList[b[e]]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address}}else f(e),p.event.guestList[e]={attending:!1,status:"pending",name:p.newGuest.name,email:p.newGuest.email.address};p.saveEvent(),d()}else n.info("you didn't enter a name and or email")},p.guestWillAttend=function(e){var t=w.child("Users").child(a.uid).child("events"),i=0,r=!1;if(p.event.guestList[a.uid].attending=e,p.event.guestList[a.uid].status="attending",t.child("pending").on("value",function(r){var o=r.val();n.info(o),n.info(o[a.hostId]),n.info(o[a.hostId][a.eventId]);var s=o[a.hostId][a.eventId];n.info(s);for(invitation in o)i++;n.info("total attending: "+i),e&&t.child("attending").child(a.hostId).child(a.eventId).set(s,function(e){e&&n.info(e)})}),t.child("attending").on("value",function(e){var t=e.val();n.info("this is the attending list"),n.info(t),t.updated&&(r=!0)},function(e){e&&n.info(e)}),2>i){var o=new Date;t.child("pending").update({updated:u(o)},function(e){e&&n.info(e)})}t.child("pending").child(a.hostId).remove(),r&&n.info("removing the updated placeholder"),p.event.$save()},p.updateUpdatedParam=function(){var e=w.child("Users").child(a.uid).child("events");n.info("updating the param"),e.child("attending").on("value",function(e){n.info(e.val())}),e.child("attending").child("updated").remove()},p.addInvitationToAttending=function(e){var t=w.child("Users").child(a.uid).child("events"),i=0;t.child("pending").on("value",function(r){var o=r.val(),s=o[a.hostId][a.eventId];n.info(o),n.info(o[a.hostId]),n.info(o[a.hostId][a.eventId]);for(invitation in o)i++;n.info("total pending invitations: "+i),n.info(e),e&&t.child("attending").child(a.hostId).child(a.eventId).set(s,function(e){e&&n.info(e)})})},o()}function LandingPageController(e,n,t,a,r){function o(e){return btoa(e)}function s(e){return Date.parse(e)}function l(i,a){var r=i+"/"+c.uid+"/"+c.token;n.info("redirecting to: "+r),t.path(r),e.$apply()}var u=this,d="https://meetupplanner.firebaseio.com/",c={};u.showRequirnments=!1,u.validNewName={valid:!1,style:{color:""}},u.validNewEmail={valid:!1,style:{color:""}},u.securePassword={secure:!1,style:{color:""}},u.unlockCreateUserBtn={usable:!1,"class":"btn btn-warning"},u.message="testing",u.validUserEmail={valid:!1,style:{color:""}},u.validUserPassword={valid:!1,style:{color:""}},u.unclockUserLoginBtn={usable:!1,"class":"btn btn-warning"},u.passwordRequirnments={0:{constraint:"Is at least 16 characters long",style:{color:"red"},met:!1},1:{constraint:"Is no longer than 100 characters",style:{color:"red"},met:!1},2:{constraint:"Contains at least one required symbol (!@#$%^&*)",style:{color:"red"},met:!1},3:{constraint:"Contains at least one number",style:{color:"red"},met:!1},4:{constraint:"Contains at least one lowercase letter",style:{color:"red"},met:!1},5:{constraint:"Contains at least one uppercase letter",style:{color:"red"},met:!1},6:{constraint:"Doesn't have any illegal characters",style:{color:"red"},met:!1}},u.displayPassReqs=function(){u.newName&&u.newEmail?u.showRequirnments=!0:u.showRequirnments=!1},u.checkNewName=function(){u.newName&&(u.newName.length>0?(u.validNewName.valid=!0,u.validNewName.style={color:"green"}):(u.validNewName.valid=!1,u.validNewName.style={color:"red"})),u.openCreateUserButton()},u.checkNewEmail=function(){if(u.newEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.newEmail)?(u.validNewEmail.valid=!0,u.validNewEmail.style={color:"green"}):(u.validNewEmail.valid=!1,u.validNewEmail.style={color:"red"})}u.openCreateUserButton()},u.checkUserEmail=function(){if(u.userEmail){var e=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");e.test(u.userEmail)?(u.validUserEmail.valid=!0,u.validUserEmail.style={color:"green"}):(u.validUserEmail.valid=!1,u.validUserEmail.style={color:"red"})}u.openUserLoginBtn()},u.checkNewPasswords=function(){var e={0:[""," your password needs to be 16 characters or longer"],1:[""," your password needs to be less than 100 characters"],2:["[!@#$%^&*]"," no required symbols found"],3:["[0-9]"," no numbers found"],4:["[a-z]"," no lowercase letters found"],5:["[A-Z]"," no uppercase letters found"],6:["[^A-z0-9!@#$%^&*]"," illegal characters found"]};if(u.newPassword){for(u.newPassword.length>15?(u.passwordRequirnments[0].style={color:"green"},u.passwordRequirnments[0].met=!0):(u.passwordRequirnments[0].style={color:"red"},u.passwordRequirnments[0].met=!1),u.newPassword.length<=100?(u.passwordRequirnments[1].style={color:"green"},u.passwordRequirnments[1].met=!0):(u.passwordRequirnments[1].style={color:"red"},u.passwordRequirnments[1].met=!1),i=2;i<6;i++){var n=new RegExp(e[i][0],"");n.test(u.newPassword)?(u.passwordRequirnments[i].style={color:"green"},u.passwordRequirnments[i].met=!0):(u.passwordRequirnments[i].style={color:"red"},u.passwordRequirnments[i].met=!1)}var n=new RegExp(e[6][0],"");n.test(u.newPassword)?(u.passwordRequirnments[6].style={color:"green"},u.passwordRequirnments[6].met=!0):(u.passwordRequirnments[6].style={color:"red"},u.passwordRequirnments[6].met=!1),u.passwordRequirnments[0].met&&u.passwordRequirnments[1].met&&u.passwordRequirnments[2].met&&u.passwordRequirnments[3].met&&u.passwordRequirnments[4].met&&u.passwordRequirnments[5].met&&u.passwordRequirnments[6].met?u.securePassword.secure=!0:u.securePassword.secure=!1,u.securePassword.secure?u.securePassword.style={color:"green"}:u.securePassword.style={color:"red"}}u.openCreateUserButton()},u.checkUserPasswords=function(){u.userPassword&&(u.userPassword.length>15?(u.validUserPassword.style={color:"green"},u.validUserPassword.valid=!0):(u.validUserPassword.style={color:"red"},u.validUserPassword.valid=!1)),u.openUserLoginBtn()},u.openCreateUserButton=function(){u.validNewName.valid&&u.validNewEmail.valid&&u.securePassword.secure?(u.unlockCreateUserBtn["class"]="btn btn-success",u.unlockCreateUserBtn.usable=!0):(u.unlockCreateUserBtn["class"]="btn btn-warning",u.unlockCreateUserBtn.usable=!1)},u.openUserLoginBtn=function(){u.validUserEmail.valid&&u.validUserPassword.valid?(u.unclockUserLoginBtn["class"]="btn btn-success",u.unclockUserLoginBtn.usable=!0):(u.unclockUserLoginBtn["class"]="btn btn-warning",u.unclockUserLoginBtn.usable=!1)},u.update=function(){u.newName=a.find("#newName")[0].value,u.newEmail=a.find("#newEmail")[0].value,u.userEmail=a.find("#userEmail")[0].value,u.checkNewName(),u.checkNewEmail(),u.checkUserEmail()},u.createNewUser=function(){if(n.info("Creating a new user account now!"),u.unlockCreateUserBtn.usable){var e=new Firebase(d);e.createUser({email:u.newEmail,password:u.newPassword},function(t,i){if(t)n.info("Error creating user: "+t);else{n.info(i),c=i;var a=e.child("Users/"+i.uid),r=new Date;a.set({bio:{name:u.newName,email:u.newEmail},events:{pending:{updated:s(r)},hosting:{updated:s(r)},attending:{updated:s(r)},completed:{updated:s(r)}}},function(e){e?n.info("Data could not be saved: "+e):n.info("Data saved successfully.")}),e.child("Uids").child(o(u.newEmail)).set(c.uid,function(e){e?n.info("Data could not be saved. "+e):n.info("uid created sucessfully.")}),l("/userInformation",c)}})}},u.loginRegisteredUser=function(){if(u.unclockUserLoginBtn.usable){var t=new Firebase(d);t.authWithPassword({email:u.userEmail,password:u.userPassword},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),c=i,l("/userInformation",c),e.$apply())})}},u.alertMe=function(){alert("this is working! an alert!")},u.onResizeFunction=function(){var e=angular.element(".inputText");r.outerWidth>r.outerHeight?(e.css("font-size","2em"),n.info("making bigger")):e.css("font-size","1.2em")},"addEventListener"in a&&a.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(a.body)},!1),angular.element(r).bind("resize",function(){u.onResizeFunction()}),angular.element(a).ready(function(){r.outerWidth<600&&u.onResizeFunction()}),u.master={},u.update=function(e){u.master=angular.copy(e)},u.reset=function(e){e&&(e.$setPristine(),e.$setUntouched()),u.user=angular.copy(u.master)},u.reset()}function MainController(e,n,t){var i=this,a="https://meetupplanner.firebaseio.com/",r=new Firebase(a);i.logout=function(){alert("logging you out!"),r.unauth(),n.path("/")},"addEventListener"in t&&t.addEventListener("DOMContentLoaded",function(){e.info("adding FastClick"),FastClick.attach(t.body)},!1)}function NewUserSignUpController(e,n,t,a,r,o){function s(){""!=l.errors.name||""!=l.errors.email||l.errors.password?l.errors.passesAllTests=!1:l.errors.passesAllTests=!0,angular.isDefined(l.inputs.newName)&&""!==l.inputs.newName&&angular.isDefined(l.inputs.newEmail)&&""!==l.inputs.newEmail&&angular.isDefined(l.inputs.newPassword)&&""!==l.inputs.newPassword?l.inputs.requiredFieldsDefined=!0:l.inputs.requiredFieldsDefined=!1}var l=this;l.inputs={newName:"",newEmail:"",newPassword:"",requiredFieldsDefined:!1},l.errors={name:"",email:"",password:!1,passesAllTests:!1},l.passReqs={0:{id:"",req:"Is at least 16 characters long",fulfilled:!1,style:{color:"red"}},1:{id:"",req:"Is no longer than 100 characters",fulfilled:!1,style:{color:"red"}},2:{id:"",req:"Contains at least one lowercase letter",fulfilled:!1,style:{color:"red"}},3:{id:"",req:"Contains at least one uppercase letter",fulfilled:!1,style:{color:"red"}},4:{id:"",req:"Contains at least one number",fulfilled:!1,style:{color:"red"}},5:{id:"",req:"Contains at least one required symbol (!@#$%^&*)",fulfilled:!1,style:{color:"red"}},6:{id:"",req:"Doesn't have any illegal characters",fulfilled:!0,style:{color:"red"}}},l.showReqsBox=!1;var u=t;l.checkNewName=function(){var e=[],n=u.required(l.inputs.newName),t=u.minNameLength(l.inputs.newName);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.name=e.join(", "):l.errors.name="",s()},l.checkNewEmail=function(){var e=[],n=u.required(l.inputs.newEmail),t=u.email(l.inputs.newEmail);angular.isDefined(n)&&e.push(n),angular.isDefined(t)&&e.push(t),e.length>0?l.errors.email=e.join(", "):l.errors.email="",s()},l.checkNewPassword=function(){l.showReqsBox=!0;var e=[],n=u.required(l.inputs.newPassword),t=[u.minPassLength(l.inputs.newPassword),u.maxPassLength(l.inputs.newPassword),u.atLeastOneLowercase(l.inputs.newPassword),u.atLeastOneUppercase(l.inputs.newPassword),u.atLeastOneNumber(l.inputs.newPassword),u.atLeastOneSymbol(l.inputs.newPassword),u.illegalCharacter(l.inputs.newPassword)];angular.isDefined(n)&&e.push(n),e.length>0?l.errors.password=e.join(", "):l.errors.email="";var a=!1;for(i=0;i<7;i++)t[i]?(l.passReqs[i].fulfilled=!0,l.passReqs[i].style={color:"green"}):(l.passReqs[i].fulfilled=!1,l.passReqs[i].style={color:"red"},a=!0);l.errors.password=a,s()},l.exitPassword=function(){l.checkNewPassword(),l.showReqsBox=!1},l.createNewUser=function(){var e=r;if(l.errors.passesAllTests&&l.inputs.requiredFieldsDefined){var t=a,i=o;i.loadPrimaries(l.inputs.newName,l.inputs.newEmail),t.createNewUser(l.inputs.newEmail,l.inputs.newPassword).then(function(e){t.addNewUserToDatabase(e.uid,l.inputs.newName,l.inputs.newEmail).then(function(i){n.info(i),t.addNewUserToRegUsersList(e.uid,l.inputs.newEmail).then(function(e){n.info(e)})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)})})["catch"](function(e){n.info(e)}),e.redirectTo("/userInformation")}}}function topMenuController(e,n,t,i,a){function r(e){e?(n.info("User "+e.uid+" is logged in with "+e.provider),s.loggedIn=!0):(n.info("User is logged out"),s.loggedIn=!1)}function o(e,i){var a=e+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+a),t.path(a)}var s=this,l="https://meetupplanner.firebaseio.com/",u=new Firebase(l);s.loggedIn=!1,"addEventListener"in i&&i.addEventListener("DOMContentLoaded",function(){n.info("adding FastClick"),FastClick.attach(i.body)},!1),angular.element(a).bind("resize",function(){s.onResizeFunction(),e.$apply()}),angular.element(i).ready(function(){a.outerWidth<600&&(s.onResizeFunction(),e.$apply())}),s.logout=function(){n.info("logging out!"),s.loggedIn=!1,u.unauth(),o("/",{uid:"",token:""})},s.navBarLoginRegisteredUser=function(){n.info("launching login");var t=new Firebase(l);t.authWithPassword({email:s.navbarUserEmail,password:s.navbarUserPass},function(t,i){t?n.info("Error Logging In: "+t):(n.info("Logged In successfully: "+i.uid),n.info(i),o("/userInformation",i),e.$apply(),angular.element(".navbar-toggle").click())})},s.onResizeFunction=function(){var e=angular.element(".navbarInputs");e.css("width",a.outerWidth-26+"px")},u.onAuth(r)}function UserEventsController(e,n,t,i,a){function r(e){return Date.parse(e)}function o(e,n){return 10*e+n}function s(e,a,r){var o=e+"/"+a+"/"+r+"/"+i.uid+"/"+i.token;n.info("redirecting to: "+o),t.path(o)}var l=this,u="https://meetupplanner.firebaseio.com/",d=new Firebase(u),c=d.child("Users").child(i.uid).child("events"),f=d.child("Users").child(i.uid).child("bio");l.events=a(c),l.showDecline=!1,f.child("name").on("value",function(t){l.currentUserName=t.val(),n.info("got the user name"),e.$apply()},function(e){n.info("The read failed: "+e.code)}),l.eventsAreBeingHosted=function(){var e=!1;for(element in l.events.hosting)"updated"!=element&&(e=!0);return e},l.eventInvitationsPending=function(){var e=!1;for(element in l.events.pending)"updated"!=element&&(e=!0);return e},l.attendingEvents=function(e){var n=!1;for(element in l.events.attending)"updated"!=element&&(n=!0);return n},l.percentRSVPed=function(e){return e?l.totalAttending(e)/l.totalInvited(e)*100:0},l.totalAttending=function(e){if(e){var n=0;return angular.forEach(e,function(e,t){1==e.attending&&n++}),n}return 0},l.totalInvited=function(e){if(e){var n=0;return angular.forEach(e,function(e,t){n++}),n}return 0},l.acceptEventInvitation=function(e){},l.redirectToHostedEvent=function(e){n.info("you're accessing event "+e),s("/event",e,i.uid)},l.redirectTo3rdPartyEvent=function(e,t){n.info(e),"pending"==t?(n.info("accessing from a pending invitation"),n.info(e),s("/event",e.id,e.host)):"attending"==t&&(n.info("accessing from an rsvped invitation"),s("/event",e.id,e.host))},l.createNewEvent=function(){n.info("you're creating a new event!");var e=new Date;l.events.hosting?noOfEventsAlready=Object.keys(l.events.hosting).length:noOfEventsAlready=0;var t=o(r(e),noOfEventsAlready);l.events.hosting[t]={id:t,eventTimes:{start:r(e),end:r(e)},host:{id:i.uid,name:l.currentUserName}},(""==l.events.hosting.updated||l.events.hosting.updated)&&(n.info("deleting the updated field"),delete l.events.hosting.updated),s("/event",t,i.uid)},n.info("into the user Events controller"),n.info(l.events)}function UserInformationController(e,n,t,i){function a(e){return new Date(parseInt(e))}function r(e){return Date.parse(e)}function o(){e.info("initializing the user information page"),l.loadBio().then(function(e){s.user=e,angular.isDefined(e.dob)&&""!==e.dob&&(s.tempBirthday=a(e.dob))})}var s=this,l=t;s.user={},s.tempBirthday,s.view={dataToSave:!1,isData:!1,btnMssg:"Move On...",proceedBtn:"btn btn-primary"},s.checkValues=function(){!angular.isUndefined(s.user.company)&&""!==s.user.company||!angular.isUndefined(s.user.title)&&""!==s.user.title||!angular.isUndefined(s.user.dob)&&""!==s.user.dob?(s.view.dataToSave=!0,s.view.proceedBtn="btn btn-success",s.view.btnMssg="Save & Continue"):(s.view.dataToSave=!1,s.view.proceedBtn="btn btn-primary",s.view.btnMssg="Move On...")},s.updateDOB=function(){s.user.dob=r(s.tempBirthday)},s.saveAndMoveOn=function(){var e=i;s.updateDOB(),s.view.isData&&l.updateBio(s.user),e.redirectTo("/userEvents",s.user.uid)},o()}function authService(e,n,t){function i(){return e.info("logging from the isLoggedIn Method"),!0}var a="https://meetupplanner.firebaseio.com/",r=(new Firebase(a),{isLoggedIn:i});return r}function backendServices(e,n,t){function i(e){return btoa(e)}function a(e){return atob(e)}function r(e){return new Date(parseInt(e))}function o(e){return Date.parse(e)}function s(e,i){new Firebase(v);return n(function(e,n){t.setTimeout(function(){e({uid:1234567})},2e3)})}function l(e,i,a){var r=new Firebase(v);r.child("Users/"+e),new Date;return n(function(e,n){t.setTimeout(function(){e("Data saved successfully.")},2e3)})}function u(e,a){var r=new Firebase(v);r.child("Uids").child(i(a));return n(function(e,n){t.setTimeout(function(){e("uid created sucessfully.")},2e3)})}function d(e,n){}function c(e){var i=new Firebase(v);i.child("Users/"+e.uid);return n(function(e,n){t.setTimeout(function(){e("all user data uploaded successfully")},2e3)})}function f(){}function m(){new Firebase(v);return n(function(e,n){t.setTimeout(function(){e({uid:"soaiu0-9283m-msoSA-2m3-srew",name:"Ian McAllister",email:"iemcallister@gmail.com",company:"",title:""})},2e3)})}var v="https://meetupplanner.firebaseio.com/",g={utf8_to_b64:i,b64_to_utf8:a,unixTimeToDateTime:r,dateTimeToUnixTime:o,createNewUser:s,LoginRegisteredUser:d,addNewUserToDatabase:l,addNewUserToRegUsersList:u,uploadUserData:c,downloadUserData:f,getUserBio:m};return g}function trafficValet(e,n){function t(t,i,a){angular.isDefined(i)?(t=t+"/"+i,angular.isDefined(a)&&(t=t+"/"+a,e.info("redirecting now to "+t),n.path(t)),e.info("redirecting now to "+t),n.path(t)):(e.info("redirecting now to "+t),n.path(t))}var i={redirectTo:t};return i}function userData(e,n,t){function i(){return D.uid}function a(){return D.name}function r(){return D.email}function o(){return D.company}function s(){return D.title}function l(){return D.dob}function u(e){return D[e]}function d(e){D.uid=uid}function c(e){D.name=e}function f(e){D.email=e}function m(e){D.company=e}function v(e){D.title=e}function g(e){D.dob=e}function p(e,n){D[e][n.id]=n}function h(e){c(e.name),f(e.email),m(e.company),v(e.title),g(e.dob),b()}function w(e,n){D[e][n.id].remove()}function U(e,n){c(e),f(n)}function b(){var e=t;e.uploadUserData(D)}function y(){var e=t;e.downloadUserData().then(function(e){D=e})}function E(){return""!==D.uid&&""!==D.name&&""!==D.email}function T(){var e=t;return n(function(n,t){E()?n({name:D.name,email:D.email,company:D.company,title:D.title,dob:D.dob}):e.getUserBio().then(function(e){n(e)})})}var D={uid:"",name:"",email:"",company:"",title:"",dob:0,hosting:{},pending:{},attending:{},completed:{}},$={getUID:i,getName:a,getEmail:r,getCompany:o,getTitle:s,getDOB:l,getUserEvents:u,setUID:d,setName:c,setEmail:f,setCompany:m,setTitle:v,setDOB:g,updateUserEvents:p,updateBio:h,removeUserEvents:w,loadPrimaries:U,writeAllToDatabase:b,readAllFromDatabase:y,isABio:E,loadBio:T};return $}function validation(e){function n(e){return angular.isUndefined(e)?"This is a required field":void 0}function t(e){return angular.isDefined(e)&&e.length<f?"Name should be at least "+f+" characters":void 0}function i(e){return angular.isDefined(e)&&!(e.length<m)}function a(e){return angular.isDefined(e)&&!(e.length>v)}function r(e){if(angular.isDefined(e)){var n=new RegExp("[!@#$%^&*]");return!!n.test(e)}return!1}function o(e){if(angular.isDefined(e)){var n=new RegExp("[0-9]","");return!!n.test(e)}return!1}function s(e){if(angular.isDefined(e)){var n=new RegExp("[a-z]","");return!!n.test(e)}return!1}function l(e){if(angular.isDefined(e)){var n=new RegExp("[A-Z]","");return!!n.test(e)}return!1}function u(e){if(angular.isDefined(e)){var n=new RegExp("[^A-z0-9!@#$%^&*]","");return!n.test(e)}return!1}function d(e){var n=new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?","");return n.test(e)?void 0:"Not a valid e-mail address"}function c(e){}var f=3,m=16,v=100,g={required:n,minNameLength:t,minPassLength:i,maxPassLength:a,atLeastOneSymbol:r,atLeastOneNumber:o,atLeastOneLowercase:s,atLeastOneUppercase:l,illegalCharacter:u,email:d,dateOfBirth:c};return g}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"LandingPageController",controllerAs:"vm"}).when("/signup",{templateUrl:"views/newUserSignup.htm",controller:"NewUserSignUpController",controllerAs:"vm"}).when("/login",{templateUrl:"views/registeredUserLogin",controller:"RegUserLoginController",controllerAs:"vm"}).when("/userInformation/:uid?/:token?",{templateUrl:"views/userInformation.htm",controller:"UserInformationController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/userEvents/:uid?/:token?",{templateUrl:"views/userEvents.htm",controller:"UserEventsController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).when("/event/:eventId?/:hostId?/:uid?/:token?",{templateUrl:"views/anEvent.htm",controller:"AnEventController",controllerAs:"vm",resolve:{userAuthenticationService:userAuthenticationService}}).otherwise({redirectTo:"/"})}function userAuthenticationService(e){e.isLoggedIn()}function toolBar(){function e(e,n,t,i){}function n(e){e.info("directive loading")}e.$inject=["scope","el","attr","ctrl"];var t={restrict:"AECM",templateUrl:"../views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:n,controllerAs:"vm",bindToController:!0};return n.$inject=["$log"],t}config.$inject=["$routeProvider"],userAuthenticationService.$inject=["authService"],angular.module("meetUpEventApp",["ngRoute","ngTouch","firebase"]),angular.module("meetUpEventApp").controller("AnEventController",AnEventController),AnEventController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("LandingPageController",LandingPageController),LandingPageController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("MainController",MainController),MainController.$inject=["$log","$location","$document"],angular.module("meetUpEventApp").controller("NewUserSignUpController",NewUserSignUpController),NewUserSignUpController.$inject=["$scope","$log","validation","backendServices","trafficValet","userData"],angular.module("meetUpEventApp").controller("topMenuController",topMenuController),topMenuController.$inject=["$scope","$log","$location","$document","$window"],angular.module("meetUpEventApp").controller("UserEventsController",UserEventsController),UserEventsController.$inject=["$scope","$log","$location","$routeParams","$firebaseObject"],angular.module("meetUpEventApp").controller("UserInformationController",UserInformationController),UserInformationController.$inject=["$log","$document","userData","trafficValet"],angular.module("meetUpEventApp").factory("authService",authService),authService.$inject=["$log","$q","$location"],angular.module("meetUpEventApp").factory("backendServices",backendServices),backendServices.$inject=["$log","$q","$window"],angular.module("meetUpEventApp").factory("trafficValet",trafficValet),trafficValet.$inject=["$log","$location"],angular.module("meetUpEventApp").factory("userData",userData),userData.$inject=["$log","$q","backendServices"],angular.module("meetUpEventApp").factory("validation",validation),validation.$inject=["$log"],angular.module("meetUpEventApp").config(config),angular.module("meetUpEventApp").directive("toolBar",toolBar);
//# sourceMappingURL=data:application/json;base64,
